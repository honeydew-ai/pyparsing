/* Generated by Cython 0.29.30 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "extra_compile_args": [
            "-flto",
            "-march=native",
            "-fno-omit-frame-pointer",
            "-std=c++20"
        ],
        "extra_link_args": [
            "-flto",
            "-std=c++20"
        ],
        "language": "c++",
        "name": "pyparsing",
        "sources": [
            "pyparsing/results.py",
            "pyparsing/unicode.py",
            "pyparsing/util.py",
            "pyparsing/actions.py",
            "pyparsing/__init__.py",
            "pyparsing/core.py",
            "pyparsing/common.py",
            "pyparsing/exceptions.py",
            "pyparsing/testing.py",
            "pyparsing/helpers.py",
            "pyparsing/diagram/__init__.py"
        ]
    },
    "module_name": "pyparsing"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_30"
#define CYTHON_HEX_VERSION 0x001D1EF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyparsing____init__
#define __PYX_HAVE_API__pyparsing____init__
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyparsing/__init__.py",
};

/*--- Type declarations ---*/
struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__;
struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr;

/* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */
struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "pyparsing/__init__.py":120
 * 
 *     def __repr__(self):
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *__pyx_outer_scope;
  PyObject *__pyx_v_nv;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate) PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate) PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SetPackagePathFromImportLib.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(const char* parent_package_name, PyObject *module_name);
#else
#define __Pyx_SetPackagePathFromImportLib(a, b) 0
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'pyparsing.__init__' */
static PyTypeObject *__pyx_ptype_9pyparsing_8__init_____pyx_scope_struct____repr__ = 0;
static PyTypeObject *__pyx_ptype_9pyparsing_8__init_____pyx_scope_struct_1_genexpr = 0;
#define __Pyx_MODULE_NAME "pyparsing.__init__"
extern int __pyx_module_is_main_pyparsing____init__;
int __pyx_module_is_main_pyparsing____init__ = 0;

/* Implementation of 'pyparsing.__init__' */
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_zip;
static const char __pyx_k_C[] = "C";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_Or[] = "Or";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "";
static const char __pyx_k__5[] = " ";
static const char __pyx_k__6[] = " / ";
static const char __pyx_k__8[] = "(";
static const char __pyx_k__9[] = ", ";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_ABC[] = "ABC";
static const char __pyx_k_And[] = "And";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_Opt[] = "Opt";
static const char __pyx_k_Set[] = "Set";
static const char __pyx_k_Tag[] = "Tag";
static const char __pyx_k__10[] = ")";
static const char __pyx_k__15[] = "*";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_ppu[] = "ppu";
static const char __pyx_k_r_2[] = "{}={!r}";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Char[] = "Char";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_Each[] = "Each";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_PY_3[] = "PY_3";
static const char __pyx_k_Path[] = "Path";
static const char __pyx_k_Word[] = "Word";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_core[] = "core";
static const char __pyx_k_diag[] = "__diag__";
static const char __pyx_k_html[] = "html";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nums[] = "nums";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_Empty[] = "Empty";
static const char __pyx_k_Group[] = "Group";
static const char __pyx_k_Match[] = "Match";
static const char __pyx_k_RLock[] = "RLock";
static const char __pyx_k_Regex[] = "Regex";
static const char __pyx_k_Token[] = "Token";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_Union[] = "Union";
static const char __pyx_k_White[] = "White";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_final[] = "final";
static const char __pyx_k_major[] = "major";
static const char __pyx_k_micro[] = "micro";
static const char __pyx_k_minor[] = "minor";
static const char __pyx_k_oneOf[] = "oneOf";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_wraps[] = "wraps";
static const char __pyx_k_NotAny[] = "NotAny";
static const char __pyx_k_SkipTo[] = "SkipTo";
static const char __pyx_k_TextIO[] = "TextIO";
static const char __pyx_k_alphas[] = "alphas";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_bslash[] = "_bslash";
static const char __pyx_k_common[] = "common";
static const char __pyx_k_compat[] = "__compat__";
static const char __pyx_k_dictOf[] = "dictOf";
static const char __pyx_k_fields[] = "_fields";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lineno[] = "lineno";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_one_of[] = "one_of";
static const char __pyx_k_py_str[] = "py_str";
static const char __pyx_k_serial[] = "serial";
static const char __pyx_k_srange[] = "srange";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_Combine[] = "Combine";
static const char __pyx_k_Forward[] = "Forward";
static const char __pyx_k_Keyword[] = "Keyword";
static const char __pyx_k_LRUMemo[] = "LRUMemo";
static const char __pyx_k_LineEnd[] = "LineEnd";
static const char __pyx_k_Literal[] = "Literal";
static const char __pyx_k_Located[] = "Located";
static const char __pyx_k_MAX_INT[] = "_MAX_INT";
static const char __pyx_k_NoMatch[] = "NoMatch";
static const char __pyx_k_OpAssoc[] = "OpAssoc";
static const char __pyx_k_TypeVar[] = "TypeVar";
static const char __pyx_k_WordEnd[] = "WordEnd";
static const char __pyx_k_actions[] = "actions";
static const char __pyx_k_dict_of[] = "dict_of";
static const char __pyx_k_flatten[] = "_flatten";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_helpers[] = "helpers";
static const char __pyx_k_hexnums[] = "hexnums";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_lineEnd[] = "lineEnd";
static const char __pyx_k_opAssoc[] = "opAssoc";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_results[] = "results";
static const char __pyx_k_testing[] = "testing";
static const char __pyx_k_ungroup[] = "ungroup";
static const char __pyx_k_unicode[] = "unicode";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_Callable[] = "Callable";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_OnlyOnce[] = "OnlyOnce";
static const char __pyx_k_Optional[] = "Optional";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_Suppress[] = "Suppress";
static const char __pyx_k_line_end[] = "line_end";
static const char __pyx_k_makeTags[] = "_makeTags";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_punc8bit[] = "punc8bit";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_str_type[] = "str_type";
static const char __pyx_k_tokenMap[] = "tokenMap";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_FifoCache[] = "_FifoCache";
static const char __pyx_k_Generator[] = "Generator";
static const char __pyx_k_LRUMemo_2[] = "_LRUMemo";
static const char __pyx_k_LineStart[] = "LineStart";
static const char __pyx_k_NullToken[] = "_NullToken";
static const char __pyx_k_OneOrMore[] = "OneOrMore";
static const char __pyx_k_RePattern[] = "_RePattern";
static const char __pyx_k_StringEnd[] = "StringEnd";
static const char __pyx_k_WordStart[] = "WordStart";
static const char __pyx_k_alphanums[] = "alphanums";
static const char __pyx_k_charRange[] = "_charRange";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_lineStart[] = "lineStart";
static const char __pyx_k_lru_cache[] = "lru_cache";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyparsing[] = "pyparsing";
static const char __pyx_k_stringEnd[] = "stringEnd";
static const char __pyx_k_token_map[] = "token_map";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_withClass[] = "withClass";
static const char __pyx_k_CharsNotIn[] = "CharsNotIn";
static const char __pyx_k_CloseMatch[] = "CloseMatch";
static const char __pyx_k_FollowedBy[] = "FollowedBy";
static const char __pyx_k_GoToColumn[] = "GoToColumn";
static const char __pyx_k_MatchFirst[] = "MatchFirst";
static const char __pyx_k_NamedTuple[] = "NamedTuple";
static const char __pyx_k_PrecededBy[] = "PrecededBy";
static const char __pyx_k_ZeroOrMore[] = "ZeroOrMore";
static const char __pyx_k_alphas8bit[] = "alphas8bit";
static const char __pyx_k_anyOpenTag[] = "anyOpenTag";
static const char __pyx_k_exceptions[] = "exceptions";
static const char __pyx_k_identchars[] = "identchars";
static const char __pyx_k_itemgetter[] = "itemgetter";
static const char __pyx_k_line_start[] = "line_start";
static const char __pyx_k_nestedExpr[] = "nestedExpr";
static const char __pyx_k_printables[] = "printables";
static const char __pyx_k_restOfLine[] = "restOfLine";
static const char __pyx_k_singleChar[] = "_singleChar";
static const char __pyx_k_string_end[] = "string_end";
static const char __pyx_k_trim_arity[] = "_trim_arity";
static const char __pyx_k_with_class[] = "with_class";
static const char __pyx_k_AtLineStart[] = "AtLineStart";
static const char __pyx_k_Diagnostics[] = "Diagnostics";
static const char __pyx_k_ParseAction[] = "ParseAction";
static const char __pyx_k_PendingSkip[] = "_PendingSkip";
static const char __pyx_k_StringStart[] = "StringStart";
static const char __pyx_k_anyCloseTag[] = "anyCloseTag";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_enable_diag[] = "enable_diag";
static const char __pyx_k_escapedPunc[] = "_escapedPunc";
static const char __pyx_k_htmlComment[] = "htmlComment";
static const char __pyx_k_locatedExpr[] = "locatedExpr";
static const char __pyx_k_makeXMLTags[] = "makeXMLTags";
static const char __pyx_k_nested_expr[] = "nested_expr";
static const char __pyx_k_replaceWith[] = "replaceWith";
static const char __pyx_k_stringStart[] = "stringStart";
static const char __pyx_k_unicode_set[] = "unicode_set";
static const char __pyx_k_versionTime[] = "__versionTime__";
static const char __pyx_k_ParseResults[] = "ParseResults";
static const char __pyx_k_QuotedString[] = "QuotedString";
static const char __pyx_k_any_open_tag[] = "any_open_tag";
static const char __pyx_k_countedArray[] = "countedArray";
static const char __pyx_k_disable_diag[] = "disable_diag";
static const char __pyx_k_html_comment[] = "html_comment";
static const char __pyx_k_makeHTMLTags[] = "makeHTMLTags";
static const char __pyx_k_quotedString[] = "quotedString";
static const char __pyx_k_releaselevel[] = "releaselevel";
static const char __pyx_k_removeQuotes[] = "removeQuotes";
static const char __pyx_k_replace_with[] = "replace_with";
static const char __pyx_k_rest_of_line[] = "rest_of_line";
static const char __pyx_k_string_start[] = "string_start";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_version_time[] = "__version_time__";
static const char __pyx_k_AtStringStart[] = "AtStringStart";
static const char __pyx_k_DelimitedList[] = "DelimitedList";
static const char __pyx_k_IndentedBlock[] = "IndentedBlock";
static const char __pyx_k_MultipleMatch[] = "_MultipleMatch";
static const char __pyx_k_ParserElement[] = "ParserElement";
static const char __pyx_k_PositionToken[] = "PositionToken";
static const char __pyx_k_UnboundedMemo[] = "UnboundedMemo";
static const char __pyx_k_any_close_tag[] = "any_close_tag";
static const char __pyx_k_builtin_exprs[] = "_builtin_exprs";
static const char __pyx_k_cStyleComment[] = "cStyleComment";
static const char __pyx_k_counted_array[] = "counted_array";
static const char __pyx_k_delimitedList[] = "delimitedList";
static const char __pyx_k_generatorType[] = "_generatorType";
static const char __pyx_k_htmlEntityMap[] = "_htmlEntityMap";
static const char __pyx_k_indentedBlock[] = "indentedBlock";
static const char __pyx_k_infixNotation[] = "infixNotation";
static const char __pyx_k_make_xml_tags[] = "make_xml_tags";
static const char __pyx_k_quoted_string[] = "quoted_string";
static const char __pyx_k_reBracketExpr[] = "_reBracketExpr";
static const char __pyx_k_remove_quotes[] = "remove_quotes";
static const char __pyx_k_unicodeString[] = "unicodeString";
static const char __pyx_k_withAttribute[] = "withAttribute";
static const char __pyx_k_ParseCondition[] = "ParseCondition";
static const char __pyx_k_ParseException[] = "ParseException";
static const char __pyx_k_TokenConverter[] = "TokenConverter";
static const char __pyx_k_UnboundedCache[] = "_UnboundedCache";
static const char __pyx_k_abstractmethod[] = "abstractmethod";
static const char __pyx_k_delimited_list[] = "delimited_list";
static const char __pyx_k_escapedHexChar[] = "_escapedHexChar";
static const char __pyx_k_escapedOctChar[] = "_escapedOctChar";
static const char __pyx_k_identbodychars[] = "identbodychars";
static const char __pyx_k_infix_notation[] = "infix_notation";
static const char __pyx_k_make_html_tags[] = "make_html_tags";
static const char __pyx_k_matchOnlyAtCol[] = "matchOnlyAtCol";
static const char __pyx_k_pyparsing_test[] = "pyparsing_test";
static const char __pyx_k_system_version[] = "system_version";
static const char __pyx_k_unicode_string[] = "unicode_string";
static const char __pyx_k_version_info_2[] = "__version_info__";
static const char __pyx_k_with_attribute[] = "with_attribute";
static const char __pyx_k_CaselessKeyword[] = "CaselessKeyword";
static const char __pyx_k_CaselessLiteral[] = "CaselessLiteral";
static const char __pyx_k_ParseExpression[] = "ParseExpression";
static const char __pyx_k_ParseFailAction[] = "ParseFailAction";
static const char __pyx_k_UnboundedMemo_2[] = "_UnboundedMemo";
static const char __pyx_k_c_style_comment[] = "c_style_comment";
static const char __pyx_k_cached_property[] = "cached_property";
static const char __pyx_k_cppStyleComment[] = "cppStyleComment";
static const char __pyx_k_dblQuotedString[] = "dblQuotedString";
static const char __pyx_k_dblSlashComment[] = "dblSlashComment";
static const char __pyx_k_nullDebugAction[] = "nullDebugAction";
static const char __pyx_k_originalTextFor[] = "originalTextFor";
static const char __pyx_k_sglQuotedString[] = "sglQuotedString";
static const char __pyx_k_DebugStartAction[] = "DebugStartAction";
static const char __pyx_k_UnicodeRangeList[] = "UnicodeRangeList";
static const char __pyx_k_commonHTMLEntity[] = "commonHTMLEntity";
static const char __pyx_k_javaStyleComment[] = "javaStyleComment";
static const char __pyx_k_pyparsing___init[] = "pyparsing.__init__";
static const char __pyx_k_pyparsing_common[] = "pyparsing_common";
static const char __pyx_k_replaced_by_pep8[] = "replaced_by_pep8";
static const char __pyx_k_traceParseAction[] = "traceParseAction";
static const char __pyx_k_SingleCharLiteral[] = "_SingleCharLiteral";
static const char __pyx_k_autoname_elements[] = "autoname_elements";
static const char __pyx_k_cpp_style_comment[] = "cpp_style_comment";
static const char __pyx_k_dbl_quoted_string[] = "dbl_quoted_string";
static const char __pyx_k_dbl_slash_comment[] = "dbl_slash_comment";
static const char __pyx_k_matchPreviousExpr[] = "matchPreviousExpr";
static const char __pyx_k_match_only_at_col[] = "match_only_at_col";
static const char __pyx_k_null_debug_action[] = "null_debug_action";
static const char __pyx_k_original_text_for[] = "original_text_for";
static const char __pyx_k_pyparsing_unicode[] = "pyparsing_unicode";
static const char __pyx_k_replaceHTMLEntity[] = "replaceHTMLEntity";
static const char __pyx_k_sgl_quoted_string[] = "sgl_quoted_string";
static const char __pyx_k_DebugSuccessAction[] = "DebugSuccessAction";
static const char __pyx_k_ParseBaseException[] = "ParseBaseException";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_common_html_entity[] = "common_html_entity";
static const char __pyx_k_core_builtin_exprs[] = "core_builtin_exprs";
static const char __pyx_k_java_style_comment[] = "java_style_comment";
static const char __pyx_k_pythonStyleComment[] = "pythonStyleComment";
static const char __pyx_k_trace_parse_action[] = "trace_parse_action";
static const char __pyx_k_version_info___str[] = "version_info.__str__";
static const char __pyx_k_ParseElementEnhance[] = "ParseElementEnhance";
static const char __pyx_k_ParseFatalException[] = "ParseFatalException";
static const char __pyx_k_ParseImplReturnType[] = "ParseImplReturnType";
static const char __pyx_k_PostParseReturnType[] = "PostParseReturnType";
static const char __pyx_k_enable_all_warnings[] = "enable_all_warnings";
static const char __pyx_k_match_previous_expr[] = "match_previous_expr";
static const char __pyx_k_replace_html_entity[] = "replace_html_entity";
static const char __pyx_k_single_arg_builtins[] = "_single_arg_builtins";
static const char __pyx_k_version_info___repr[] = "version_info.__repr__";
static const char __pyx_k_DebugExceptionAction[] = "DebugExceptionAction";
static const char __pyx_k_ParseSyntaxException[] = "ParseSyntaxException";
static const char __pyx_k_common_builtin_exprs[] = "common_builtin_exprs";
static const char __pyx_k_helper_builtin_exprs[] = "helper_builtin_exprs";
static const char __pyx_k_matchPreviousLiteral[] = "matchPreviousLiteral";
static const char __pyx_k_python_quoted_string[] = "python_quoted_string";
static const char __pyx_k_python_style_comment[] = "python_style_comment";
static const char __pyx_k_trim_arity_call_line[] = "_trim_arity_call_line";
static const char __pyx_k_25_Aug_2024_14_40_UTC[] = "25 Aug 2024 14:40 UTC";
static const char __pyx_k_pyparsing___init___py[] = "pyparsing/__init__.py";
static const char __pyx_k_ParseResultsWithOffset[] = "_ParseResultsWithOffset";
static const char __pyx_k_conditionAsParseAction[] = "conditionAsParseAction";
static const char __pyx_k_match_previous_literal[] = "match_previous_literal";
static const char __pyx_k_should_enable_warnings[] = "_should_enable_warnings";
static const char __pyx_k_version_info___version[] = "version_info.__version__";
static const char __pyx_k_escape_regex_range_chars[] = "_escape_regex_range_chars";
static const char __pyx_k_InfixNotationOperatorSpec[] = "InfixNotationOperatorSpec";
static const char __pyx_k_RecursiveGrammarException[] = "RecursiveGrammarException";
static const char __pyx_k_collapse_string_to_ranges[] = "_collapse_string_to_ranges";
static const char __pyx_k_condition_as_parse_action[] = "condition_as_parse_action";
static const char __pyx_k_default_start_debug_action[] = "_default_start_debug_action";
static const char __pyx_k_InfixNotationOperatorArgType[] = "InfixNotationOperatorArgType";
static const char __pyx_k_default_success_debug_action[] = "_default_success_debug_action";
static const char __pyx_k_default_exception_debug_action[] = "_default_exception_debug_action";
static const char __pyx_k_Paul_McGuire_ptmcg_gm_pyparsing[] = "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>";
static const char __pyx_k_pyparsing_module_Classes_and_me[] = "\npyparsing module - Classes and methods to define and execute parsing grammars\n=============================================================================\n\nThe pyparsing module is an alternative approach to creating and\nexecuting simple grammars, vs. the traditional lex/yacc approach, or the\nuse of regular expressions.  With pyparsing, you don't need to learn\na new syntax for defining grammars or matching expressions - the parsing\nmodule provides a library of classes that you use to construct the\ngrammar directly in Python.\n\nHere is a program to parse \"Hello, World!\" (or any greeting of the form\n``\"<salutation>, <addressee>!\"``), built up using :class:`Word`,\n:class:`Literal`, and :class:`And` elements\n(the :meth:`'+'<ParserElement.__add__>` operators create :class:`And` expressions,\nand the strings are auto-converted to :class:`Literal` expressions)::\n\n    from pyparsing import Word, alphas\n\n    # define grammar of a greeting\n    greet = Word(alphas) + \",\" + Word(alphas) + \"!\"\n\n    hello = \"Hello, World!\"\n    print(hello, \"->\", greet.parse_string(hello))\n\nThe program outputs the following::\n\n    Hello, World! -> ['Hello', ',', 'World', '!']\n\nThe Python representation of the grammar is quite readable, owing to the\nself-explanatory class names, and the use of :class:`'+'<And>`,\n:class:`'|'<MatchFirst>`, :class:`'^'<Or>` and :class:`'&'<Each>` operators.\n\nThe :class:`ParseResults` object returned from\n:class:`ParserElement.parse_string` can be\naccessed as a nested list, a dictionary, or an object with named\nattributes.\n\nThe pyparsing module handles some of the problems that are typically\nvexing when writing text parsers:\n\n  - extra or missing whitespace (the above program will also handle\n    \"Hello,World!\", \"Hello  ,  World  !\", etc.)\n  - quoted strings\n  - embedded comments\n\n\nGetting Started -\n-----------------\nVisit the classes :class:`ParserElement` and :class:`ParseResults` to\nsee the base classe""s that most other pyparsing\nclasses inherit from. Use the docstrings for examples of how to:\n\n - construct literal match expressions from :class:`Literal` and\n   :class:`CaselessLiteral` classes\n - construct character word-group expressions using the :class:`Word`\n   class\n - see how to create repetitive expressions using :class:`ZeroOrMore`\n   and :class:`OneOrMore` classes\n - use :class:`'+'<And>`, :class:`'|'<MatchFirst>`, :class:`'^'<Or>`,\n   and :class:`'&'<Each>` operators to combine simple expressions into\n   more complex ones\n - associate names with your parsed results using\n   :class:`ParserElement.set_results_name`\n - access the parsed data, which is returned as a :class:`ParseResults`\n   object\n - find some helpful expression short-cuts like :class:`DelimitedList`\n   and :class:`one_of`\n - find more useful common expressions in the :class:`pyparsing_common`\n   namespace class\n";
static const char __pyx_k_version_info___repr___locals_gen[] = "version_info.__repr__.<locals>.genexpr";
static PyObject *__pyx_kp_u_25_Aug_2024_14_40_UTC;
static PyObject *__pyx_n_s_ABC;
static PyObject *__pyx_n_s_And;
static PyObject *__pyx_n_u_And;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_s_AtLineStart;
static PyObject *__pyx_n_u_AtLineStart;
static PyObject *__pyx_n_s_AtStringStart;
static PyObject *__pyx_n_u_AtStringStart;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_Callable;
static PyObject *__pyx_n_s_CaselessKeyword;
static PyObject *__pyx_n_u_CaselessKeyword;
static PyObject *__pyx_n_s_CaselessLiteral;
static PyObject *__pyx_n_u_CaselessLiteral;
static PyObject *__pyx_n_s_Char;
static PyObject *__pyx_n_u_Char;
static PyObject *__pyx_n_s_CharsNotIn;
static PyObject *__pyx_n_u_CharsNotIn;
static PyObject *__pyx_n_s_CloseMatch;
static PyObject *__pyx_n_u_CloseMatch;
static PyObject *__pyx_n_s_Combine;
static PyObject *__pyx_n_u_Combine;
static PyObject *__pyx_n_s_DebugExceptionAction;
static PyObject *__pyx_n_s_DebugStartAction;
static PyObject *__pyx_n_s_DebugSuccessAction;
static PyObject *__pyx_n_s_DelimitedList;
static PyObject *__pyx_n_u_DelimitedList;
static PyObject *__pyx_n_s_Diagnostics;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_n_u_Dict;
static PyObject *__pyx_n_s_Each;
static PyObject *__pyx_n_u_Each;
static PyObject *__pyx_n_s_Empty;
static PyObject *__pyx_n_u_Empty;
static PyObject *__pyx_n_s_Enum;
static PyObject *__pyx_n_s_FifoCache;
static PyObject *__pyx_n_s_FollowedBy;
static PyObject *__pyx_n_u_FollowedBy;
static PyObject *__pyx_n_s_Forward;
static PyObject *__pyx_n_u_Forward;
static PyObject *__pyx_n_s_Generator;
static PyObject *__pyx_n_s_GoToColumn;
static PyObject *__pyx_n_u_GoToColumn;
static PyObject *__pyx_n_s_Group;
static PyObject *__pyx_n_u_Group;
static PyObject *__pyx_n_s_IndentedBlock;
static PyObject *__pyx_n_u_IndentedBlock;
static PyObject *__pyx_n_s_InfixNotationOperatorArgType;
static PyObject *__pyx_n_s_InfixNotationOperatorSpec;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_Keyword;
static PyObject *__pyx_n_u_Keyword;
static PyObject *__pyx_n_s_LRUMemo;
static PyObject *__pyx_n_s_LRUMemo_2;
static PyObject *__pyx_n_s_LineEnd;
static PyObject *__pyx_n_u_LineEnd;
static PyObject *__pyx_n_s_LineStart;
static PyObject *__pyx_n_u_LineStart;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_Literal;
static PyObject *__pyx_n_u_Literal;
static PyObject *__pyx_n_s_Located;
static PyObject *__pyx_n_u_Located;
static PyObject *__pyx_n_s_MAX_INT;
static PyObject *__pyx_n_s_Match;
static PyObject *__pyx_n_s_MatchFirst;
static PyObject *__pyx_n_u_MatchFirst;
static PyObject *__pyx_n_s_MultipleMatch;
static PyObject *__pyx_n_s_NamedTuple;
static PyObject *__pyx_n_s_NoMatch;
static PyObject *__pyx_n_u_NoMatch;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_NotAny;
static PyObject *__pyx_n_u_NotAny;
static PyObject *__pyx_n_s_NullToken;
static PyObject *__pyx_n_s_OneOrMore;
static PyObject *__pyx_n_u_OneOrMore;
static PyObject *__pyx_n_s_OnlyOnce;
static PyObject *__pyx_n_u_OnlyOnce;
static PyObject *__pyx_n_s_OpAssoc;
static PyObject *__pyx_n_u_OpAssoc;
static PyObject *__pyx_n_s_Opt;
static PyObject *__pyx_n_u_Opt;
static PyObject *__pyx_n_s_Optional;
static PyObject *__pyx_n_u_Optional;
static PyObject *__pyx_n_s_Or;
static PyObject *__pyx_n_u_Or;
static PyObject *__pyx_n_s_PY_3;
static PyObject *__pyx_n_s_ParseAction;
static PyObject *__pyx_n_s_ParseBaseException;
static PyObject *__pyx_n_u_ParseBaseException;
static PyObject *__pyx_n_s_ParseCondition;
static PyObject *__pyx_n_s_ParseElementEnhance;
static PyObject *__pyx_n_u_ParseElementEnhance;
static PyObject *__pyx_n_s_ParseException;
static PyObject *__pyx_n_u_ParseException;
static PyObject *__pyx_n_s_ParseExpression;
static PyObject *__pyx_n_u_ParseExpression;
static PyObject *__pyx_n_s_ParseFailAction;
static PyObject *__pyx_n_s_ParseFatalException;
static PyObject *__pyx_n_u_ParseFatalException;
static PyObject *__pyx_n_s_ParseImplReturnType;
static PyObject *__pyx_n_s_ParseResults;
static PyObject *__pyx_n_u_ParseResults;
static PyObject *__pyx_n_s_ParseResultsWithOffset;
static PyObject *__pyx_n_s_ParseSyntaxException;
static PyObject *__pyx_n_u_ParseSyntaxException;
static PyObject *__pyx_n_s_ParserElement;
static PyObject *__pyx_n_u_ParserElement;
static PyObject *__pyx_n_s_Path;
static PyObject *__pyx_kp_u_Paul_McGuire_ptmcg_gm_pyparsing;
static PyObject *__pyx_n_s_PendingSkip;
static PyObject *__pyx_n_s_PositionToken;
static PyObject *__pyx_n_u_PositionToken;
static PyObject *__pyx_n_s_PostParseReturnType;
static PyObject *__pyx_n_s_PrecededBy;
static PyObject *__pyx_n_u_PrecededBy;
static PyObject *__pyx_n_s_QuotedString;
static PyObject *__pyx_n_u_QuotedString;
static PyObject *__pyx_n_s_RLock;
static PyObject *__pyx_n_s_RePattern;
static PyObject *__pyx_n_s_RecursiveGrammarException;
static PyObject *__pyx_n_u_RecursiveGrammarException;
static PyObject *__pyx_n_s_Regex;
static PyObject *__pyx_n_u_Regex;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_Set;
static PyObject *__pyx_n_s_SingleCharLiteral;
static PyObject *__pyx_n_s_SkipTo;
static PyObject *__pyx_n_u_SkipTo;
static PyObject *__pyx_n_s_StringEnd;
static PyObject *__pyx_n_u_StringEnd;
static PyObject *__pyx_n_s_StringStart;
static PyObject *__pyx_n_u_StringStart;
static PyObject *__pyx_n_s_Suppress;
static PyObject *__pyx_n_u_Suppress;
static PyObject *__pyx_n_s_Tag;
static PyObject *__pyx_n_s_TextIO;
static PyObject *__pyx_n_s_Token;
static PyObject *__pyx_n_u_Token;
static PyObject *__pyx_n_s_TokenConverter;
static PyObject *__pyx_n_u_TokenConverter;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_TypeVar;
static PyObject *__pyx_n_s_UnboundedCache;
static PyObject *__pyx_n_s_UnboundedMemo;
static PyObject *__pyx_n_s_UnboundedMemo_2;
static PyObject *__pyx_n_s_UnicodeRangeList;
static PyObject *__pyx_n_s_Union;
static PyObject *__pyx_n_s_White;
static PyObject *__pyx_n_u_White;
static PyObject *__pyx_n_s_Word;
static PyObject *__pyx_n_u_Word;
static PyObject *__pyx_n_s_WordEnd;
static PyObject *__pyx_n_u_WordEnd;
static PyObject *__pyx_n_s_WordStart;
static PyObject *__pyx_n_u_WordStart;
static PyObject *__pyx_n_s_ZeroOrMore;
static PyObject *__pyx_n_u_ZeroOrMore;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_n_s__15;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_abstractmethod;
static PyObject *__pyx_n_s_actions;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alphanums;
static PyObject *__pyx_n_u_alphanums;
static PyObject *__pyx_n_s_alphas;
static PyObject *__pyx_n_u_alphas;
static PyObject *__pyx_n_s_alphas8bit;
static PyObject *__pyx_n_u_alphas8bit;
static PyObject *__pyx_n_s_anyCloseTag;
static PyObject *__pyx_n_u_anyCloseTag;
static PyObject *__pyx_n_s_anyOpenTag;
static PyObject *__pyx_n_u_anyOpenTag;
static PyObject *__pyx_n_s_any_close_tag;
static PyObject *__pyx_n_u_any_close_tag;
static PyObject *__pyx_n_s_any_open_tag;
static PyObject *__pyx_n_u_any_open_tag;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_u_author;
static PyObject *__pyx_n_u_autoname_elements;
static PyObject *__pyx_n_s_bslash;
static PyObject *__pyx_n_s_builtin_exprs;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_cStyleComment;
static PyObject *__pyx_n_u_cStyleComment;
static PyObject *__pyx_n_s_c_style_comment;
static PyObject *__pyx_n_u_c_style_comment;
static PyObject *__pyx_n_s_cached_property;
static PyObject *__pyx_n_s_cast;
static PyObject *__pyx_n_s_charRange;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_u_col;
static PyObject *__pyx_n_s_collapse_string_to_ranges;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_common;
static PyObject *__pyx_n_u_common;
static PyObject *__pyx_n_s_commonHTMLEntity;
static PyObject *__pyx_n_u_commonHTMLEntity;
static PyObject *__pyx_n_s_common_builtin_exprs;
static PyObject *__pyx_n_s_common_html_entity;
static PyObject *__pyx_n_u_common_html_entity;
static PyObject *__pyx_n_s_compat;
static PyObject *__pyx_n_u_compat;
static PyObject *__pyx_n_s_conditionAsParseAction;
static PyObject *__pyx_n_u_conditionAsParseAction;
static PyObject *__pyx_n_s_condition_as_parse_action;
static PyObject *__pyx_n_u_condition_as_parse_action;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_n_s_core_builtin_exprs;
static PyObject *__pyx_n_s_countedArray;
static PyObject *__pyx_n_u_countedArray;
static PyObject *__pyx_n_s_counted_array;
static PyObject *__pyx_n_u_counted_array;
static PyObject *__pyx_n_s_cppStyleComment;
static PyObject *__pyx_n_u_cppStyleComment;
static PyObject *__pyx_n_s_cpp_style_comment;
static PyObject *__pyx_n_u_cpp_style_comment;
static PyObject *__pyx_n_s_dblQuotedString;
static PyObject *__pyx_n_u_dblQuotedString;
static PyObject *__pyx_n_s_dblSlashComment;
static PyObject *__pyx_n_u_dblSlashComment;
static PyObject *__pyx_n_s_dbl_quoted_string;
static PyObject *__pyx_n_u_dbl_quoted_string;
static PyObject *__pyx_n_s_dbl_slash_comment;
static PyObject *__pyx_n_u_dbl_slash_comment;
static PyObject *__pyx_n_s_default_exception_debug_action;
static PyObject *__pyx_n_s_default_start_debug_action;
static PyObject *__pyx_n_s_default_success_debug_action;
static PyObject *__pyx_n_s_delimitedList;
static PyObject *__pyx_n_u_delimitedList;
static PyObject *__pyx_n_s_delimited_list;
static PyObject *__pyx_n_u_delimited_list;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_diag;
static PyObject *__pyx_n_u_diag;
static PyObject *__pyx_n_s_dictOf;
static PyObject *__pyx_n_u_dictOf;
static PyObject *__pyx_n_s_dict_of;
static PyObject *__pyx_n_u_dict_of;
static PyObject *__pyx_n_s_disable_diag;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_u_empty;
static PyObject *__pyx_n_s_enable_all_warnings;
static PyObject *__pyx_n_s_enable_diag;
static PyObject *__pyx_n_s_escape_regex_range_chars;
static PyObject *__pyx_n_s_escapedHexChar;
static PyObject *__pyx_n_s_escapedOctChar;
static PyObject *__pyx_n_s_escapedPunc;
static PyObject *__pyx_n_s_exceptions;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_u_final;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_generatorType;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_helper_builtin_exprs;
static PyObject *__pyx_n_s_helpers;
static PyObject *__pyx_n_s_hexnums;
static PyObject *__pyx_n_u_hexnums;
static PyObject *__pyx_n_s_html;
static PyObject *__pyx_n_s_htmlComment;
static PyObject *__pyx_n_u_htmlComment;
static PyObject *__pyx_n_s_htmlEntityMap;
static PyObject *__pyx_n_s_html_comment;
static PyObject *__pyx_n_u_html_comment;
static PyObject *__pyx_n_s_identbodychars;
static PyObject *__pyx_n_u_identbodychars;
static PyObject *__pyx_n_s_identchars;
static PyObject *__pyx_n_u_identchars;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indentedBlock;
static PyObject *__pyx_n_u_indentedBlock;
static PyObject *__pyx_n_s_infixNotation;
static PyObject *__pyx_n_u_infixNotation;
static PyObject *__pyx_n_s_infix_notation;
static PyObject *__pyx_n_u_infix_notation;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_itemgetter;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_javaStyleComment;
static PyObject *__pyx_n_u_javaStyleComment;
static PyObject *__pyx_n_s_java_style_comment;
static PyObject *__pyx_n_u_java_style_comment;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_u_line;
static PyObject *__pyx_n_s_lineEnd;
static PyObject *__pyx_n_u_lineEnd;
static PyObject *__pyx_n_s_lineStart;
static PyObject *__pyx_n_u_lineStart;
static PyObject *__pyx_n_s_line_end;
static PyObject *__pyx_n_u_line_end;
static PyObject *__pyx_n_s_line_start;
static PyObject *__pyx_n_u_line_start;
static PyObject *__pyx_n_s_lineno;
static PyObject *__pyx_n_u_lineno;
static PyObject *__pyx_n_s_locatedExpr;
static PyObject *__pyx_n_u_locatedExpr;
static PyObject *__pyx_n_s_lru_cache;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_major;
static PyObject *__pyx_n_s_makeHTMLTags;
static PyObject *__pyx_n_u_makeHTMLTags;
static PyObject *__pyx_n_s_makeTags;
static PyObject *__pyx_n_s_makeXMLTags;
static PyObject *__pyx_n_u_makeXMLTags;
static PyObject *__pyx_n_s_make_html_tags;
static PyObject *__pyx_n_u_make_html_tags;
static PyObject *__pyx_n_s_make_xml_tags;
static PyObject *__pyx_n_u_make_xml_tags;
static PyObject *__pyx_n_s_matchOnlyAtCol;
static PyObject *__pyx_n_u_matchOnlyAtCol;
static PyObject *__pyx_n_s_matchPreviousExpr;
static PyObject *__pyx_n_u_matchPreviousExpr;
static PyObject *__pyx_n_s_matchPreviousLiteral;
static PyObject *__pyx_n_u_matchPreviousLiteral;
static PyObject *__pyx_n_s_match_only_at_col;
static PyObject *__pyx_n_u_match_only_at_col;
static PyObject *__pyx_n_s_match_previous_expr;
static PyObject *__pyx_n_u_match_previous_expr;
static PyObject *__pyx_n_s_match_previous_literal;
static PyObject *__pyx_n_u_match_previous_literal;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_micro;
static PyObject *__pyx_n_s_minor;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nestedExpr;
static PyObject *__pyx_n_u_nestedExpr;
static PyObject *__pyx_n_s_nested_expr;
static PyObject *__pyx_n_u_nested_expr;
static PyObject *__pyx_n_s_nullDebugAction;
static PyObject *__pyx_n_u_nullDebugAction;
static PyObject *__pyx_n_s_null_debug_action;
static PyObject *__pyx_n_u_null_debug_action;
static PyObject *__pyx_n_s_nums;
static PyObject *__pyx_n_u_nums;
static PyObject *__pyx_n_s_oneOf;
static PyObject *__pyx_n_u_oneOf;
static PyObject *__pyx_n_s_one_of;
static PyObject *__pyx_n_u_one_of;
static PyObject *__pyx_n_s_opAssoc;
static PyObject *__pyx_n_u_opAssoc;
static PyObject *__pyx_n_s_originalTextFor;
static PyObject *__pyx_n_u_originalTextFor;
static PyObject *__pyx_n_s_original_text_for;
static PyObject *__pyx_n_u_original_text_for;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_ppu;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_printables;
static PyObject *__pyx_n_u_printables;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_punc8bit;
static PyObject *__pyx_n_u_punc8bit;
static PyObject *__pyx_n_s_py_str;
static PyObject *__pyx_n_u_pyparsing;
static PyObject *__pyx_n_s_pyparsing___init;
static PyObject *__pyx_kp_s_pyparsing___init___py;
static PyObject *__pyx_n_s_pyparsing_common;
static PyObject *__pyx_n_u_pyparsing_common;
static PyObject *__pyx_kp_u_pyparsing_module_Classes_and_me;
static PyObject *__pyx_n_s_pyparsing_test;
static PyObject *__pyx_n_u_pyparsing_test;
static PyObject *__pyx_n_s_pyparsing_unicode;
static PyObject *__pyx_n_u_pyparsing_unicode;
static PyObject *__pyx_n_s_pythonStyleComment;
static PyObject *__pyx_n_u_pythonStyleComment;
static PyObject *__pyx_n_s_python_quoted_string;
static PyObject *__pyx_n_s_python_style_comment;
static PyObject *__pyx_n_u_python_style_comment;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_quotedString;
static PyObject *__pyx_n_u_quotedString;
static PyObject *__pyx_n_s_quoted_string;
static PyObject *__pyx_n_u_quoted_string;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_kp_u_r_2;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_reBracketExpr;
static PyObject *__pyx_n_s_releaselevel;
static PyObject *__pyx_n_s_removeQuotes;
static PyObject *__pyx_n_u_removeQuotes;
static PyObject *__pyx_n_s_remove_quotes;
static PyObject *__pyx_n_u_remove_quotes;
static PyObject *__pyx_n_s_replaceHTMLEntity;
static PyObject *__pyx_n_u_replaceHTMLEntity;
static PyObject *__pyx_n_s_replaceWith;
static PyObject *__pyx_n_u_replaceWith;
static PyObject *__pyx_n_s_replace_html_entity;
static PyObject *__pyx_n_u_replace_html_entity;
static PyObject *__pyx_n_s_replace_with;
static PyObject *__pyx_n_u_replace_with;
static PyObject *__pyx_n_s_replaced_by_pep8;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_restOfLine;
static PyObject *__pyx_n_u_restOfLine;
static PyObject *__pyx_n_s_rest_of_line;
static PyObject *__pyx_n_u_rest_of_line;
static PyObject *__pyx_n_s_results;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_serial;
static PyObject *__pyx_n_s_sglQuotedString;
static PyObject *__pyx_n_u_sglQuotedString;
static PyObject *__pyx_n_s_sgl_quoted_string;
static PyObject *__pyx_n_u_sgl_quoted_string;
static PyObject *__pyx_n_s_should_enable_warnings;
static PyObject *__pyx_n_s_singleChar;
static PyObject *__pyx_n_s_single_arg_builtins;
static PyObject *__pyx_n_s_srange;
static PyObject *__pyx_n_u_srange;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_str_type;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_stringEnd;
static PyObject *__pyx_n_u_stringEnd;
static PyObject *__pyx_n_s_stringStart;
static PyObject *__pyx_n_u_stringStart;
static PyObject *__pyx_n_s_string_end;
static PyObject *__pyx_n_u_string_end;
static PyObject *__pyx_n_s_string_start;
static PyObject *__pyx_n_u_string_start;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_system_version;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_testing;
static PyObject *__pyx_n_u_testing;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tokenMap;
static PyObject *__pyx_n_u_tokenMap;
static PyObject *__pyx_n_s_token_map;
static PyObject *__pyx_n_u_token_map;
static PyObject *__pyx_n_s_traceParseAction;
static PyObject *__pyx_n_u_traceParseAction;
static PyObject *__pyx_n_s_trace_parse_action;
static PyObject *__pyx_n_u_trace_parse_action;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_trim_arity;
static PyObject *__pyx_n_s_trim_arity_call_line;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_ungroup;
static PyObject *__pyx_n_u_ungroup;
static PyObject *__pyx_n_s_unicode;
static PyObject *__pyx_n_u_unicode;
static PyObject *__pyx_n_s_unicodeString;
static PyObject *__pyx_n_u_unicodeString;
static PyObject *__pyx_n_s_unicode_set;
static PyObject *__pyx_n_u_unicode_set;
static PyObject *__pyx_n_s_unicode_string;
static PyObject *__pyx_n_u_unicode_string;
static PyObject *__pyx_n_s_util;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_u_version;
static PyObject *__pyx_n_s_versionTime;
static PyObject *__pyx_n_u_versionTime;
static PyObject *__pyx_n_s_version_info;
static PyObject *__pyx_n_s_version_info_2;
static PyObject *__pyx_n_s_version_info___repr;
static PyObject *__pyx_n_s_version_info___repr___locals_gen;
static PyObject *__pyx_n_s_version_info___str;
static PyObject *__pyx_n_s_version_info___version;
static PyObject *__pyx_n_s_version_time;
static PyObject *__pyx_n_u_version_time;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_withAttribute;
static PyObject *__pyx_n_u_withAttribute;
static PyObject *__pyx_n_s_withClass;
static PyObject *__pyx_n_u_withClass;
static PyObject *__pyx_n_s_with_attribute;
static PyObject *__pyx_n_u_with_attribute;
static PyObject *__pyx_n_s_with_class;
static PyObject *__pyx_n_u_with_class;
static PyObject *__pyx_n_s_wraps;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_9pyparsing_8__init___12version_info___version__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_8__repr___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_4__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct____repr__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__7;
/* Late includes */

/* "pyparsing/__init__.py":107
 * 
 *     @property
 *     def __version__(self):             # <<<<<<<<<<<<<<
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_1__version__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9pyparsing_8__init___12version_info___version__[] = "version_info.__version__(self)";
static PyMethodDef __pyx_mdef_9pyparsing_8__init___12version_info_1__version__ = {"__version__", (PyCFunction)__pyx_pw_9pyparsing_8__init___12version_info_1__version__, METH_O, __pyx_doc_9pyparsing_8__init___12version_info___version__};
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_1__version__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__version__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pyparsing_8__init___12version_info___version__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyparsing_8__init___12version_info___version__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("__version__", 0);
  __Pyx_TraceCall("__version__", __pyx_f[0], 107, 0, __PYX_ERR(0, 107, __pyx_L1_error));

  /* "pyparsing/__init__.py":108
 *     @property
 *     def __version__(self):
 *         return (             # <<<<<<<<<<<<<<
 *             f"{self.major}.{self.minor}.{self.micro}"
 *             + (
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyparsing/__init__.py":109
 *     def __version__(self):
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"             # <<<<<<<<<<<<<<
 *             + (
 *                 f"{'r' if self.releaselevel[0] == 'c' else ''}{self.releaselevel[0]}{self.serial}",
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_major); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_minor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_micro); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":111
 *             f"{self.major}.{self.minor}.{self.micro}"
 *             + (
 *                 f"{'r' if self.releaselevel[0] == 'c' else ''}{self.releaselevel[0]}{self.serial}",             # <<<<<<<<<<<<<<
 *                 "",
 *             )[self.releaselevel == "final"]
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_releaselevel); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_n_u_r);
    __pyx_t_4 = __pyx_n_u_r;
  } else {
    __Pyx_INCREF(__pyx_kp_u__3);
    __pyx_t_4 = __pyx_kp_u__3;
  }
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_releaselevel); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_serial); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_kp_u__3);
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__3);
  __pyx_t_4 = 0;

  /* "pyparsing/__init__.py":113
 *                 f"{'r' if self.releaselevel[0] == 'c' else ''}{self.releaselevel[0]}{self.serial}",
 *                 "",
 *             )[self.releaselevel == "final"]             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_releaselevel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_n_u_final, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pyparsing/__init__.py":110
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"
 *             + (             # <<<<<<<<<<<<<<
 *                 f"{'r' if self.releaselevel[0] == 'c' else ''}{self.releaselevel[0]}{self.serial}",
 *                 "",
 */
  __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pyparsing/__init__.py":107
 * 
 *     @property
 *     def __version__(self):             # <<<<<<<<<<<<<<
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyparsing.__init__.version_info.__version__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyparsing/__init__.py":116
 *         )
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9pyparsing_8__init___12version_info_2__str__[] = "version_info.__str__(self)";
static PyMethodDef __pyx_mdef_9pyparsing_8__init___12version_info_3__str__ = {"__str__", (PyCFunction)__pyx_pw_9pyparsing_8__init___12version_info_3__str__, METH_O, __pyx_doc_9pyparsing_8__init___12version_info_2__str__};
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pyparsing_8__init___12version_info_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[0], 116, 0, __PYX_ERR(0, 116, __pyx_L1_error));

  /* "pyparsing/__init__.py":117
 * 
 *     def __str__(self):
 *         return f"{__name__} {self.__version__} / {__version_time__}"             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__5);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_version); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__6);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u__6);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_version_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pyparsing/__init__.py":116
 *         )
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyparsing.__init__.version_info.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_5__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9pyparsing_8__init___12version_info_4__repr__[] = "version_info.__repr__(self)";
static PyMethodDef __pyx_mdef_9pyparsing_8__init___12version_info_5__repr__ = {"__repr__", (PyCFunction)__pyx_pw_9pyparsing_8__init___12version_info_5__repr__, METH_O, __pyx_doc_9pyparsing_8__init___12version_info_4__repr__};
static PyObject *__pyx_pw_9pyparsing_8__init___12version_info_5__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pyparsing_8__init___12version_info_4__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9pyparsing_8__init___12version_info_8__repr___2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyparsing/__init__.py":120
 * 
 *     def __repr__(self):
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_8__repr___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct_1_genexpr(__pyx_ptype_9pyparsing_8__init_____pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 120, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9pyparsing_8__init___12version_info_8__repr___2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_version_info___repr___locals_gen, __pyx_n_s_pyparsing___init); if (unlikely(!gen)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyparsing.__init__.version_info.__repr__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9pyparsing_8__init___12version_info_8__repr___2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 120, 0, __PYX_ERR(0, 120, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 120, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 120, __pyx_L1_error) }
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 120, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_nv);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_nv, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_r_2, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PySequence_Tuple(__pyx_cur_scope->__pyx_v_nv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */

static PyObject *__pyx_pf_9pyparsing_8__init___12version_info_4__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *__pyx_cur_scope;
  PyObject *__pyx_gb_9pyparsing_8__init___12version_info_8__repr___2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("__repr__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct____repr__(__pyx_ptype_9pyparsing_8__init_____pyx_scope_struct____repr__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 119, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("__repr__", __pyx_f[0], 119, 0, __PYX_ERR(0, 119, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "pyparsing/__init__.py":120
 * 
 *     def __repr__(self):
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_cur_scope->__pyx_v_self)), __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__8);
  __pyx_t_4 = __pyx_pf_9pyparsing_8__init___12version_info_8__repr___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__9, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__10);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__10);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_kp_u__10);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyparsing.__init__.version_info.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_9pyparsing_8__init___12version_info_8__repr___2generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *__pyx_freelist_9pyparsing_8__init_____pyx_scope_struct____repr__[8];
static int __pyx_freecount_9pyparsing_8__init_____pyx_scope_struct____repr__ = 0;

static PyObject *__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct____repr__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct____repr__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__)))) {
    o = (PyObject*)__pyx_freelist_9pyparsing_8__init_____pyx_scope_struct____repr__[--__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct____repr__];
    memset(o, 0, sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9pyparsing_8__init_____pyx_scope_struct____repr__(PyObject *o) {
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *p = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct____repr__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__)))) {
    __pyx_freelist_9pyparsing_8__init_____pyx_scope_struct____repr__[__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct____repr__++] = ((struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9pyparsing_8__init_____pyx_scope_struct____repr__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *p = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9pyparsing_8__init_____pyx_scope_struct____repr__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *p = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyparsing.__init__.__pyx_scope_struct____repr__", /*tp_name*/
  sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct____repr__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyparsing_8__init_____pyx_scope_struct____repr__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9pyparsing_8__init_____pyx_scope_struct____repr__, /*tp_traverse*/
  __pyx_tp_clear_9pyparsing_8__init_____pyx_scope_struct____repr__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct____repr__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *__pyx_freelist_9pyparsing_8__init_____pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_9pyparsing_8__init_____pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9pyparsing_8__init_____pyx_scope_struct_1_genexpr[--__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9pyparsing_8__init_____pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_nv);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_9pyparsing_8__init_____pyx_scope_struct_1_genexpr[__pyx_freecount_9pyparsing_8__init_____pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9pyparsing_8__init_____pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_nv) {
    e = (*v)(p->__pyx_v_nv, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyparsing.__init__.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9pyparsing_8__init_____pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyparsing_8__init_____pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9pyparsing_8__init_____pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyparsing_8__init_____pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "__pyx_scope_struct_1_genexpr",
    "__pyx_scope_struct____repr__",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pyparsing(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pyparsing},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pyparsing",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_25_Aug_2024_14_40_UTC, __pyx_k_25_Aug_2024_14_40_UTC, sizeof(__pyx_k_25_Aug_2024_14_40_UTC), 0, 1, 0, 0},
  {&__pyx_n_s_ABC, __pyx_k_ABC, sizeof(__pyx_k_ABC), 0, 0, 1, 1},
  {&__pyx_n_s_And, __pyx_k_And, sizeof(__pyx_k_And), 0, 0, 1, 1},
  {&__pyx_n_u_And, __pyx_k_And, sizeof(__pyx_k_And), 0, 1, 0, 1},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_s_AtLineStart, __pyx_k_AtLineStart, sizeof(__pyx_k_AtLineStart), 0, 0, 1, 1},
  {&__pyx_n_u_AtLineStart, __pyx_k_AtLineStart, sizeof(__pyx_k_AtLineStart), 0, 1, 0, 1},
  {&__pyx_n_s_AtStringStart, __pyx_k_AtStringStart, sizeof(__pyx_k_AtStringStart), 0, 0, 1, 1},
  {&__pyx_n_u_AtStringStart, __pyx_k_AtStringStart, sizeof(__pyx_k_AtStringStart), 0, 1, 0, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_Callable, __pyx_k_Callable, sizeof(__pyx_k_Callable), 0, 0, 1, 1},
  {&__pyx_n_s_CaselessKeyword, __pyx_k_CaselessKeyword, sizeof(__pyx_k_CaselessKeyword), 0, 0, 1, 1},
  {&__pyx_n_u_CaselessKeyword, __pyx_k_CaselessKeyword, sizeof(__pyx_k_CaselessKeyword), 0, 1, 0, 1},
  {&__pyx_n_s_CaselessLiteral, __pyx_k_CaselessLiteral, sizeof(__pyx_k_CaselessLiteral), 0, 0, 1, 1},
  {&__pyx_n_u_CaselessLiteral, __pyx_k_CaselessLiteral, sizeof(__pyx_k_CaselessLiteral), 0, 1, 0, 1},
  {&__pyx_n_s_Char, __pyx_k_Char, sizeof(__pyx_k_Char), 0, 0, 1, 1},
  {&__pyx_n_u_Char, __pyx_k_Char, sizeof(__pyx_k_Char), 0, 1, 0, 1},
  {&__pyx_n_s_CharsNotIn, __pyx_k_CharsNotIn, sizeof(__pyx_k_CharsNotIn), 0, 0, 1, 1},
  {&__pyx_n_u_CharsNotIn, __pyx_k_CharsNotIn, sizeof(__pyx_k_CharsNotIn), 0, 1, 0, 1},
  {&__pyx_n_s_CloseMatch, __pyx_k_CloseMatch, sizeof(__pyx_k_CloseMatch), 0, 0, 1, 1},
  {&__pyx_n_u_CloseMatch, __pyx_k_CloseMatch, sizeof(__pyx_k_CloseMatch), 0, 1, 0, 1},
  {&__pyx_n_s_Combine, __pyx_k_Combine, sizeof(__pyx_k_Combine), 0, 0, 1, 1},
  {&__pyx_n_u_Combine, __pyx_k_Combine, sizeof(__pyx_k_Combine), 0, 1, 0, 1},
  {&__pyx_n_s_DebugExceptionAction, __pyx_k_DebugExceptionAction, sizeof(__pyx_k_DebugExceptionAction), 0, 0, 1, 1},
  {&__pyx_n_s_DebugStartAction, __pyx_k_DebugStartAction, sizeof(__pyx_k_DebugStartAction), 0, 0, 1, 1},
  {&__pyx_n_s_DebugSuccessAction, __pyx_k_DebugSuccessAction, sizeof(__pyx_k_DebugSuccessAction), 0, 0, 1, 1},
  {&__pyx_n_s_DelimitedList, __pyx_k_DelimitedList, sizeof(__pyx_k_DelimitedList), 0, 0, 1, 1},
  {&__pyx_n_u_DelimitedList, __pyx_k_DelimitedList, sizeof(__pyx_k_DelimitedList), 0, 1, 0, 1},
  {&__pyx_n_s_Diagnostics, __pyx_k_Diagnostics, sizeof(__pyx_k_Diagnostics), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_n_u_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 1, 0, 1},
  {&__pyx_n_s_Each, __pyx_k_Each, sizeof(__pyx_k_Each), 0, 0, 1, 1},
  {&__pyx_n_u_Each, __pyx_k_Each, sizeof(__pyx_k_Each), 0, 1, 0, 1},
  {&__pyx_n_s_Empty, __pyx_k_Empty, sizeof(__pyx_k_Empty), 0, 0, 1, 1},
  {&__pyx_n_u_Empty, __pyx_k_Empty, sizeof(__pyx_k_Empty), 0, 1, 0, 1},
  {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_FifoCache, __pyx_k_FifoCache, sizeof(__pyx_k_FifoCache), 0, 0, 1, 1},
  {&__pyx_n_s_FollowedBy, __pyx_k_FollowedBy, sizeof(__pyx_k_FollowedBy), 0, 0, 1, 1},
  {&__pyx_n_u_FollowedBy, __pyx_k_FollowedBy, sizeof(__pyx_k_FollowedBy), 0, 1, 0, 1},
  {&__pyx_n_s_Forward, __pyx_k_Forward, sizeof(__pyx_k_Forward), 0, 0, 1, 1},
  {&__pyx_n_u_Forward, __pyx_k_Forward, sizeof(__pyx_k_Forward), 0, 1, 0, 1},
  {&__pyx_n_s_Generator, __pyx_k_Generator, sizeof(__pyx_k_Generator), 0, 0, 1, 1},
  {&__pyx_n_s_GoToColumn, __pyx_k_GoToColumn, sizeof(__pyx_k_GoToColumn), 0, 0, 1, 1},
  {&__pyx_n_u_GoToColumn, __pyx_k_GoToColumn, sizeof(__pyx_k_GoToColumn), 0, 1, 0, 1},
  {&__pyx_n_s_Group, __pyx_k_Group, sizeof(__pyx_k_Group), 0, 0, 1, 1},
  {&__pyx_n_u_Group, __pyx_k_Group, sizeof(__pyx_k_Group), 0, 1, 0, 1},
  {&__pyx_n_s_IndentedBlock, __pyx_k_IndentedBlock, sizeof(__pyx_k_IndentedBlock), 0, 0, 1, 1},
  {&__pyx_n_u_IndentedBlock, __pyx_k_IndentedBlock, sizeof(__pyx_k_IndentedBlock), 0, 1, 0, 1},
  {&__pyx_n_s_InfixNotationOperatorArgType, __pyx_k_InfixNotationOperatorArgType, sizeof(__pyx_k_InfixNotationOperatorArgType), 0, 0, 1, 1},
  {&__pyx_n_s_InfixNotationOperatorSpec, __pyx_k_InfixNotationOperatorSpec, sizeof(__pyx_k_InfixNotationOperatorSpec), 0, 0, 1, 1},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_Keyword, __pyx_k_Keyword, sizeof(__pyx_k_Keyword), 0, 0, 1, 1},
  {&__pyx_n_u_Keyword, __pyx_k_Keyword, sizeof(__pyx_k_Keyword), 0, 1, 0, 1},
  {&__pyx_n_s_LRUMemo, __pyx_k_LRUMemo, sizeof(__pyx_k_LRUMemo), 0, 0, 1, 1},
  {&__pyx_n_s_LRUMemo_2, __pyx_k_LRUMemo_2, sizeof(__pyx_k_LRUMemo_2), 0, 0, 1, 1},
  {&__pyx_n_s_LineEnd, __pyx_k_LineEnd, sizeof(__pyx_k_LineEnd), 0, 0, 1, 1},
  {&__pyx_n_u_LineEnd, __pyx_k_LineEnd, sizeof(__pyx_k_LineEnd), 0, 1, 0, 1},
  {&__pyx_n_s_LineStart, __pyx_k_LineStart, sizeof(__pyx_k_LineStart), 0, 0, 1, 1},
  {&__pyx_n_u_LineStart, __pyx_k_LineStart, sizeof(__pyx_k_LineStart), 0, 1, 0, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_Literal, __pyx_k_Literal, sizeof(__pyx_k_Literal), 0, 0, 1, 1},
  {&__pyx_n_u_Literal, __pyx_k_Literal, sizeof(__pyx_k_Literal), 0, 1, 0, 1},
  {&__pyx_n_s_Located, __pyx_k_Located, sizeof(__pyx_k_Located), 0, 0, 1, 1},
  {&__pyx_n_u_Located, __pyx_k_Located, sizeof(__pyx_k_Located), 0, 1, 0, 1},
  {&__pyx_n_s_MAX_INT, __pyx_k_MAX_INT, sizeof(__pyx_k_MAX_INT), 0, 0, 1, 1},
  {&__pyx_n_s_Match, __pyx_k_Match, sizeof(__pyx_k_Match), 0, 0, 1, 1},
  {&__pyx_n_s_MatchFirst, __pyx_k_MatchFirst, sizeof(__pyx_k_MatchFirst), 0, 0, 1, 1},
  {&__pyx_n_u_MatchFirst, __pyx_k_MatchFirst, sizeof(__pyx_k_MatchFirst), 0, 1, 0, 1},
  {&__pyx_n_s_MultipleMatch, __pyx_k_MultipleMatch, sizeof(__pyx_k_MultipleMatch), 0, 0, 1, 1},
  {&__pyx_n_s_NamedTuple, __pyx_k_NamedTuple, sizeof(__pyx_k_NamedTuple), 0, 0, 1, 1},
  {&__pyx_n_s_NoMatch, __pyx_k_NoMatch, sizeof(__pyx_k_NoMatch), 0, 0, 1, 1},
  {&__pyx_n_u_NoMatch, __pyx_k_NoMatch, sizeof(__pyx_k_NoMatch), 0, 1, 0, 1},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_NotAny, __pyx_k_NotAny, sizeof(__pyx_k_NotAny), 0, 0, 1, 1},
  {&__pyx_n_u_NotAny, __pyx_k_NotAny, sizeof(__pyx_k_NotAny), 0, 1, 0, 1},
  {&__pyx_n_s_NullToken, __pyx_k_NullToken, sizeof(__pyx_k_NullToken), 0, 0, 1, 1},
  {&__pyx_n_s_OneOrMore, __pyx_k_OneOrMore, sizeof(__pyx_k_OneOrMore), 0, 0, 1, 1},
  {&__pyx_n_u_OneOrMore, __pyx_k_OneOrMore, sizeof(__pyx_k_OneOrMore), 0, 1, 0, 1},
  {&__pyx_n_s_OnlyOnce, __pyx_k_OnlyOnce, sizeof(__pyx_k_OnlyOnce), 0, 0, 1, 1},
  {&__pyx_n_u_OnlyOnce, __pyx_k_OnlyOnce, sizeof(__pyx_k_OnlyOnce), 0, 1, 0, 1},
  {&__pyx_n_s_OpAssoc, __pyx_k_OpAssoc, sizeof(__pyx_k_OpAssoc), 0, 0, 1, 1},
  {&__pyx_n_u_OpAssoc, __pyx_k_OpAssoc, sizeof(__pyx_k_OpAssoc), 0, 1, 0, 1},
  {&__pyx_n_s_Opt, __pyx_k_Opt, sizeof(__pyx_k_Opt), 0, 0, 1, 1},
  {&__pyx_n_u_Opt, __pyx_k_Opt, sizeof(__pyx_k_Opt), 0, 1, 0, 1},
  {&__pyx_n_s_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {&__pyx_n_u_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 1, 0, 1},
  {&__pyx_n_s_Or, __pyx_k_Or, sizeof(__pyx_k_Or), 0, 0, 1, 1},
  {&__pyx_n_u_Or, __pyx_k_Or, sizeof(__pyx_k_Or), 0, 1, 0, 1},
  {&__pyx_n_s_PY_3, __pyx_k_PY_3, sizeof(__pyx_k_PY_3), 0, 0, 1, 1},
  {&__pyx_n_s_ParseAction, __pyx_k_ParseAction, sizeof(__pyx_k_ParseAction), 0, 0, 1, 1},
  {&__pyx_n_s_ParseBaseException, __pyx_k_ParseBaseException, sizeof(__pyx_k_ParseBaseException), 0, 0, 1, 1},
  {&__pyx_n_u_ParseBaseException, __pyx_k_ParseBaseException, sizeof(__pyx_k_ParseBaseException), 0, 1, 0, 1},
  {&__pyx_n_s_ParseCondition, __pyx_k_ParseCondition, sizeof(__pyx_k_ParseCondition), 0, 0, 1, 1},
  {&__pyx_n_s_ParseElementEnhance, __pyx_k_ParseElementEnhance, sizeof(__pyx_k_ParseElementEnhance), 0, 0, 1, 1},
  {&__pyx_n_u_ParseElementEnhance, __pyx_k_ParseElementEnhance, sizeof(__pyx_k_ParseElementEnhance), 0, 1, 0, 1},
  {&__pyx_n_s_ParseException, __pyx_k_ParseException, sizeof(__pyx_k_ParseException), 0, 0, 1, 1},
  {&__pyx_n_u_ParseException, __pyx_k_ParseException, sizeof(__pyx_k_ParseException), 0, 1, 0, 1},
  {&__pyx_n_s_ParseExpression, __pyx_k_ParseExpression, sizeof(__pyx_k_ParseExpression), 0, 0, 1, 1},
  {&__pyx_n_u_ParseExpression, __pyx_k_ParseExpression, sizeof(__pyx_k_ParseExpression), 0, 1, 0, 1},
  {&__pyx_n_s_ParseFailAction, __pyx_k_ParseFailAction, sizeof(__pyx_k_ParseFailAction), 0, 0, 1, 1},
  {&__pyx_n_s_ParseFatalException, __pyx_k_ParseFatalException, sizeof(__pyx_k_ParseFatalException), 0, 0, 1, 1},
  {&__pyx_n_u_ParseFatalException, __pyx_k_ParseFatalException, sizeof(__pyx_k_ParseFatalException), 0, 1, 0, 1},
  {&__pyx_n_s_ParseImplReturnType, __pyx_k_ParseImplReturnType, sizeof(__pyx_k_ParseImplReturnType), 0, 0, 1, 1},
  {&__pyx_n_s_ParseResults, __pyx_k_ParseResults, sizeof(__pyx_k_ParseResults), 0, 0, 1, 1},
  {&__pyx_n_u_ParseResults, __pyx_k_ParseResults, sizeof(__pyx_k_ParseResults), 0, 1, 0, 1},
  {&__pyx_n_s_ParseResultsWithOffset, __pyx_k_ParseResultsWithOffset, sizeof(__pyx_k_ParseResultsWithOffset), 0, 0, 1, 1},
  {&__pyx_n_s_ParseSyntaxException, __pyx_k_ParseSyntaxException, sizeof(__pyx_k_ParseSyntaxException), 0, 0, 1, 1},
  {&__pyx_n_u_ParseSyntaxException, __pyx_k_ParseSyntaxException, sizeof(__pyx_k_ParseSyntaxException), 0, 1, 0, 1},
  {&__pyx_n_s_ParserElement, __pyx_k_ParserElement, sizeof(__pyx_k_ParserElement), 0, 0, 1, 1},
  {&__pyx_n_u_ParserElement, __pyx_k_ParserElement, sizeof(__pyx_k_ParserElement), 0, 1, 0, 1},
  {&__pyx_n_s_Path, __pyx_k_Path, sizeof(__pyx_k_Path), 0, 0, 1, 1},
  {&__pyx_kp_u_Paul_McGuire_ptmcg_gm_pyparsing, __pyx_k_Paul_McGuire_ptmcg_gm_pyparsing, sizeof(__pyx_k_Paul_McGuire_ptmcg_gm_pyparsing), 0, 1, 0, 0},
  {&__pyx_n_s_PendingSkip, __pyx_k_PendingSkip, sizeof(__pyx_k_PendingSkip), 0, 0, 1, 1},
  {&__pyx_n_s_PositionToken, __pyx_k_PositionToken, sizeof(__pyx_k_PositionToken), 0, 0, 1, 1},
  {&__pyx_n_u_PositionToken, __pyx_k_PositionToken, sizeof(__pyx_k_PositionToken), 0, 1, 0, 1},
  {&__pyx_n_s_PostParseReturnType, __pyx_k_PostParseReturnType, sizeof(__pyx_k_PostParseReturnType), 0, 0, 1, 1},
  {&__pyx_n_s_PrecededBy, __pyx_k_PrecededBy, sizeof(__pyx_k_PrecededBy), 0, 0, 1, 1},
  {&__pyx_n_u_PrecededBy, __pyx_k_PrecededBy, sizeof(__pyx_k_PrecededBy), 0, 1, 0, 1},
  {&__pyx_n_s_QuotedString, __pyx_k_QuotedString, sizeof(__pyx_k_QuotedString), 0, 0, 1, 1},
  {&__pyx_n_u_QuotedString, __pyx_k_QuotedString, sizeof(__pyx_k_QuotedString), 0, 1, 0, 1},
  {&__pyx_n_s_RLock, __pyx_k_RLock, sizeof(__pyx_k_RLock), 0, 0, 1, 1},
  {&__pyx_n_s_RePattern, __pyx_k_RePattern, sizeof(__pyx_k_RePattern), 0, 0, 1, 1},
  {&__pyx_n_s_RecursiveGrammarException, __pyx_k_RecursiveGrammarException, sizeof(__pyx_k_RecursiveGrammarException), 0, 0, 1, 1},
  {&__pyx_n_u_RecursiveGrammarException, __pyx_k_RecursiveGrammarException, sizeof(__pyx_k_RecursiveGrammarException), 0, 1, 0, 1},
  {&__pyx_n_s_Regex, __pyx_k_Regex, sizeof(__pyx_k_Regex), 0, 0, 1, 1},
  {&__pyx_n_u_Regex, __pyx_k_Regex, sizeof(__pyx_k_Regex), 0, 1, 0, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_Set, __pyx_k_Set, sizeof(__pyx_k_Set), 0, 0, 1, 1},
  {&__pyx_n_s_SingleCharLiteral, __pyx_k_SingleCharLiteral, sizeof(__pyx_k_SingleCharLiteral), 0, 0, 1, 1},
  {&__pyx_n_s_SkipTo, __pyx_k_SkipTo, sizeof(__pyx_k_SkipTo), 0, 0, 1, 1},
  {&__pyx_n_u_SkipTo, __pyx_k_SkipTo, sizeof(__pyx_k_SkipTo), 0, 1, 0, 1},
  {&__pyx_n_s_StringEnd, __pyx_k_StringEnd, sizeof(__pyx_k_StringEnd), 0, 0, 1, 1},
  {&__pyx_n_u_StringEnd, __pyx_k_StringEnd, sizeof(__pyx_k_StringEnd), 0, 1, 0, 1},
  {&__pyx_n_s_StringStart, __pyx_k_StringStart, sizeof(__pyx_k_StringStart), 0, 0, 1, 1},
  {&__pyx_n_u_StringStart, __pyx_k_StringStart, sizeof(__pyx_k_StringStart), 0, 1, 0, 1},
  {&__pyx_n_s_Suppress, __pyx_k_Suppress, sizeof(__pyx_k_Suppress), 0, 0, 1, 1},
  {&__pyx_n_u_Suppress, __pyx_k_Suppress, sizeof(__pyx_k_Suppress), 0, 1, 0, 1},
  {&__pyx_n_s_Tag, __pyx_k_Tag, sizeof(__pyx_k_Tag), 0, 0, 1, 1},
  {&__pyx_n_s_TextIO, __pyx_k_TextIO, sizeof(__pyx_k_TextIO), 0, 0, 1, 1},
  {&__pyx_n_s_Token, __pyx_k_Token, sizeof(__pyx_k_Token), 0, 0, 1, 1},
  {&__pyx_n_u_Token, __pyx_k_Token, sizeof(__pyx_k_Token), 0, 1, 0, 1},
  {&__pyx_n_s_TokenConverter, __pyx_k_TokenConverter, sizeof(__pyx_k_TokenConverter), 0, 0, 1, 1},
  {&__pyx_n_u_TokenConverter, __pyx_k_TokenConverter, sizeof(__pyx_k_TokenConverter), 0, 1, 0, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_TypeVar, __pyx_k_TypeVar, sizeof(__pyx_k_TypeVar), 0, 0, 1, 1},
  {&__pyx_n_s_UnboundedCache, __pyx_k_UnboundedCache, sizeof(__pyx_k_UnboundedCache), 0, 0, 1, 1},
  {&__pyx_n_s_UnboundedMemo, __pyx_k_UnboundedMemo, sizeof(__pyx_k_UnboundedMemo), 0, 0, 1, 1},
  {&__pyx_n_s_UnboundedMemo_2, __pyx_k_UnboundedMemo_2, sizeof(__pyx_k_UnboundedMemo_2), 0, 0, 1, 1},
  {&__pyx_n_s_UnicodeRangeList, __pyx_k_UnicodeRangeList, sizeof(__pyx_k_UnicodeRangeList), 0, 0, 1, 1},
  {&__pyx_n_s_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 0, 1, 1},
  {&__pyx_n_s_White, __pyx_k_White, sizeof(__pyx_k_White), 0, 0, 1, 1},
  {&__pyx_n_u_White, __pyx_k_White, sizeof(__pyx_k_White), 0, 1, 0, 1},
  {&__pyx_n_s_Word, __pyx_k_Word, sizeof(__pyx_k_Word), 0, 0, 1, 1},
  {&__pyx_n_u_Word, __pyx_k_Word, sizeof(__pyx_k_Word), 0, 1, 0, 1},
  {&__pyx_n_s_WordEnd, __pyx_k_WordEnd, sizeof(__pyx_k_WordEnd), 0, 0, 1, 1},
  {&__pyx_n_u_WordEnd, __pyx_k_WordEnd, sizeof(__pyx_k_WordEnd), 0, 1, 0, 1},
  {&__pyx_n_s_WordStart, __pyx_k_WordStart, sizeof(__pyx_k_WordStart), 0, 0, 1, 1},
  {&__pyx_n_u_WordStart, __pyx_k_WordStart, sizeof(__pyx_k_WordStart), 0, 1, 0, 1},
  {&__pyx_n_s_ZeroOrMore, __pyx_k_ZeroOrMore, sizeof(__pyx_k_ZeroOrMore), 0, 0, 1, 1},
  {&__pyx_n_u_ZeroOrMore, __pyx_k_ZeroOrMore, sizeof(__pyx_k_ZeroOrMore), 0, 1, 0, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_n_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_abstractmethod, __pyx_k_abstractmethod, sizeof(__pyx_k_abstractmethod), 0, 0, 1, 1},
  {&__pyx_n_s_actions, __pyx_k_actions, sizeof(__pyx_k_actions), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alphanums, __pyx_k_alphanums, sizeof(__pyx_k_alphanums), 0, 0, 1, 1},
  {&__pyx_n_u_alphanums, __pyx_k_alphanums, sizeof(__pyx_k_alphanums), 0, 1, 0, 1},
  {&__pyx_n_s_alphas, __pyx_k_alphas, sizeof(__pyx_k_alphas), 0, 0, 1, 1},
  {&__pyx_n_u_alphas, __pyx_k_alphas, sizeof(__pyx_k_alphas), 0, 1, 0, 1},
  {&__pyx_n_s_alphas8bit, __pyx_k_alphas8bit, sizeof(__pyx_k_alphas8bit), 0, 0, 1, 1},
  {&__pyx_n_u_alphas8bit, __pyx_k_alphas8bit, sizeof(__pyx_k_alphas8bit), 0, 1, 0, 1},
  {&__pyx_n_s_anyCloseTag, __pyx_k_anyCloseTag, sizeof(__pyx_k_anyCloseTag), 0, 0, 1, 1},
  {&__pyx_n_u_anyCloseTag, __pyx_k_anyCloseTag, sizeof(__pyx_k_anyCloseTag), 0, 1, 0, 1},
  {&__pyx_n_s_anyOpenTag, __pyx_k_anyOpenTag, sizeof(__pyx_k_anyOpenTag), 0, 0, 1, 1},
  {&__pyx_n_u_anyOpenTag, __pyx_k_anyOpenTag, sizeof(__pyx_k_anyOpenTag), 0, 1, 0, 1},
  {&__pyx_n_s_any_close_tag, __pyx_k_any_close_tag, sizeof(__pyx_k_any_close_tag), 0, 0, 1, 1},
  {&__pyx_n_u_any_close_tag, __pyx_k_any_close_tag, sizeof(__pyx_k_any_close_tag), 0, 1, 0, 1},
  {&__pyx_n_s_any_open_tag, __pyx_k_any_open_tag, sizeof(__pyx_k_any_open_tag), 0, 0, 1, 1},
  {&__pyx_n_u_any_open_tag, __pyx_k_any_open_tag, sizeof(__pyx_k_any_open_tag), 0, 1, 0, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_u_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 1, 0, 1},
  {&__pyx_n_u_autoname_elements, __pyx_k_autoname_elements, sizeof(__pyx_k_autoname_elements), 0, 1, 0, 1},
  {&__pyx_n_s_bslash, __pyx_k_bslash, sizeof(__pyx_k_bslash), 0, 0, 1, 1},
  {&__pyx_n_s_builtin_exprs, __pyx_k_builtin_exprs, sizeof(__pyx_k_builtin_exprs), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_cStyleComment, __pyx_k_cStyleComment, sizeof(__pyx_k_cStyleComment), 0, 0, 1, 1},
  {&__pyx_n_u_cStyleComment, __pyx_k_cStyleComment, sizeof(__pyx_k_cStyleComment), 0, 1, 0, 1},
  {&__pyx_n_s_c_style_comment, __pyx_k_c_style_comment, sizeof(__pyx_k_c_style_comment), 0, 0, 1, 1},
  {&__pyx_n_u_c_style_comment, __pyx_k_c_style_comment, sizeof(__pyx_k_c_style_comment), 0, 1, 0, 1},
  {&__pyx_n_s_cached_property, __pyx_k_cached_property, sizeof(__pyx_k_cached_property), 0, 0, 1, 1},
  {&__pyx_n_s_cast, __pyx_k_cast, sizeof(__pyx_k_cast), 0, 0, 1, 1},
  {&__pyx_n_s_charRange, __pyx_k_charRange, sizeof(__pyx_k_charRange), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_u_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 1, 0, 1},
  {&__pyx_n_s_collapse_string_to_ranges, __pyx_k_collapse_string_to_ranges, sizeof(__pyx_k_collapse_string_to_ranges), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_common, __pyx_k_common, sizeof(__pyx_k_common), 0, 0, 1, 1},
  {&__pyx_n_u_common, __pyx_k_common, sizeof(__pyx_k_common), 0, 1, 0, 1},
  {&__pyx_n_s_commonHTMLEntity, __pyx_k_commonHTMLEntity, sizeof(__pyx_k_commonHTMLEntity), 0, 0, 1, 1},
  {&__pyx_n_u_commonHTMLEntity, __pyx_k_commonHTMLEntity, sizeof(__pyx_k_commonHTMLEntity), 0, 1, 0, 1},
  {&__pyx_n_s_common_builtin_exprs, __pyx_k_common_builtin_exprs, sizeof(__pyx_k_common_builtin_exprs), 0, 0, 1, 1},
  {&__pyx_n_s_common_html_entity, __pyx_k_common_html_entity, sizeof(__pyx_k_common_html_entity), 0, 0, 1, 1},
  {&__pyx_n_u_common_html_entity, __pyx_k_common_html_entity, sizeof(__pyx_k_common_html_entity), 0, 1, 0, 1},
  {&__pyx_n_s_compat, __pyx_k_compat, sizeof(__pyx_k_compat), 0, 0, 1, 1},
  {&__pyx_n_u_compat, __pyx_k_compat, sizeof(__pyx_k_compat), 0, 1, 0, 1},
  {&__pyx_n_s_conditionAsParseAction, __pyx_k_conditionAsParseAction, sizeof(__pyx_k_conditionAsParseAction), 0, 0, 1, 1},
  {&__pyx_n_u_conditionAsParseAction, __pyx_k_conditionAsParseAction, sizeof(__pyx_k_conditionAsParseAction), 0, 1, 0, 1},
  {&__pyx_n_s_condition_as_parse_action, __pyx_k_condition_as_parse_action, sizeof(__pyx_k_condition_as_parse_action), 0, 0, 1, 1},
  {&__pyx_n_u_condition_as_parse_action, __pyx_k_condition_as_parse_action, sizeof(__pyx_k_condition_as_parse_action), 0, 1, 0, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_core, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {&__pyx_n_s_core_builtin_exprs, __pyx_k_core_builtin_exprs, sizeof(__pyx_k_core_builtin_exprs), 0, 0, 1, 1},
  {&__pyx_n_s_countedArray, __pyx_k_countedArray, sizeof(__pyx_k_countedArray), 0, 0, 1, 1},
  {&__pyx_n_u_countedArray, __pyx_k_countedArray, sizeof(__pyx_k_countedArray), 0, 1, 0, 1},
  {&__pyx_n_s_counted_array, __pyx_k_counted_array, sizeof(__pyx_k_counted_array), 0, 0, 1, 1},
  {&__pyx_n_u_counted_array, __pyx_k_counted_array, sizeof(__pyx_k_counted_array), 0, 1, 0, 1},
  {&__pyx_n_s_cppStyleComment, __pyx_k_cppStyleComment, sizeof(__pyx_k_cppStyleComment), 0, 0, 1, 1},
  {&__pyx_n_u_cppStyleComment, __pyx_k_cppStyleComment, sizeof(__pyx_k_cppStyleComment), 0, 1, 0, 1},
  {&__pyx_n_s_cpp_style_comment, __pyx_k_cpp_style_comment, sizeof(__pyx_k_cpp_style_comment), 0, 0, 1, 1},
  {&__pyx_n_u_cpp_style_comment, __pyx_k_cpp_style_comment, sizeof(__pyx_k_cpp_style_comment), 0, 1, 0, 1},
  {&__pyx_n_s_dblQuotedString, __pyx_k_dblQuotedString, sizeof(__pyx_k_dblQuotedString), 0, 0, 1, 1},
  {&__pyx_n_u_dblQuotedString, __pyx_k_dblQuotedString, sizeof(__pyx_k_dblQuotedString), 0, 1, 0, 1},
  {&__pyx_n_s_dblSlashComment, __pyx_k_dblSlashComment, sizeof(__pyx_k_dblSlashComment), 0, 0, 1, 1},
  {&__pyx_n_u_dblSlashComment, __pyx_k_dblSlashComment, sizeof(__pyx_k_dblSlashComment), 0, 1, 0, 1},
  {&__pyx_n_s_dbl_quoted_string, __pyx_k_dbl_quoted_string, sizeof(__pyx_k_dbl_quoted_string), 0, 0, 1, 1},
  {&__pyx_n_u_dbl_quoted_string, __pyx_k_dbl_quoted_string, sizeof(__pyx_k_dbl_quoted_string), 0, 1, 0, 1},
  {&__pyx_n_s_dbl_slash_comment, __pyx_k_dbl_slash_comment, sizeof(__pyx_k_dbl_slash_comment), 0, 0, 1, 1},
  {&__pyx_n_u_dbl_slash_comment, __pyx_k_dbl_slash_comment, sizeof(__pyx_k_dbl_slash_comment), 0, 1, 0, 1},
  {&__pyx_n_s_default_exception_debug_action, __pyx_k_default_exception_debug_action, sizeof(__pyx_k_default_exception_debug_action), 0, 0, 1, 1},
  {&__pyx_n_s_default_start_debug_action, __pyx_k_default_start_debug_action, sizeof(__pyx_k_default_start_debug_action), 0, 0, 1, 1},
  {&__pyx_n_s_default_success_debug_action, __pyx_k_default_success_debug_action, sizeof(__pyx_k_default_success_debug_action), 0, 0, 1, 1},
  {&__pyx_n_s_delimitedList, __pyx_k_delimitedList, sizeof(__pyx_k_delimitedList), 0, 0, 1, 1},
  {&__pyx_n_u_delimitedList, __pyx_k_delimitedList, sizeof(__pyx_k_delimitedList), 0, 1, 0, 1},
  {&__pyx_n_s_delimited_list, __pyx_k_delimited_list, sizeof(__pyx_k_delimited_list), 0, 0, 1, 1},
  {&__pyx_n_u_delimited_list, __pyx_k_delimited_list, sizeof(__pyx_k_delimited_list), 0, 1, 0, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_diag, __pyx_k_diag, sizeof(__pyx_k_diag), 0, 0, 1, 1},
  {&__pyx_n_u_diag, __pyx_k_diag, sizeof(__pyx_k_diag), 0, 1, 0, 1},
  {&__pyx_n_s_dictOf, __pyx_k_dictOf, sizeof(__pyx_k_dictOf), 0, 0, 1, 1},
  {&__pyx_n_u_dictOf, __pyx_k_dictOf, sizeof(__pyx_k_dictOf), 0, 1, 0, 1},
  {&__pyx_n_s_dict_of, __pyx_k_dict_of, sizeof(__pyx_k_dict_of), 0, 0, 1, 1},
  {&__pyx_n_u_dict_of, __pyx_k_dict_of, sizeof(__pyx_k_dict_of), 0, 1, 0, 1},
  {&__pyx_n_s_disable_diag, __pyx_k_disable_diag, sizeof(__pyx_k_disable_diag), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_u_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 1, 0, 1},
  {&__pyx_n_s_enable_all_warnings, __pyx_k_enable_all_warnings, sizeof(__pyx_k_enable_all_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_enable_diag, __pyx_k_enable_diag, sizeof(__pyx_k_enable_diag), 0, 0, 1, 1},
  {&__pyx_n_s_escape_regex_range_chars, __pyx_k_escape_regex_range_chars, sizeof(__pyx_k_escape_regex_range_chars), 0, 0, 1, 1},
  {&__pyx_n_s_escapedHexChar, __pyx_k_escapedHexChar, sizeof(__pyx_k_escapedHexChar), 0, 0, 1, 1},
  {&__pyx_n_s_escapedOctChar, __pyx_k_escapedOctChar, sizeof(__pyx_k_escapedOctChar), 0, 0, 1, 1},
  {&__pyx_n_s_escapedPunc, __pyx_k_escapedPunc, sizeof(__pyx_k_escapedPunc), 0, 0, 1, 1},
  {&__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_u_final, __pyx_k_final, sizeof(__pyx_k_final), 0, 1, 0, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_generatorType, __pyx_k_generatorType, sizeof(__pyx_k_generatorType), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_helper_builtin_exprs, __pyx_k_helper_builtin_exprs, sizeof(__pyx_k_helper_builtin_exprs), 0, 0, 1, 1},
  {&__pyx_n_s_helpers, __pyx_k_helpers, sizeof(__pyx_k_helpers), 0, 0, 1, 1},
  {&__pyx_n_s_hexnums, __pyx_k_hexnums, sizeof(__pyx_k_hexnums), 0, 0, 1, 1},
  {&__pyx_n_u_hexnums, __pyx_k_hexnums, sizeof(__pyx_k_hexnums), 0, 1, 0, 1},
  {&__pyx_n_s_html, __pyx_k_html, sizeof(__pyx_k_html), 0, 0, 1, 1},
  {&__pyx_n_s_htmlComment, __pyx_k_htmlComment, sizeof(__pyx_k_htmlComment), 0, 0, 1, 1},
  {&__pyx_n_u_htmlComment, __pyx_k_htmlComment, sizeof(__pyx_k_htmlComment), 0, 1, 0, 1},
  {&__pyx_n_s_htmlEntityMap, __pyx_k_htmlEntityMap, sizeof(__pyx_k_htmlEntityMap), 0, 0, 1, 1},
  {&__pyx_n_s_html_comment, __pyx_k_html_comment, sizeof(__pyx_k_html_comment), 0, 0, 1, 1},
  {&__pyx_n_u_html_comment, __pyx_k_html_comment, sizeof(__pyx_k_html_comment), 0, 1, 0, 1},
  {&__pyx_n_s_identbodychars, __pyx_k_identbodychars, sizeof(__pyx_k_identbodychars), 0, 0, 1, 1},
  {&__pyx_n_u_identbodychars, __pyx_k_identbodychars, sizeof(__pyx_k_identbodychars), 0, 1, 0, 1},
  {&__pyx_n_s_identchars, __pyx_k_identchars, sizeof(__pyx_k_identchars), 0, 0, 1, 1},
  {&__pyx_n_u_identchars, __pyx_k_identchars, sizeof(__pyx_k_identchars), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indentedBlock, __pyx_k_indentedBlock, sizeof(__pyx_k_indentedBlock), 0, 0, 1, 1},
  {&__pyx_n_u_indentedBlock, __pyx_k_indentedBlock, sizeof(__pyx_k_indentedBlock), 0, 1, 0, 1},
  {&__pyx_n_s_infixNotation, __pyx_k_infixNotation, sizeof(__pyx_k_infixNotation), 0, 0, 1, 1},
  {&__pyx_n_u_infixNotation, __pyx_k_infixNotation, sizeof(__pyx_k_infixNotation), 0, 1, 0, 1},
  {&__pyx_n_s_infix_notation, __pyx_k_infix_notation, sizeof(__pyx_k_infix_notation), 0, 0, 1, 1},
  {&__pyx_n_u_infix_notation, __pyx_k_infix_notation, sizeof(__pyx_k_infix_notation), 0, 1, 0, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_itemgetter, __pyx_k_itemgetter, sizeof(__pyx_k_itemgetter), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_javaStyleComment, __pyx_k_javaStyleComment, sizeof(__pyx_k_javaStyleComment), 0, 0, 1, 1},
  {&__pyx_n_u_javaStyleComment, __pyx_k_javaStyleComment, sizeof(__pyx_k_javaStyleComment), 0, 1, 0, 1},
  {&__pyx_n_s_java_style_comment, __pyx_k_java_style_comment, sizeof(__pyx_k_java_style_comment), 0, 0, 1, 1},
  {&__pyx_n_u_java_style_comment, __pyx_k_java_style_comment, sizeof(__pyx_k_java_style_comment), 0, 1, 0, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_u_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 1, 0, 1},
  {&__pyx_n_s_lineEnd, __pyx_k_lineEnd, sizeof(__pyx_k_lineEnd), 0, 0, 1, 1},
  {&__pyx_n_u_lineEnd, __pyx_k_lineEnd, sizeof(__pyx_k_lineEnd), 0, 1, 0, 1},
  {&__pyx_n_s_lineStart, __pyx_k_lineStart, sizeof(__pyx_k_lineStart), 0, 0, 1, 1},
  {&__pyx_n_u_lineStart, __pyx_k_lineStart, sizeof(__pyx_k_lineStart), 0, 1, 0, 1},
  {&__pyx_n_s_line_end, __pyx_k_line_end, sizeof(__pyx_k_line_end), 0, 0, 1, 1},
  {&__pyx_n_u_line_end, __pyx_k_line_end, sizeof(__pyx_k_line_end), 0, 1, 0, 1},
  {&__pyx_n_s_line_start, __pyx_k_line_start, sizeof(__pyx_k_line_start), 0, 0, 1, 1},
  {&__pyx_n_u_line_start, __pyx_k_line_start, sizeof(__pyx_k_line_start), 0, 1, 0, 1},
  {&__pyx_n_s_lineno, __pyx_k_lineno, sizeof(__pyx_k_lineno), 0, 0, 1, 1},
  {&__pyx_n_u_lineno, __pyx_k_lineno, sizeof(__pyx_k_lineno), 0, 1, 0, 1},
  {&__pyx_n_s_locatedExpr, __pyx_k_locatedExpr, sizeof(__pyx_k_locatedExpr), 0, 0, 1, 1},
  {&__pyx_n_u_locatedExpr, __pyx_k_locatedExpr, sizeof(__pyx_k_locatedExpr), 0, 1, 0, 1},
  {&__pyx_n_s_lru_cache, __pyx_k_lru_cache, sizeof(__pyx_k_lru_cache), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_major, __pyx_k_major, sizeof(__pyx_k_major), 0, 0, 1, 1},
  {&__pyx_n_s_makeHTMLTags, __pyx_k_makeHTMLTags, sizeof(__pyx_k_makeHTMLTags), 0, 0, 1, 1},
  {&__pyx_n_u_makeHTMLTags, __pyx_k_makeHTMLTags, sizeof(__pyx_k_makeHTMLTags), 0, 1, 0, 1},
  {&__pyx_n_s_makeTags, __pyx_k_makeTags, sizeof(__pyx_k_makeTags), 0, 0, 1, 1},
  {&__pyx_n_s_makeXMLTags, __pyx_k_makeXMLTags, sizeof(__pyx_k_makeXMLTags), 0, 0, 1, 1},
  {&__pyx_n_u_makeXMLTags, __pyx_k_makeXMLTags, sizeof(__pyx_k_makeXMLTags), 0, 1, 0, 1},
  {&__pyx_n_s_make_html_tags, __pyx_k_make_html_tags, sizeof(__pyx_k_make_html_tags), 0, 0, 1, 1},
  {&__pyx_n_u_make_html_tags, __pyx_k_make_html_tags, sizeof(__pyx_k_make_html_tags), 0, 1, 0, 1},
  {&__pyx_n_s_make_xml_tags, __pyx_k_make_xml_tags, sizeof(__pyx_k_make_xml_tags), 0, 0, 1, 1},
  {&__pyx_n_u_make_xml_tags, __pyx_k_make_xml_tags, sizeof(__pyx_k_make_xml_tags), 0, 1, 0, 1},
  {&__pyx_n_s_matchOnlyAtCol, __pyx_k_matchOnlyAtCol, sizeof(__pyx_k_matchOnlyAtCol), 0, 0, 1, 1},
  {&__pyx_n_u_matchOnlyAtCol, __pyx_k_matchOnlyAtCol, sizeof(__pyx_k_matchOnlyAtCol), 0, 1, 0, 1},
  {&__pyx_n_s_matchPreviousExpr, __pyx_k_matchPreviousExpr, sizeof(__pyx_k_matchPreviousExpr), 0, 0, 1, 1},
  {&__pyx_n_u_matchPreviousExpr, __pyx_k_matchPreviousExpr, sizeof(__pyx_k_matchPreviousExpr), 0, 1, 0, 1},
  {&__pyx_n_s_matchPreviousLiteral, __pyx_k_matchPreviousLiteral, sizeof(__pyx_k_matchPreviousLiteral), 0, 0, 1, 1},
  {&__pyx_n_u_matchPreviousLiteral, __pyx_k_matchPreviousLiteral, sizeof(__pyx_k_matchPreviousLiteral), 0, 1, 0, 1},
  {&__pyx_n_s_match_only_at_col, __pyx_k_match_only_at_col, sizeof(__pyx_k_match_only_at_col), 0, 0, 1, 1},
  {&__pyx_n_u_match_only_at_col, __pyx_k_match_only_at_col, sizeof(__pyx_k_match_only_at_col), 0, 1, 0, 1},
  {&__pyx_n_s_match_previous_expr, __pyx_k_match_previous_expr, sizeof(__pyx_k_match_previous_expr), 0, 0, 1, 1},
  {&__pyx_n_u_match_previous_expr, __pyx_k_match_previous_expr, sizeof(__pyx_k_match_previous_expr), 0, 1, 0, 1},
  {&__pyx_n_s_match_previous_literal, __pyx_k_match_previous_literal, sizeof(__pyx_k_match_previous_literal), 0, 0, 1, 1},
  {&__pyx_n_u_match_previous_literal, __pyx_k_match_previous_literal, sizeof(__pyx_k_match_previous_literal), 0, 1, 0, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_micro, __pyx_k_micro, sizeof(__pyx_k_micro), 0, 0, 1, 1},
  {&__pyx_n_s_minor, __pyx_k_minor, sizeof(__pyx_k_minor), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nestedExpr, __pyx_k_nestedExpr, sizeof(__pyx_k_nestedExpr), 0, 0, 1, 1},
  {&__pyx_n_u_nestedExpr, __pyx_k_nestedExpr, sizeof(__pyx_k_nestedExpr), 0, 1, 0, 1},
  {&__pyx_n_s_nested_expr, __pyx_k_nested_expr, sizeof(__pyx_k_nested_expr), 0, 0, 1, 1},
  {&__pyx_n_u_nested_expr, __pyx_k_nested_expr, sizeof(__pyx_k_nested_expr), 0, 1, 0, 1},
  {&__pyx_n_s_nullDebugAction, __pyx_k_nullDebugAction, sizeof(__pyx_k_nullDebugAction), 0, 0, 1, 1},
  {&__pyx_n_u_nullDebugAction, __pyx_k_nullDebugAction, sizeof(__pyx_k_nullDebugAction), 0, 1, 0, 1},
  {&__pyx_n_s_null_debug_action, __pyx_k_null_debug_action, sizeof(__pyx_k_null_debug_action), 0, 0, 1, 1},
  {&__pyx_n_u_null_debug_action, __pyx_k_null_debug_action, sizeof(__pyx_k_null_debug_action), 0, 1, 0, 1},
  {&__pyx_n_s_nums, __pyx_k_nums, sizeof(__pyx_k_nums), 0, 0, 1, 1},
  {&__pyx_n_u_nums, __pyx_k_nums, sizeof(__pyx_k_nums), 0, 1, 0, 1},
  {&__pyx_n_s_oneOf, __pyx_k_oneOf, sizeof(__pyx_k_oneOf), 0, 0, 1, 1},
  {&__pyx_n_u_oneOf, __pyx_k_oneOf, sizeof(__pyx_k_oneOf), 0, 1, 0, 1},
  {&__pyx_n_s_one_of, __pyx_k_one_of, sizeof(__pyx_k_one_of), 0, 0, 1, 1},
  {&__pyx_n_u_one_of, __pyx_k_one_of, sizeof(__pyx_k_one_of), 0, 1, 0, 1},
  {&__pyx_n_s_opAssoc, __pyx_k_opAssoc, sizeof(__pyx_k_opAssoc), 0, 0, 1, 1},
  {&__pyx_n_u_opAssoc, __pyx_k_opAssoc, sizeof(__pyx_k_opAssoc), 0, 1, 0, 1},
  {&__pyx_n_s_originalTextFor, __pyx_k_originalTextFor, sizeof(__pyx_k_originalTextFor), 0, 0, 1, 1},
  {&__pyx_n_u_originalTextFor, __pyx_k_originalTextFor, sizeof(__pyx_k_originalTextFor), 0, 1, 0, 1},
  {&__pyx_n_s_original_text_for, __pyx_k_original_text_for, sizeof(__pyx_k_original_text_for), 0, 0, 1, 1},
  {&__pyx_n_u_original_text_for, __pyx_k_original_text_for, sizeof(__pyx_k_original_text_for), 0, 1, 0, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_ppu, __pyx_k_ppu, sizeof(__pyx_k_ppu), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_printables, __pyx_k_printables, sizeof(__pyx_k_printables), 0, 0, 1, 1},
  {&__pyx_n_u_printables, __pyx_k_printables, sizeof(__pyx_k_printables), 0, 1, 0, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_punc8bit, __pyx_k_punc8bit, sizeof(__pyx_k_punc8bit), 0, 0, 1, 1},
  {&__pyx_n_u_punc8bit, __pyx_k_punc8bit, sizeof(__pyx_k_punc8bit), 0, 1, 0, 1},
  {&__pyx_n_s_py_str, __pyx_k_py_str, sizeof(__pyx_k_py_str), 0, 0, 1, 1},
  {&__pyx_n_u_pyparsing, __pyx_k_pyparsing, sizeof(__pyx_k_pyparsing), 0, 1, 0, 1},
  {&__pyx_n_s_pyparsing___init, __pyx_k_pyparsing___init, sizeof(__pyx_k_pyparsing___init), 0, 0, 1, 1},
  {&__pyx_kp_s_pyparsing___init___py, __pyx_k_pyparsing___init___py, sizeof(__pyx_k_pyparsing___init___py), 0, 0, 1, 0},
  {&__pyx_n_s_pyparsing_common, __pyx_k_pyparsing_common, sizeof(__pyx_k_pyparsing_common), 0, 0, 1, 1},
  {&__pyx_n_u_pyparsing_common, __pyx_k_pyparsing_common, sizeof(__pyx_k_pyparsing_common), 0, 1, 0, 1},
  {&__pyx_kp_u_pyparsing_module_Classes_and_me, __pyx_k_pyparsing_module_Classes_and_me, sizeof(__pyx_k_pyparsing_module_Classes_and_me), 0, 1, 0, 0},
  {&__pyx_n_s_pyparsing_test, __pyx_k_pyparsing_test, sizeof(__pyx_k_pyparsing_test), 0, 0, 1, 1},
  {&__pyx_n_u_pyparsing_test, __pyx_k_pyparsing_test, sizeof(__pyx_k_pyparsing_test), 0, 1, 0, 1},
  {&__pyx_n_s_pyparsing_unicode, __pyx_k_pyparsing_unicode, sizeof(__pyx_k_pyparsing_unicode), 0, 0, 1, 1},
  {&__pyx_n_u_pyparsing_unicode, __pyx_k_pyparsing_unicode, sizeof(__pyx_k_pyparsing_unicode), 0, 1, 0, 1},
  {&__pyx_n_s_pythonStyleComment, __pyx_k_pythonStyleComment, sizeof(__pyx_k_pythonStyleComment), 0, 0, 1, 1},
  {&__pyx_n_u_pythonStyleComment, __pyx_k_pythonStyleComment, sizeof(__pyx_k_pythonStyleComment), 0, 1, 0, 1},
  {&__pyx_n_s_python_quoted_string, __pyx_k_python_quoted_string, sizeof(__pyx_k_python_quoted_string), 0, 0, 1, 1},
  {&__pyx_n_s_python_style_comment, __pyx_k_python_style_comment, sizeof(__pyx_k_python_style_comment), 0, 0, 1, 1},
  {&__pyx_n_u_python_style_comment, __pyx_k_python_style_comment, sizeof(__pyx_k_python_style_comment), 0, 1, 0, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_quotedString, __pyx_k_quotedString, sizeof(__pyx_k_quotedString), 0, 0, 1, 1},
  {&__pyx_n_u_quotedString, __pyx_k_quotedString, sizeof(__pyx_k_quotedString), 0, 1, 0, 1},
  {&__pyx_n_s_quoted_string, __pyx_k_quoted_string, sizeof(__pyx_k_quoted_string), 0, 0, 1, 1},
  {&__pyx_n_u_quoted_string, __pyx_k_quoted_string, sizeof(__pyx_k_quoted_string), 0, 1, 0, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_kp_u_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 1, 0, 0},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_reBracketExpr, __pyx_k_reBracketExpr, sizeof(__pyx_k_reBracketExpr), 0, 0, 1, 1},
  {&__pyx_n_s_releaselevel, __pyx_k_releaselevel, sizeof(__pyx_k_releaselevel), 0, 0, 1, 1},
  {&__pyx_n_s_removeQuotes, __pyx_k_removeQuotes, sizeof(__pyx_k_removeQuotes), 0, 0, 1, 1},
  {&__pyx_n_u_removeQuotes, __pyx_k_removeQuotes, sizeof(__pyx_k_removeQuotes), 0, 1, 0, 1},
  {&__pyx_n_s_remove_quotes, __pyx_k_remove_quotes, sizeof(__pyx_k_remove_quotes), 0, 0, 1, 1},
  {&__pyx_n_u_remove_quotes, __pyx_k_remove_quotes, sizeof(__pyx_k_remove_quotes), 0, 1, 0, 1},
  {&__pyx_n_s_replaceHTMLEntity, __pyx_k_replaceHTMLEntity, sizeof(__pyx_k_replaceHTMLEntity), 0, 0, 1, 1},
  {&__pyx_n_u_replaceHTMLEntity, __pyx_k_replaceHTMLEntity, sizeof(__pyx_k_replaceHTMLEntity), 0, 1, 0, 1},
  {&__pyx_n_s_replaceWith, __pyx_k_replaceWith, sizeof(__pyx_k_replaceWith), 0, 0, 1, 1},
  {&__pyx_n_u_replaceWith, __pyx_k_replaceWith, sizeof(__pyx_k_replaceWith), 0, 1, 0, 1},
  {&__pyx_n_s_replace_html_entity, __pyx_k_replace_html_entity, sizeof(__pyx_k_replace_html_entity), 0, 0, 1, 1},
  {&__pyx_n_u_replace_html_entity, __pyx_k_replace_html_entity, sizeof(__pyx_k_replace_html_entity), 0, 1, 0, 1},
  {&__pyx_n_s_replace_with, __pyx_k_replace_with, sizeof(__pyx_k_replace_with), 0, 0, 1, 1},
  {&__pyx_n_u_replace_with, __pyx_k_replace_with, sizeof(__pyx_k_replace_with), 0, 1, 0, 1},
  {&__pyx_n_s_replaced_by_pep8, __pyx_k_replaced_by_pep8, sizeof(__pyx_k_replaced_by_pep8), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_restOfLine, __pyx_k_restOfLine, sizeof(__pyx_k_restOfLine), 0, 0, 1, 1},
  {&__pyx_n_u_restOfLine, __pyx_k_restOfLine, sizeof(__pyx_k_restOfLine), 0, 1, 0, 1},
  {&__pyx_n_s_rest_of_line, __pyx_k_rest_of_line, sizeof(__pyx_k_rest_of_line), 0, 0, 1, 1},
  {&__pyx_n_u_rest_of_line, __pyx_k_rest_of_line, sizeof(__pyx_k_rest_of_line), 0, 1, 0, 1},
  {&__pyx_n_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_serial, __pyx_k_serial, sizeof(__pyx_k_serial), 0, 0, 1, 1},
  {&__pyx_n_s_sglQuotedString, __pyx_k_sglQuotedString, sizeof(__pyx_k_sglQuotedString), 0, 0, 1, 1},
  {&__pyx_n_u_sglQuotedString, __pyx_k_sglQuotedString, sizeof(__pyx_k_sglQuotedString), 0, 1, 0, 1},
  {&__pyx_n_s_sgl_quoted_string, __pyx_k_sgl_quoted_string, sizeof(__pyx_k_sgl_quoted_string), 0, 0, 1, 1},
  {&__pyx_n_u_sgl_quoted_string, __pyx_k_sgl_quoted_string, sizeof(__pyx_k_sgl_quoted_string), 0, 1, 0, 1},
  {&__pyx_n_s_should_enable_warnings, __pyx_k_should_enable_warnings, sizeof(__pyx_k_should_enable_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_singleChar, __pyx_k_singleChar, sizeof(__pyx_k_singleChar), 0, 0, 1, 1},
  {&__pyx_n_s_single_arg_builtins, __pyx_k_single_arg_builtins, sizeof(__pyx_k_single_arg_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_srange, __pyx_k_srange, sizeof(__pyx_k_srange), 0, 0, 1, 1},
  {&__pyx_n_u_srange, __pyx_k_srange, sizeof(__pyx_k_srange), 0, 1, 0, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_str_type, __pyx_k_str_type, sizeof(__pyx_k_str_type), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_stringEnd, __pyx_k_stringEnd, sizeof(__pyx_k_stringEnd), 0, 0, 1, 1},
  {&__pyx_n_u_stringEnd, __pyx_k_stringEnd, sizeof(__pyx_k_stringEnd), 0, 1, 0, 1},
  {&__pyx_n_s_stringStart, __pyx_k_stringStart, sizeof(__pyx_k_stringStart), 0, 0, 1, 1},
  {&__pyx_n_u_stringStart, __pyx_k_stringStart, sizeof(__pyx_k_stringStart), 0, 1, 0, 1},
  {&__pyx_n_s_string_end, __pyx_k_string_end, sizeof(__pyx_k_string_end), 0, 0, 1, 1},
  {&__pyx_n_u_string_end, __pyx_k_string_end, sizeof(__pyx_k_string_end), 0, 1, 0, 1},
  {&__pyx_n_s_string_start, __pyx_k_string_start, sizeof(__pyx_k_string_start), 0, 0, 1, 1},
  {&__pyx_n_u_string_start, __pyx_k_string_start, sizeof(__pyx_k_string_start), 0, 1, 0, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_system_version, __pyx_k_system_version, sizeof(__pyx_k_system_version), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_testing, __pyx_k_testing, sizeof(__pyx_k_testing), 0, 0, 1, 1},
  {&__pyx_n_u_testing, __pyx_k_testing, sizeof(__pyx_k_testing), 0, 1, 0, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tokenMap, __pyx_k_tokenMap, sizeof(__pyx_k_tokenMap), 0, 0, 1, 1},
  {&__pyx_n_u_tokenMap, __pyx_k_tokenMap, sizeof(__pyx_k_tokenMap), 0, 1, 0, 1},
  {&__pyx_n_s_token_map, __pyx_k_token_map, sizeof(__pyx_k_token_map), 0, 0, 1, 1},
  {&__pyx_n_u_token_map, __pyx_k_token_map, sizeof(__pyx_k_token_map), 0, 1, 0, 1},
  {&__pyx_n_s_traceParseAction, __pyx_k_traceParseAction, sizeof(__pyx_k_traceParseAction), 0, 0, 1, 1},
  {&__pyx_n_u_traceParseAction, __pyx_k_traceParseAction, sizeof(__pyx_k_traceParseAction), 0, 1, 0, 1},
  {&__pyx_n_s_trace_parse_action, __pyx_k_trace_parse_action, sizeof(__pyx_k_trace_parse_action), 0, 0, 1, 1},
  {&__pyx_n_u_trace_parse_action, __pyx_k_trace_parse_action, sizeof(__pyx_k_trace_parse_action), 0, 1, 0, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_trim_arity, __pyx_k_trim_arity, sizeof(__pyx_k_trim_arity), 0, 0, 1, 1},
  {&__pyx_n_s_trim_arity_call_line, __pyx_k_trim_arity_call_line, sizeof(__pyx_k_trim_arity_call_line), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_ungroup, __pyx_k_ungroup, sizeof(__pyx_k_ungroup), 0, 0, 1, 1},
  {&__pyx_n_u_ungroup, __pyx_k_ungroup, sizeof(__pyx_k_ungroup), 0, 1, 0, 1},
  {&__pyx_n_s_unicode, __pyx_k_unicode, sizeof(__pyx_k_unicode), 0, 0, 1, 1},
  {&__pyx_n_u_unicode, __pyx_k_unicode, sizeof(__pyx_k_unicode), 0, 1, 0, 1},
  {&__pyx_n_s_unicodeString, __pyx_k_unicodeString, sizeof(__pyx_k_unicodeString), 0, 0, 1, 1},
  {&__pyx_n_u_unicodeString, __pyx_k_unicodeString, sizeof(__pyx_k_unicodeString), 0, 1, 0, 1},
  {&__pyx_n_s_unicode_set, __pyx_k_unicode_set, sizeof(__pyx_k_unicode_set), 0, 0, 1, 1},
  {&__pyx_n_u_unicode_set, __pyx_k_unicode_set, sizeof(__pyx_k_unicode_set), 0, 1, 0, 1},
  {&__pyx_n_s_unicode_string, __pyx_k_unicode_string, sizeof(__pyx_k_unicode_string), 0, 0, 1, 1},
  {&__pyx_n_u_unicode_string, __pyx_k_unicode_string, sizeof(__pyx_k_unicode_string), 0, 1, 0, 1},
  {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_u_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 1, 0, 1},
  {&__pyx_n_s_versionTime, __pyx_k_versionTime, sizeof(__pyx_k_versionTime), 0, 0, 1, 1},
  {&__pyx_n_u_versionTime, __pyx_k_versionTime, sizeof(__pyx_k_versionTime), 0, 1, 0, 1},
  {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {&__pyx_n_s_version_info_2, __pyx_k_version_info_2, sizeof(__pyx_k_version_info_2), 0, 0, 1, 1},
  {&__pyx_n_s_version_info___repr, __pyx_k_version_info___repr, sizeof(__pyx_k_version_info___repr), 0, 0, 1, 1},
  {&__pyx_n_s_version_info___repr___locals_gen, __pyx_k_version_info___repr___locals_gen, sizeof(__pyx_k_version_info___repr___locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_version_info___str, __pyx_k_version_info___str, sizeof(__pyx_k_version_info___str), 0, 0, 1, 1},
  {&__pyx_n_s_version_info___version, __pyx_k_version_info___version, sizeof(__pyx_k_version_info___version), 0, 0, 1, 1},
  {&__pyx_n_s_version_time, __pyx_k_version_time, sizeof(__pyx_k_version_time), 0, 0, 1, 1},
  {&__pyx_n_u_version_time, __pyx_k_version_time, sizeof(__pyx_k_version_time), 0, 1, 0, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_withAttribute, __pyx_k_withAttribute, sizeof(__pyx_k_withAttribute), 0, 0, 1, 1},
  {&__pyx_n_u_withAttribute, __pyx_k_withAttribute, sizeof(__pyx_k_withAttribute), 0, 1, 0, 1},
  {&__pyx_n_s_withClass, __pyx_k_withClass, sizeof(__pyx_k_withClass), 0, 0, 1, 1},
  {&__pyx_n_u_withClass, __pyx_k_withClass, sizeof(__pyx_k_withClass), 0, 1, 0, 1},
  {&__pyx_n_s_with_attribute, __pyx_k_with_attribute, sizeof(__pyx_k_with_attribute), 0, 0, 1, 1},
  {&__pyx_n_u_with_attribute, __pyx_k_with_attribute, sizeof(__pyx_k_with_attribute), 0, 1, 0, 1},
  {&__pyx_n_s_with_class, __pyx_k_with_class, sizeof(__pyx_k_with_class), 0, 0, 1, 1},
  {&__pyx_n_u_with_class, __pyx_k_with_class, sizeof(__pyx_k_with_class), 0, 1, 0, 1},
  {&__pyx_n_s_wraps, __pyx_k_wraps, sizeof(__pyx_k_wraps), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 120, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyparsing/__init__.py":107
 * 
 *     @property
 *     def __version__(self):             # <<<<<<<<<<<<<<
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyparsing___init___py, __pyx_n_s_version, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "pyparsing/__init__.py":116
 *         )
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyparsing___init___py, __pyx_n_s_str, 116, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 116, __pyx_L1_error)

  /* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyparsing___init___py, __pyx_n_s_repr, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "pyparsing/__init__.py":123
 * 
 * 
 * __version_info__ = version_info(3, 1, 4, "final", 1)             # <<<<<<<<<<<<<<
 * __version_time__ = "25 Aug 2024 14:40 UTC"
 * __version__ = __version_info__.__version__
 */
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_int_3, __pyx_int_1, __pyx_int_4, __pyx_n_u_final, __pyx_int_1); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__.tp_dictoffset && __pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9pyparsing_8__init_____pyx_scope_struct____repr__ = &__pyx_type_9pyparsing_8__init_____pyx_scope_struct____repr__;
  if (PyType_Ready(&__pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9pyparsing_8__init_____pyx_scope_struct_1_genexpr = &__pyx_type_9pyparsing_8__init_____pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpyparsing(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpyparsing(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pyparsing(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pyparsing(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pyparsing(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pyparsing' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pyparsing(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pyparsing", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyparsing____init__) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  if (!CYTHON_PEP489_MULTI_PHASE_INIT) {
    if (unlikely(__Pyx_SetPackagePathFromImportLib(NULL, __pyx_n_u_pyparsing) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyparsing")) {
      if (unlikely(PyDict_SetItemString(modules, "pyparsing", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_pyparsing(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "pyparsing/__init__.py":25
 * #
 * 
 * __doc__ = """             # <<<<<<<<<<<<<<
 * pyparsing module - Classes and methods to define and execute parsing grammars
 * =============================================================================
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_doc, __pyx_kp_u_pyparsing_module_Classes_and_me) < 0) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "pyparsing/__init__.py":96
 *    namespace class
 * """
 * from typing import NamedTuple             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NamedTuple);
  __Pyx_GIVEREF(__pyx_n_s_NamedTuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NamedTuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NamedTuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NamedTuple, __pyx_t_1) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":99
 * 
 * 
 * class version_info(NamedTuple):             # <<<<<<<<<<<<<<
 *     major: int
 *     minor: int
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NamedTuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_version_info, __pyx_n_s_version_info, (PyObject *) NULL, __pyx_n_s_pyparsing___init, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyparsing/__init__.py":107
 * 
 *     @property
 *     def __version__(self):             # <<<<<<<<<<<<<<
 *         return (
 *             f"{self.major}.{self.minor}.{self.micro}"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9pyparsing_8__init___12version_info_1__version__, 0, __pyx_n_s_version_info___version, NULL, __pyx_n_s_pyparsing___init, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "pyparsing/__init__.py":106
 *     serial: int
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def __version__(self):
 *         return (
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_version, __pyx_t_5) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyparsing/__init__.py":116
 *         )
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9pyparsing_8__init___12version_info_3__str__, 0, __pyx_n_s_version_info___str, NULL, __pyx_n_s_pyparsing___init, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyparsing/__init__.py":119
 *         return f"{__name__} {self.__version__} / {__version_time__}"
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"{__name__}.{type(self).__name__}({', '.join('{}={!r}'.format(*nv) for nv in zip(self._fields, self))})"
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9pyparsing_8__init___12version_info_5__repr__, 0, __pyx_n_s_version_info___repr, NULL, __pyx_n_s_pyparsing___init, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyparsing/__init__.py":99
 * 
 * 
 * class version_info(NamedTuple):             # <<<<<<<<<<<<<<
 *     major: int
 *     minor: int
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_version_info, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_info, __pyx_t_5) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":123
 * 
 * 
 * __version_info__ = version_info(3, 1, 4, "final", 1)             # <<<<<<<<<<<<<<
 * __version_time__ = "25 Aug 2024 14:40 UTC"
 * __version__ = __version_info__.__version__
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_version_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_info_2, __pyx_t_2) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":124
 * 
 * __version_info__ = version_info(3, 1, 4, "final", 1)
 * __version_time__ = "25 Aug 2024 14:40 UTC"             # <<<<<<<<<<<<<<
 * __version__ = __version_info__.__version__
 * __versionTime__ = __version_time__
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_time, __pyx_kp_u_25_Aug_2024_14_40_UTC) < 0) __PYX_ERR(0, 124, __pyx_L1_error)

  /* "pyparsing/__init__.py":125
 * __version_info__ = version_info(3, 1, 4, "final", 1)
 * __version_time__ = "25 Aug 2024 14:40 UTC"
 * __version__ = __version_info__.__version__             # <<<<<<<<<<<<<<
 * __versionTime__ = __version_time__
 * __author__ = "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_version_info_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":126
 * __version_time__ = "25 Aug 2024 14:40 UTC"
 * __version__ = __version_info__.__version__
 * __versionTime__ = __version_time__             # <<<<<<<<<<<<<<
 * __author__ = "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>"
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_version_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_versionTime, __pyx_t_1) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":127
 * __version__ = __version_info__.__version__
 * __versionTime__ = __version_time__
 * __author__ = "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>"             # <<<<<<<<<<<<<<
 * 
 * from .util import TypeVar, line, C, inspect, collections, UnboundedMemo, List, lru_cache, col, _UnboundedCache, warnings, cast, _escape_regex_range_chars, lineno, replaced_by_pep8, wraps, Union, types, Iterable, LRUMemo, Callable, itertools
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_u_Paul_McGuire_ptmcg_gm_pyparsing) < 0) __PYX_ERR(0, 127, __pyx_L1_error)

  /* "pyparsing/__init__.py":129
 * __author__ = "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>"
 * 
 * from .util import TypeVar, line, C, inspect, collections, UnboundedMemo, List, lru_cache, col, _UnboundedCache, warnings, cast, _escape_regex_range_chars, lineno, replaced_by_pep8, wraps, Union, types, Iterable, LRUMemo, Callable, itertools             # <<<<<<<<<<<<<<
 * from .exceptions import ParseFatalException, RecursiveGrammarException, ParseSyntaxException, ParseException, ParseBaseException
 * # from .exceptions import *
 */
  __pyx_t_1 = PyList_New(22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TypeVar);
  __Pyx_GIVEREF(__pyx_n_s_TypeVar);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TypeVar);
  __Pyx_INCREF(__pyx_n_s_line);
  __Pyx_GIVEREF(__pyx_n_s_line);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_line);
  __Pyx_INCREF(__pyx_n_s_C);
  __Pyx_GIVEREF(__pyx_n_s_C);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_C);
  __Pyx_INCREF(__pyx_n_s_inspect);
  __Pyx_GIVEREF(__pyx_n_s_inspect);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_inspect);
  __Pyx_INCREF(__pyx_n_s_collections);
  __Pyx_GIVEREF(__pyx_n_s_collections);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_collections);
  __Pyx_INCREF(__pyx_n_s_UnboundedMemo);
  __Pyx_GIVEREF(__pyx_n_s_UnboundedMemo);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_UnboundedMemo);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_lru_cache);
  __Pyx_GIVEREF(__pyx_n_s_lru_cache);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_lru_cache);
  __Pyx_INCREF(__pyx_n_s_col);
  __Pyx_GIVEREF(__pyx_n_s_col);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_col);
  __Pyx_INCREF(__pyx_n_s_UnboundedCache);
  __Pyx_GIVEREF(__pyx_n_s_UnboundedCache);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_UnboundedCache);
  __Pyx_INCREF(__pyx_n_s_warnings);
  __Pyx_GIVEREF(__pyx_n_s_warnings);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_warnings);
  __Pyx_INCREF(__pyx_n_s_cast);
  __Pyx_GIVEREF(__pyx_n_s_cast);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_cast);
  __Pyx_INCREF(__pyx_n_s_escape_regex_range_chars);
  __Pyx_GIVEREF(__pyx_n_s_escape_regex_range_chars);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_escape_regex_range_chars);
  __Pyx_INCREF(__pyx_n_s_lineno);
  __Pyx_GIVEREF(__pyx_n_s_lineno);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_lineno);
  __Pyx_INCREF(__pyx_n_s_replaced_by_pep8);
  __Pyx_GIVEREF(__pyx_n_s_replaced_by_pep8);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_replaced_by_pep8);
  __Pyx_INCREF(__pyx_n_s_wraps);
  __Pyx_GIVEREF(__pyx_n_s_wraps);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_wraps);
  __Pyx_INCREF(__pyx_n_s_Union);
  __Pyx_GIVEREF(__pyx_n_s_Union);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_Union);
  __Pyx_INCREF(__pyx_n_s_types);
  __Pyx_GIVEREF(__pyx_n_s_types);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_types);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_Iterable);
  __Pyx_INCREF(__pyx_n_s_LRUMemo);
  __Pyx_GIVEREF(__pyx_n_s_LRUMemo);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_LRUMemo);
  __Pyx_INCREF(__pyx_n_s_Callable);
  __Pyx_GIVEREF(__pyx_n_s_Callable);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_Callable);
  __Pyx_INCREF(__pyx_n_s_itertools);
  __Pyx_GIVEREF(__pyx_n_s_itertools);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_itertools);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_util, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TypeVar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TypeVar, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_line, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_C); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_inspect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inspect, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_collections); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UnboundedMemo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnboundedMemo, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_lru_cache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lru_cache, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_col); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_col, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UnboundedCache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnboundedCache, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cast, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_escape_regex_range_chars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escape_regex_range_chars, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_lineno); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lineno, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_replaced_by_pep8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replaced_by_pep8, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_wraps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_wraps, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Union, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LRUMemo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LRUMemo, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Callable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Callable, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":130
 * 
 * from .util import TypeVar, line, C, inspect, collections, UnboundedMemo, List, lru_cache, col, _UnboundedCache, warnings, cast, _escape_regex_range_chars, lineno, replaced_by_pep8, wraps, Union, types, Iterable, LRUMemo, Callable, itertools
 * from .exceptions import ParseFatalException, RecursiveGrammarException, ParseSyntaxException, ParseException, ParseBaseException             # <<<<<<<<<<<<<<
 * # from .exceptions import *
 * from .actions import *
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ParseFatalException);
  __Pyx_GIVEREF(__pyx_n_s_ParseFatalException);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ParseFatalException);
  __Pyx_INCREF(__pyx_n_s_RecursiveGrammarException);
  __Pyx_GIVEREF(__pyx_n_s_RecursiveGrammarException);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_RecursiveGrammarException);
  __Pyx_INCREF(__pyx_n_s_ParseSyntaxException);
  __Pyx_GIVEREF(__pyx_n_s_ParseSyntaxException);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_ParseSyntaxException);
  __Pyx_INCREF(__pyx_n_s_ParseException);
  __Pyx_GIVEREF(__pyx_n_s_ParseException);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_ParseException);
  __Pyx_INCREF(__pyx_n_s_ParseBaseException);
  __Pyx_GIVEREF(__pyx_n_s_ParseBaseException);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_ParseBaseException);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_exceptions, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseFatalException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseFatalException, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RecursiveGrammarException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RecursiveGrammarException, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseSyntaxException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseSyntaxException, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseException, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseBaseException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseBaseException, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":132
 * from .exceptions import ParseFatalException, RecursiveGrammarException, ParseSyntaxException, ParseException, ParseBaseException
 * # from .exceptions import *
 * from .actions import *             # <<<<<<<<<<<<<<
 * from .core import __diag__, __compat__
 * from .results import *
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__15);
  __Pyx_GIVEREF(__pyx_n_s__15);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__15);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_actions, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(0, 132, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":133
 * # from .exceptions import *
 * from .actions import *
 * from .core import __diag__, __compat__             # <<<<<<<<<<<<<<
 * from .results import *
 * # from .core import *
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_diag);
  __Pyx_GIVEREF(__pyx_n_s_diag);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_diag);
  __Pyx_INCREF(__pyx_n_s_compat);
  __Pyx_GIVEREF(__pyx_n_s_compat);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_compat);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_core, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_diag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_diag, __pyx_t_2) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_compat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compat, __pyx_t_2) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":134
 * from .actions import *
 * from .core import __diag__, __compat__
 * from .results import *             # <<<<<<<<<<<<<<
 * # from .core import *
 * from .core import (Located, ABC, And, Any, AtLineStart, AtStringStart, Callable, CaselessKeyword, CaselessLiteral, Char, CharsNotIn, CloseMatch, Combine, DebugExceptionAction, DebugStartAction, DebugSuccessAction, DelimitedList, Diagnostics, Dict, Each, Empty, Enum, FollowedBy, Forward, Generator, GoToColumn, Group, IndentedBlock, Iterable, Keyword, LineEnd, LineStart, List, Literal, Match, MatchFirst, NamedTuple, NoMatch, NotAny, OneOrMore, OnlyOnce, Opt, Optional, Or, PY_3, ParseAction, ParseBaseException, ParseCondition, ParseElementEnhance, ParseException, ParseExpression, ParseFailAction, ParseFatalException, ParseImplReturnType, ParseResults, ParseSyntaxException, ParserElement, Path, PositionToken, PostParseReturnType, PrecededBy, QuotedString, RLock, RecursiveGrammarException, Regex, Sequence, Set, SkipTo, StringEnd, StringStart, Suppress, Tag, TextIO, Token, TokenConverter, Tuple, Union, White, Word, WordEnd, WordStart, ZeroOrMore, _FifoCache, _LRUMemo, _MAX_INT, _MultipleMatch, _NullToken, _ParseResultsWithOffset, _PendingSkip, _RePattern, _SingleCharLiteral, _UnboundedCache, _UnboundedMemo, _bslash, _charRange, _collapse_string_to_ranges, _default_exception_debug_action, _default_start_debug_action, _default_success_debug_action, _escape_regex_range_chars, _escapedHexChar, _escapedOctChar, _escapedPunc, _flatten, _generatorType, _reBracketExpr, _should_enable_warnings, _singleChar, _single_arg_builtins, _trim_arity, _trim_arity_call_line, abstractmethod, alphanums, alphas, alphas8bit, cached_property, cast, col, conditionAsParseAction, condition_as_parse_action, copy, dblQuotedString, dbl_quoted_string, deque, disable_diag, empty, enable_all_warnings, enable_diag, hexnums, identbodychars, identchars, itemgetter, line, lineEnd, lineStart, line_end, line_start, lineno, matchOnlyAtCol, match_only_at_col, nullDebugAction, null_debug_action, nums, os, ppu, printables, punc8bit, py_str, pyparsing_unicode, python_quoted_string, quotedString, quoted_string, re, removeQuotes, remove_quotes, replaceWith, replace_with, replaced_by_pep8, sglQuotedString, sgl_quoted_string, srange, str_type, string, stringEnd, stringStart, string_end, string_start, sys, system_version, tokenMap, token_map, traceParseAction, trace_parse_action, traceback, types, typing, unicodeString, unicode_string, warnings, withAttribute, withClass, with_attribute, with_class, wraps)  # type: ignore[misc, assignment]
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__15);
  __Pyx_GIVEREF(__pyx_n_s__15);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__15);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_results, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(0, 134, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":136
 * from .results import *
 * # from .core import *
 * from .core import (Located, ABC, And, Any, AtLineStart, AtStringStart, Callable, CaselessKeyword, CaselessLiteral, Char, CharsNotIn, CloseMatch, Combine, DebugExceptionAction, DebugStartAction, DebugSuccessAction, DelimitedList, Diagnostics, Dict, Each, Empty, Enum, FollowedBy, Forward, Generator, GoToColumn, Group, IndentedBlock, Iterable, Keyword, LineEnd, LineStart, List, Literal, Match, MatchFirst, NamedTuple, NoMatch, NotAny, OneOrMore, OnlyOnce, Opt, Optional, Or, PY_3, ParseAction, ParseBaseException, ParseCondition, ParseElementEnhance, ParseException, ParseExpression, ParseFailAction, ParseFatalException, ParseImplReturnType, ParseResults, ParseSyntaxException, ParserElement, Path, PositionToken, PostParseReturnType, PrecededBy, QuotedString, RLock, RecursiveGrammarException, Regex, Sequence, Set, SkipTo, StringEnd, StringStart, Suppress, Tag, TextIO, Token, TokenConverter, Tuple, Union, White, Word, WordEnd, WordStart, ZeroOrMore, _FifoCache, _LRUMemo, _MAX_INT, _MultipleMatch, _NullToken, _ParseResultsWithOffset, _PendingSkip, _RePattern, _SingleCharLiteral, _UnboundedCache, _UnboundedMemo, _bslash, _charRange, _collapse_string_to_ranges, _default_exception_debug_action, _default_start_debug_action, _default_success_debug_action, _escape_regex_range_chars, _escapedHexChar, _escapedOctChar, _escapedPunc, _flatten, _generatorType, _reBracketExpr, _should_enable_warnings, _singleChar, _single_arg_builtins, _trim_arity, _trim_arity_call_line, abstractmethod, alphanums, alphas, alphas8bit, cached_property, cast, col, conditionAsParseAction, condition_as_parse_action, copy, dblQuotedString, dbl_quoted_string, deque, disable_diag, empty, enable_all_warnings, enable_diag, hexnums, identbodychars, identchars, itemgetter, line, lineEnd, lineStart, line_end, line_start, lineno, matchOnlyAtCol, match_only_at_col, nullDebugAction, null_debug_action, nums, os, ppu, printables, punc8bit, py_str, pyparsing_unicode, python_quoted_string, quotedString, quoted_string, re, removeQuotes, remove_quotes, replaceWith, replace_with, replaced_by_pep8, sglQuotedString, sgl_quoted_string, srange, str_type, string, stringEnd, stringStart, string_end, string_start, sys, system_version, tokenMap, token_map, traceParseAction, trace_parse_action, traceback, types, typing, unicodeString, unicode_string, warnings, withAttribute, withClass, with_attribute, with_class, wraps)  # type: ignore[misc, assignment]             # <<<<<<<<<<<<<<
 * from .core import _builtin_exprs as core_builtin_exprs
 * from .helpers import _builtin_exprs as helper_builtin_exprs
 */
  __pyx_t_2 = PyList_New(184); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Located);
  __Pyx_GIVEREF(__pyx_n_s_Located);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Located);
  __Pyx_INCREF(__pyx_n_s_ABC);
  __Pyx_GIVEREF(__pyx_n_s_ABC);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_ABC);
  __Pyx_INCREF(__pyx_n_s_And);
  __Pyx_GIVEREF(__pyx_n_s_And);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_And);
  __Pyx_INCREF(__pyx_n_s_Any);
  __Pyx_GIVEREF(__pyx_n_s_Any);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Any);
  __Pyx_INCREF(__pyx_n_s_AtLineStart);
  __Pyx_GIVEREF(__pyx_n_s_AtLineStart);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_AtLineStart);
  __Pyx_INCREF(__pyx_n_s_AtStringStart);
  __Pyx_GIVEREF(__pyx_n_s_AtStringStart);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_AtStringStart);
  __Pyx_INCREF(__pyx_n_s_Callable);
  __Pyx_GIVEREF(__pyx_n_s_Callable);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_Callable);
  __Pyx_INCREF(__pyx_n_s_CaselessKeyword);
  __Pyx_GIVEREF(__pyx_n_s_CaselessKeyword);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_CaselessKeyword);
  __Pyx_INCREF(__pyx_n_s_CaselessLiteral);
  __Pyx_GIVEREF(__pyx_n_s_CaselessLiteral);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_CaselessLiteral);
  __Pyx_INCREF(__pyx_n_s_Char);
  __Pyx_GIVEREF(__pyx_n_s_Char);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_Char);
  __Pyx_INCREF(__pyx_n_s_CharsNotIn);
  __Pyx_GIVEREF(__pyx_n_s_CharsNotIn);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_CharsNotIn);
  __Pyx_INCREF(__pyx_n_s_CloseMatch);
  __Pyx_GIVEREF(__pyx_n_s_CloseMatch);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_CloseMatch);
  __Pyx_INCREF(__pyx_n_s_Combine);
  __Pyx_GIVEREF(__pyx_n_s_Combine);
  PyList_SET_ITEM(__pyx_t_2, 12, __pyx_n_s_Combine);
  __Pyx_INCREF(__pyx_n_s_DebugExceptionAction);
  __Pyx_GIVEREF(__pyx_n_s_DebugExceptionAction);
  PyList_SET_ITEM(__pyx_t_2, 13, __pyx_n_s_DebugExceptionAction);
  __Pyx_INCREF(__pyx_n_s_DebugStartAction);
  __Pyx_GIVEREF(__pyx_n_s_DebugStartAction);
  PyList_SET_ITEM(__pyx_t_2, 14, __pyx_n_s_DebugStartAction);
  __Pyx_INCREF(__pyx_n_s_DebugSuccessAction);
  __Pyx_GIVEREF(__pyx_n_s_DebugSuccessAction);
  PyList_SET_ITEM(__pyx_t_2, 15, __pyx_n_s_DebugSuccessAction);
  __Pyx_INCREF(__pyx_n_s_DelimitedList);
  __Pyx_GIVEREF(__pyx_n_s_DelimitedList);
  PyList_SET_ITEM(__pyx_t_2, 16, __pyx_n_s_DelimitedList);
  __Pyx_INCREF(__pyx_n_s_Diagnostics);
  __Pyx_GIVEREF(__pyx_n_s_Diagnostics);
  PyList_SET_ITEM(__pyx_t_2, 17, __pyx_n_s_Diagnostics);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_2, 18, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_Each);
  __Pyx_GIVEREF(__pyx_n_s_Each);
  PyList_SET_ITEM(__pyx_t_2, 19, __pyx_n_s_Each);
  __Pyx_INCREF(__pyx_n_s_Empty);
  __Pyx_GIVEREF(__pyx_n_s_Empty);
  PyList_SET_ITEM(__pyx_t_2, 20, __pyx_n_s_Empty);
  __Pyx_INCREF(__pyx_n_s_Enum);
  __Pyx_GIVEREF(__pyx_n_s_Enum);
  PyList_SET_ITEM(__pyx_t_2, 21, __pyx_n_s_Enum);
  __Pyx_INCREF(__pyx_n_s_FollowedBy);
  __Pyx_GIVEREF(__pyx_n_s_FollowedBy);
  PyList_SET_ITEM(__pyx_t_2, 22, __pyx_n_s_FollowedBy);
  __Pyx_INCREF(__pyx_n_s_Forward);
  __Pyx_GIVEREF(__pyx_n_s_Forward);
  PyList_SET_ITEM(__pyx_t_2, 23, __pyx_n_s_Forward);
  __Pyx_INCREF(__pyx_n_s_Generator);
  __Pyx_GIVEREF(__pyx_n_s_Generator);
  PyList_SET_ITEM(__pyx_t_2, 24, __pyx_n_s_Generator);
  __Pyx_INCREF(__pyx_n_s_GoToColumn);
  __Pyx_GIVEREF(__pyx_n_s_GoToColumn);
  PyList_SET_ITEM(__pyx_t_2, 25, __pyx_n_s_GoToColumn);
  __Pyx_INCREF(__pyx_n_s_Group);
  __Pyx_GIVEREF(__pyx_n_s_Group);
  PyList_SET_ITEM(__pyx_t_2, 26, __pyx_n_s_Group);
  __Pyx_INCREF(__pyx_n_s_IndentedBlock);
  __Pyx_GIVEREF(__pyx_n_s_IndentedBlock);
  PyList_SET_ITEM(__pyx_t_2, 27, __pyx_n_s_IndentedBlock);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_2, 28, __pyx_n_s_Iterable);
  __Pyx_INCREF(__pyx_n_s_Keyword);
  __Pyx_GIVEREF(__pyx_n_s_Keyword);
  PyList_SET_ITEM(__pyx_t_2, 29, __pyx_n_s_Keyword);
  __Pyx_INCREF(__pyx_n_s_LineEnd);
  __Pyx_GIVEREF(__pyx_n_s_LineEnd);
  PyList_SET_ITEM(__pyx_t_2, 30, __pyx_n_s_LineEnd);
  __Pyx_INCREF(__pyx_n_s_LineStart);
  __Pyx_GIVEREF(__pyx_n_s_LineStart);
  PyList_SET_ITEM(__pyx_t_2, 31, __pyx_n_s_LineStart);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 32, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Literal);
  __Pyx_GIVEREF(__pyx_n_s_Literal);
  PyList_SET_ITEM(__pyx_t_2, 33, __pyx_n_s_Literal);
  __Pyx_INCREF(__pyx_n_s_Match);
  __Pyx_GIVEREF(__pyx_n_s_Match);
  PyList_SET_ITEM(__pyx_t_2, 34, __pyx_n_s_Match);
  __Pyx_INCREF(__pyx_n_s_MatchFirst);
  __Pyx_GIVEREF(__pyx_n_s_MatchFirst);
  PyList_SET_ITEM(__pyx_t_2, 35, __pyx_n_s_MatchFirst);
  __Pyx_INCREF(__pyx_n_s_NamedTuple);
  __Pyx_GIVEREF(__pyx_n_s_NamedTuple);
  PyList_SET_ITEM(__pyx_t_2, 36, __pyx_n_s_NamedTuple);
  __Pyx_INCREF(__pyx_n_s_NoMatch);
  __Pyx_GIVEREF(__pyx_n_s_NoMatch);
  PyList_SET_ITEM(__pyx_t_2, 37, __pyx_n_s_NoMatch);
  __Pyx_INCREF(__pyx_n_s_NotAny);
  __Pyx_GIVEREF(__pyx_n_s_NotAny);
  PyList_SET_ITEM(__pyx_t_2, 38, __pyx_n_s_NotAny);
  __Pyx_INCREF(__pyx_n_s_OneOrMore);
  __Pyx_GIVEREF(__pyx_n_s_OneOrMore);
  PyList_SET_ITEM(__pyx_t_2, 39, __pyx_n_s_OneOrMore);
  __Pyx_INCREF(__pyx_n_s_OnlyOnce);
  __Pyx_GIVEREF(__pyx_n_s_OnlyOnce);
  PyList_SET_ITEM(__pyx_t_2, 40, __pyx_n_s_OnlyOnce);
  __Pyx_INCREF(__pyx_n_s_Opt);
  __Pyx_GIVEREF(__pyx_n_s_Opt);
  PyList_SET_ITEM(__pyx_t_2, 41, __pyx_n_s_Opt);
  __Pyx_INCREF(__pyx_n_s_Optional);
  __Pyx_GIVEREF(__pyx_n_s_Optional);
  PyList_SET_ITEM(__pyx_t_2, 42, __pyx_n_s_Optional);
  __Pyx_INCREF(__pyx_n_s_Or);
  __Pyx_GIVEREF(__pyx_n_s_Or);
  PyList_SET_ITEM(__pyx_t_2, 43, __pyx_n_s_Or);
  __Pyx_INCREF(__pyx_n_s_PY_3);
  __Pyx_GIVEREF(__pyx_n_s_PY_3);
  PyList_SET_ITEM(__pyx_t_2, 44, __pyx_n_s_PY_3);
  __Pyx_INCREF(__pyx_n_s_ParseAction);
  __Pyx_GIVEREF(__pyx_n_s_ParseAction);
  PyList_SET_ITEM(__pyx_t_2, 45, __pyx_n_s_ParseAction);
  __Pyx_INCREF(__pyx_n_s_ParseBaseException);
  __Pyx_GIVEREF(__pyx_n_s_ParseBaseException);
  PyList_SET_ITEM(__pyx_t_2, 46, __pyx_n_s_ParseBaseException);
  __Pyx_INCREF(__pyx_n_s_ParseCondition);
  __Pyx_GIVEREF(__pyx_n_s_ParseCondition);
  PyList_SET_ITEM(__pyx_t_2, 47, __pyx_n_s_ParseCondition);
  __Pyx_INCREF(__pyx_n_s_ParseElementEnhance);
  __Pyx_GIVEREF(__pyx_n_s_ParseElementEnhance);
  PyList_SET_ITEM(__pyx_t_2, 48, __pyx_n_s_ParseElementEnhance);
  __Pyx_INCREF(__pyx_n_s_ParseException);
  __Pyx_GIVEREF(__pyx_n_s_ParseException);
  PyList_SET_ITEM(__pyx_t_2, 49, __pyx_n_s_ParseException);
  __Pyx_INCREF(__pyx_n_s_ParseExpression);
  __Pyx_GIVEREF(__pyx_n_s_ParseExpression);
  PyList_SET_ITEM(__pyx_t_2, 50, __pyx_n_s_ParseExpression);
  __Pyx_INCREF(__pyx_n_s_ParseFailAction);
  __Pyx_GIVEREF(__pyx_n_s_ParseFailAction);
  PyList_SET_ITEM(__pyx_t_2, 51, __pyx_n_s_ParseFailAction);
  __Pyx_INCREF(__pyx_n_s_ParseFatalException);
  __Pyx_GIVEREF(__pyx_n_s_ParseFatalException);
  PyList_SET_ITEM(__pyx_t_2, 52, __pyx_n_s_ParseFatalException);
  __Pyx_INCREF(__pyx_n_s_ParseImplReturnType);
  __Pyx_GIVEREF(__pyx_n_s_ParseImplReturnType);
  PyList_SET_ITEM(__pyx_t_2, 53, __pyx_n_s_ParseImplReturnType);
  __Pyx_INCREF(__pyx_n_s_ParseResults);
  __Pyx_GIVEREF(__pyx_n_s_ParseResults);
  PyList_SET_ITEM(__pyx_t_2, 54, __pyx_n_s_ParseResults);
  __Pyx_INCREF(__pyx_n_s_ParseSyntaxException);
  __Pyx_GIVEREF(__pyx_n_s_ParseSyntaxException);
  PyList_SET_ITEM(__pyx_t_2, 55, __pyx_n_s_ParseSyntaxException);
  __Pyx_INCREF(__pyx_n_s_ParserElement);
  __Pyx_GIVEREF(__pyx_n_s_ParserElement);
  PyList_SET_ITEM(__pyx_t_2, 56, __pyx_n_s_ParserElement);
  __Pyx_INCREF(__pyx_n_s_Path);
  __Pyx_GIVEREF(__pyx_n_s_Path);
  PyList_SET_ITEM(__pyx_t_2, 57, __pyx_n_s_Path);
  __Pyx_INCREF(__pyx_n_s_PositionToken);
  __Pyx_GIVEREF(__pyx_n_s_PositionToken);
  PyList_SET_ITEM(__pyx_t_2, 58, __pyx_n_s_PositionToken);
  __Pyx_INCREF(__pyx_n_s_PostParseReturnType);
  __Pyx_GIVEREF(__pyx_n_s_PostParseReturnType);
  PyList_SET_ITEM(__pyx_t_2, 59, __pyx_n_s_PostParseReturnType);
  __Pyx_INCREF(__pyx_n_s_PrecededBy);
  __Pyx_GIVEREF(__pyx_n_s_PrecededBy);
  PyList_SET_ITEM(__pyx_t_2, 60, __pyx_n_s_PrecededBy);
  __Pyx_INCREF(__pyx_n_s_QuotedString);
  __Pyx_GIVEREF(__pyx_n_s_QuotedString);
  PyList_SET_ITEM(__pyx_t_2, 61, __pyx_n_s_QuotedString);
  __Pyx_INCREF(__pyx_n_s_RLock);
  __Pyx_GIVEREF(__pyx_n_s_RLock);
  PyList_SET_ITEM(__pyx_t_2, 62, __pyx_n_s_RLock);
  __Pyx_INCREF(__pyx_n_s_RecursiveGrammarException);
  __Pyx_GIVEREF(__pyx_n_s_RecursiveGrammarException);
  PyList_SET_ITEM(__pyx_t_2, 63, __pyx_n_s_RecursiveGrammarException);
  __Pyx_INCREF(__pyx_n_s_Regex);
  __Pyx_GIVEREF(__pyx_n_s_Regex);
  PyList_SET_ITEM(__pyx_t_2, 64, __pyx_n_s_Regex);
  __Pyx_INCREF(__pyx_n_s_Sequence);
  __Pyx_GIVEREF(__pyx_n_s_Sequence);
  PyList_SET_ITEM(__pyx_t_2, 65, __pyx_n_s_Sequence);
  __Pyx_INCREF(__pyx_n_s_Set);
  __Pyx_GIVEREF(__pyx_n_s_Set);
  PyList_SET_ITEM(__pyx_t_2, 66, __pyx_n_s_Set);
  __Pyx_INCREF(__pyx_n_s_SkipTo);
  __Pyx_GIVEREF(__pyx_n_s_SkipTo);
  PyList_SET_ITEM(__pyx_t_2, 67, __pyx_n_s_SkipTo);
  __Pyx_INCREF(__pyx_n_s_StringEnd);
  __Pyx_GIVEREF(__pyx_n_s_StringEnd);
  PyList_SET_ITEM(__pyx_t_2, 68, __pyx_n_s_StringEnd);
  __Pyx_INCREF(__pyx_n_s_StringStart);
  __Pyx_GIVEREF(__pyx_n_s_StringStart);
  PyList_SET_ITEM(__pyx_t_2, 69, __pyx_n_s_StringStart);
  __Pyx_INCREF(__pyx_n_s_Suppress);
  __Pyx_GIVEREF(__pyx_n_s_Suppress);
  PyList_SET_ITEM(__pyx_t_2, 70, __pyx_n_s_Suppress);
  __Pyx_INCREF(__pyx_n_s_Tag);
  __Pyx_GIVEREF(__pyx_n_s_Tag);
  PyList_SET_ITEM(__pyx_t_2, 71, __pyx_n_s_Tag);
  __Pyx_INCREF(__pyx_n_s_TextIO);
  __Pyx_GIVEREF(__pyx_n_s_TextIO);
  PyList_SET_ITEM(__pyx_t_2, 72, __pyx_n_s_TextIO);
  __Pyx_INCREF(__pyx_n_s_Token);
  __Pyx_GIVEREF(__pyx_n_s_Token);
  PyList_SET_ITEM(__pyx_t_2, 73, __pyx_n_s_Token);
  __Pyx_INCREF(__pyx_n_s_TokenConverter);
  __Pyx_GIVEREF(__pyx_n_s_TokenConverter);
  PyList_SET_ITEM(__pyx_t_2, 74, __pyx_n_s_TokenConverter);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_2, 75, __pyx_n_s_Tuple);
  __Pyx_INCREF(__pyx_n_s_Union);
  __Pyx_GIVEREF(__pyx_n_s_Union);
  PyList_SET_ITEM(__pyx_t_2, 76, __pyx_n_s_Union);
  __Pyx_INCREF(__pyx_n_s_White);
  __Pyx_GIVEREF(__pyx_n_s_White);
  PyList_SET_ITEM(__pyx_t_2, 77, __pyx_n_s_White);
  __Pyx_INCREF(__pyx_n_s_Word);
  __Pyx_GIVEREF(__pyx_n_s_Word);
  PyList_SET_ITEM(__pyx_t_2, 78, __pyx_n_s_Word);
  __Pyx_INCREF(__pyx_n_s_WordEnd);
  __Pyx_GIVEREF(__pyx_n_s_WordEnd);
  PyList_SET_ITEM(__pyx_t_2, 79, __pyx_n_s_WordEnd);
  __Pyx_INCREF(__pyx_n_s_WordStart);
  __Pyx_GIVEREF(__pyx_n_s_WordStart);
  PyList_SET_ITEM(__pyx_t_2, 80, __pyx_n_s_WordStart);
  __Pyx_INCREF(__pyx_n_s_ZeroOrMore);
  __Pyx_GIVEREF(__pyx_n_s_ZeroOrMore);
  PyList_SET_ITEM(__pyx_t_2, 81, __pyx_n_s_ZeroOrMore);
  __Pyx_INCREF(__pyx_n_s_FifoCache);
  __Pyx_GIVEREF(__pyx_n_s_FifoCache);
  PyList_SET_ITEM(__pyx_t_2, 82, __pyx_n_s_FifoCache);
  __Pyx_INCREF(__pyx_n_s_LRUMemo_2);
  __Pyx_GIVEREF(__pyx_n_s_LRUMemo_2);
  PyList_SET_ITEM(__pyx_t_2, 83, __pyx_n_s_LRUMemo_2);
  __Pyx_INCREF(__pyx_n_s_MAX_INT);
  __Pyx_GIVEREF(__pyx_n_s_MAX_INT);
  PyList_SET_ITEM(__pyx_t_2, 84, __pyx_n_s_MAX_INT);
  __Pyx_INCREF(__pyx_n_s_MultipleMatch);
  __Pyx_GIVEREF(__pyx_n_s_MultipleMatch);
  PyList_SET_ITEM(__pyx_t_2, 85, __pyx_n_s_MultipleMatch);
  __Pyx_INCREF(__pyx_n_s_NullToken);
  __Pyx_GIVEREF(__pyx_n_s_NullToken);
  PyList_SET_ITEM(__pyx_t_2, 86, __pyx_n_s_NullToken);
  __Pyx_INCREF(__pyx_n_s_ParseResultsWithOffset);
  __Pyx_GIVEREF(__pyx_n_s_ParseResultsWithOffset);
  PyList_SET_ITEM(__pyx_t_2, 87, __pyx_n_s_ParseResultsWithOffset);
  __Pyx_INCREF(__pyx_n_s_PendingSkip);
  __Pyx_GIVEREF(__pyx_n_s_PendingSkip);
  PyList_SET_ITEM(__pyx_t_2, 88, __pyx_n_s_PendingSkip);
  __Pyx_INCREF(__pyx_n_s_RePattern);
  __Pyx_GIVEREF(__pyx_n_s_RePattern);
  PyList_SET_ITEM(__pyx_t_2, 89, __pyx_n_s_RePattern);
  __Pyx_INCREF(__pyx_n_s_SingleCharLiteral);
  __Pyx_GIVEREF(__pyx_n_s_SingleCharLiteral);
  PyList_SET_ITEM(__pyx_t_2, 90, __pyx_n_s_SingleCharLiteral);
  __Pyx_INCREF(__pyx_n_s_UnboundedCache);
  __Pyx_GIVEREF(__pyx_n_s_UnboundedCache);
  PyList_SET_ITEM(__pyx_t_2, 91, __pyx_n_s_UnboundedCache);
  __Pyx_INCREF(__pyx_n_s_UnboundedMemo_2);
  __Pyx_GIVEREF(__pyx_n_s_UnboundedMemo_2);
  PyList_SET_ITEM(__pyx_t_2, 92, __pyx_n_s_UnboundedMemo_2);
  __Pyx_INCREF(__pyx_n_s_bslash);
  __Pyx_GIVEREF(__pyx_n_s_bslash);
  PyList_SET_ITEM(__pyx_t_2, 93, __pyx_n_s_bslash);
  __Pyx_INCREF(__pyx_n_s_charRange);
  __Pyx_GIVEREF(__pyx_n_s_charRange);
  PyList_SET_ITEM(__pyx_t_2, 94, __pyx_n_s_charRange);
  __Pyx_INCREF(__pyx_n_s_collapse_string_to_ranges);
  __Pyx_GIVEREF(__pyx_n_s_collapse_string_to_ranges);
  PyList_SET_ITEM(__pyx_t_2, 95, __pyx_n_s_collapse_string_to_ranges);
  __Pyx_INCREF(__pyx_n_s_default_exception_debug_action);
  __Pyx_GIVEREF(__pyx_n_s_default_exception_debug_action);
  PyList_SET_ITEM(__pyx_t_2, 96, __pyx_n_s_default_exception_debug_action);
  __Pyx_INCREF(__pyx_n_s_default_start_debug_action);
  __Pyx_GIVEREF(__pyx_n_s_default_start_debug_action);
  PyList_SET_ITEM(__pyx_t_2, 97, __pyx_n_s_default_start_debug_action);
  __Pyx_INCREF(__pyx_n_s_default_success_debug_action);
  __Pyx_GIVEREF(__pyx_n_s_default_success_debug_action);
  PyList_SET_ITEM(__pyx_t_2, 98, __pyx_n_s_default_success_debug_action);
  __Pyx_INCREF(__pyx_n_s_escape_regex_range_chars);
  __Pyx_GIVEREF(__pyx_n_s_escape_regex_range_chars);
  PyList_SET_ITEM(__pyx_t_2, 99, __pyx_n_s_escape_regex_range_chars);
  __Pyx_INCREF(__pyx_n_s_escapedHexChar);
  __Pyx_GIVEREF(__pyx_n_s_escapedHexChar);
  PyList_SET_ITEM(__pyx_t_2, 100, __pyx_n_s_escapedHexChar);
  __Pyx_INCREF(__pyx_n_s_escapedOctChar);
  __Pyx_GIVEREF(__pyx_n_s_escapedOctChar);
  PyList_SET_ITEM(__pyx_t_2, 101, __pyx_n_s_escapedOctChar);
  __Pyx_INCREF(__pyx_n_s_escapedPunc);
  __Pyx_GIVEREF(__pyx_n_s_escapedPunc);
  PyList_SET_ITEM(__pyx_t_2, 102, __pyx_n_s_escapedPunc);
  __Pyx_INCREF(__pyx_n_s_flatten);
  __Pyx_GIVEREF(__pyx_n_s_flatten);
  PyList_SET_ITEM(__pyx_t_2, 103, __pyx_n_s_flatten);
  __Pyx_INCREF(__pyx_n_s_generatorType);
  __Pyx_GIVEREF(__pyx_n_s_generatorType);
  PyList_SET_ITEM(__pyx_t_2, 104, __pyx_n_s_generatorType);
  __Pyx_INCREF(__pyx_n_s_reBracketExpr);
  __Pyx_GIVEREF(__pyx_n_s_reBracketExpr);
  PyList_SET_ITEM(__pyx_t_2, 105, __pyx_n_s_reBracketExpr);
  __Pyx_INCREF(__pyx_n_s_should_enable_warnings);
  __Pyx_GIVEREF(__pyx_n_s_should_enable_warnings);
  PyList_SET_ITEM(__pyx_t_2, 106, __pyx_n_s_should_enable_warnings);
  __Pyx_INCREF(__pyx_n_s_singleChar);
  __Pyx_GIVEREF(__pyx_n_s_singleChar);
  PyList_SET_ITEM(__pyx_t_2, 107, __pyx_n_s_singleChar);
  __Pyx_INCREF(__pyx_n_s_single_arg_builtins);
  __Pyx_GIVEREF(__pyx_n_s_single_arg_builtins);
  PyList_SET_ITEM(__pyx_t_2, 108, __pyx_n_s_single_arg_builtins);
  __Pyx_INCREF(__pyx_n_s_trim_arity);
  __Pyx_GIVEREF(__pyx_n_s_trim_arity);
  PyList_SET_ITEM(__pyx_t_2, 109, __pyx_n_s_trim_arity);
  __Pyx_INCREF(__pyx_n_s_trim_arity_call_line);
  __Pyx_GIVEREF(__pyx_n_s_trim_arity_call_line);
  PyList_SET_ITEM(__pyx_t_2, 110, __pyx_n_s_trim_arity_call_line);
  __Pyx_INCREF(__pyx_n_s_abstractmethod);
  __Pyx_GIVEREF(__pyx_n_s_abstractmethod);
  PyList_SET_ITEM(__pyx_t_2, 111, __pyx_n_s_abstractmethod);
  __Pyx_INCREF(__pyx_n_s_alphanums);
  __Pyx_GIVEREF(__pyx_n_s_alphanums);
  PyList_SET_ITEM(__pyx_t_2, 112, __pyx_n_s_alphanums);
  __Pyx_INCREF(__pyx_n_s_alphas);
  __Pyx_GIVEREF(__pyx_n_s_alphas);
  PyList_SET_ITEM(__pyx_t_2, 113, __pyx_n_s_alphas);
  __Pyx_INCREF(__pyx_n_s_alphas8bit);
  __Pyx_GIVEREF(__pyx_n_s_alphas8bit);
  PyList_SET_ITEM(__pyx_t_2, 114, __pyx_n_s_alphas8bit);
  __Pyx_INCREF(__pyx_n_s_cached_property);
  __Pyx_GIVEREF(__pyx_n_s_cached_property);
  PyList_SET_ITEM(__pyx_t_2, 115, __pyx_n_s_cached_property);
  __Pyx_INCREF(__pyx_n_s_cast);
  __Pyx_GIVEREF(__pyx_n_s_cast);
  PyList_SET_ITEM(__pyx_t_2, 116, __pyx_n_s_cast);
  __Pyx_INCREF(__pyx_n_s_col);
  __Pyx_GIVEREF(__pyx_n_s_col);
  PyList_SET_ITEM(__pyx_t_2, 117, __pyx_n_s_col);
  __Pyx_INCREF(__pyx_n_s_conditionAsParseAction);
  __Pyx_GIVEREF(__pyx_n_s_conditionAsParseAction);
  PyList_SET_ITEM(__pyx_t_2, 118, __pyx_n_s_conditionAsParseAction);
  __Pyx_INCREF(__pyx_n_s_condition_as_parse_action);
  __Pyx_GIVEREF(__pyx_n_s_condition_as_parse_action);
  PyList_SET_ITEM(__pyx_t_2, 119, __pyx_n_s_condition_as_parse_action);
  __Pyx_INCREF(__pyx_n_s_copy);
  __Pyx_GIVEREF(__pyx_n_s_copy);
  PyList_SET_ITEM(__pyx_t_2, 120, __pyx_n_s_copy);
  __Pyx_INCREF(__pyx_n_s_dblQuotedString);
  __Pyx_GIVEREF(__pyx_n_s_dblQuotedString);
  PyList_SET_ITEM(__pyx_t_2, 121, __pyx_n_s_dblQuotedString);
  __Pyx_INCREF(__pyx_n_s_dbl_quoted_string);
  __Pyx_GIVEREF(__pyx_n_s_dbl_quoted_string);
  PyList_SET_ITEM(__pyx_t_2, 122, __pyx_n_s_dbl_quoted_string);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_2, 123, __pyx_n_s_deque);
  __Pyx_INCREF(__pyx_n_s_disable_diag);
  __Pyx_GIVEREF(__pyx_n_s_disable_diag);
  PyList_SET_ITEM(__pyx_t_2, 124, __pyx_n_s_disable_diag);
  __Pyx_INCREF(__pyx_n_s_empty);
  __Pyx_GIVEREF(__pyx_n_s_empty);
  PyList_SET_ITEM(__pyx_t_2, 125, __pyx_n_s_empty);
  __Pyx_INCREF(__pyx_n_s_enable_all_warnings);
  __Pyx_GIVEREF(__pyx_n_s_enable_all_warnings);
  PyList_SET_ITEM(__pyx_t_2, 126, __pyx_n_s_enable_all_warnings);
  __Pyx_INCREF(__pyx_n_s_enable_diag);
  __Pyx_GIVEREF(__pyx_n_s_enable_diag);
  PyList_SET_ITEM(__pyx_t_2, 127, __pyx_n_s_enable_diag);
  __Pyx_INCREF(__pyx_n_s_hexnums);
  __Pyx_GIVEREF(__pyx_n_s_hexnums);
  PyList_SET_ITEM(__pyx_t_2, 128, __pyx_n_s_hexnums);
  __Pyx_INCREF(__pyx_n_s_identbodychars);
  __Pyx_GIVEREF(__pyx_n_s_identbodychars);
  PyList_SET_ITEM(__pyx_t_2, 129, __pyx_n_s_identbodychars);
  __Pyx_INCREF(__pyx_n_s_identchars);
  __Pyx_GIVEREF(__pyx_n_s_identchars);
  PyList_SET_ITEM(__pyx_t_2, 130, __pyx_n_s_identchars);
  __Pyx_INCREF(__pyx_n_s_itemgetter);
  __Pyx_GIVEREF(__pyx_n_s_itemgetter);
  PyList_SET_ITEM(__pyx_t_2, 131, __pyx_n_s_itemgetter);
  __Pyx_INCREF(__pyx_n_s_line);
  __Pyx_GIVEREF(__pyx_n_s_line);
  PyList_SET_ITEM(__pyx_t_2, 132, __pyx_n_s_line);
  __Pyx_INCREF(__pyx_n_s_lineEnd);
  __Pyx_GIVEREF(__pyx_n_s_lineEnd);
  PyList_SET_ITEM(__pyx_t_2, 133, __pyx_n_s_lineEnd);
  __Pyx_INCREF(__pyx_n_s_lineStart);
  __Pyx_GIVEREF(__pyx_n_s_lineStart);
  PyList_SET_ITEM(__pyx_t_2, 134, __pyx_n_s_lineStart);
  __Pyx_INCREF(__pyx_n_s_line_end);
  __Pyx_GIVEREF(__pyx_n_s_line_end);
  PyList_SET_ITEM(__pyx_t_2, 135, __pyx_n_s_line_end);
  __Pyx_INCREF(__pyx_n_s_line_start);
  __Pyx_GIVEREF(__pyx_n_s_line_start);
  PyList_SET_ITEM(__pyx_t_2, 136, __pyx_n_s_line_start);
  __Pyx_INCREF(__pyx_n_s_lineno);
  __Pyx_GIVEREF(__pyx_n_s_lineno);
  PyList_SET_ITEM(__pyx_t_2, 137, __pyx_n_s_lineno);
  __Pyx_INCREF(__pyx_n_s_matchOnlyAtCol);
  __Pyx_GIVEREF(__pyx_n_s_matchOnlyAtCol);
  PyList_SET_ITEM(__pyx_t_2, 138, __pyx_n_s_matchOnlyAtCol);
  __Pyx_INCREF(__pyx_n_s_match_only_at_col);
  __Pyx_GIVEREF(__pyx_n_s_match_only_at_col);
  PyList_SET_ITEM(__pyx_t_2, 139, __pyx_n_s_match_only_at_col);
  __Pyx_INCREF(__pyx_n_s_nullDebugAction);
  __Pyx_GIVEREF(__pyx_n_s_nullDebugAction);
  PyList_SET_ITEM(__pyx_t_2, 140, __pyx_n_s_nullDebugAction);
  __Pyx_INCREF(__pyx_n_s_null_debug_action);
  __Pyx_GIVEREF(__pyx_n_s_null_debug_action);
  PyList_SET_ITEM(__pyx_t_2, 141, __pyx_n_s_null_debug_action);
  __Pyx_INCREF(__pyx_n_s_nums);
  __Pyx_GIVEREF(__pyx_n_s_nums);
  PyList_SET_ITEM(__pyx_t_2, 142, __pyx_n_s_nums);
  __Pyx_INCREF(__pyx_n_s_os);
  __Pyx_GIVEREF(__pyx_n_s_os);
  PyList_SET_ITEM(__pyx_t_2, 143, __pyx_n_s_os);
  __Pyx_INCREF(__pyx_n_s_ppu);
  __Pyx_GIVEREF(__pyx_n_s_ppu);
  PyList_SET_ITEM(__pyx_t_2, 144, __pyx_n_s_ppu);
  __Pyx_INCREF(__pyx_n_s_printables);
  __Pyx_GIVEREF(__pyx_n_s_printables);
  PyList_SET_ITEM(__pyx_t_2, 145, __pyx_n_s_printables);
  __Pyx_INCREF(__pyx_n_s_punc8bit);
  __Pyx_GIVEREF(__pyx_n_s_punc8bit);
  PyList_SET_ITEM(__pyx_t_2, 146, __pyx_n_s_punc8bit);
  __Pyx_INCREF(__pyx_n_s_py_str);
  __Pyx_GIVEREF(__pyx_n_s_py_str);
  PyList_SET_ITEM(__pyx_t_2, 147, __pyx_n_s_py_str);
  __Pyx_INCREF(__pyx_n_s_pyparsing_unicode);
  __Pyx_GIVEREF(__pyx_n_s_pyparsing_unicode);
  PyList_SET_ITEM(__pyx_t_2, 148, __pyx_n_s_pyparsing_unicode);
  __Pyx_INCREF(__pyx_n_s_python_quoted_string);
  __Pyx_GIVEREF(__pyx_n_s_python_quoted_string);
  PyList_SET_ITEM(__pyx_t_2, 149, __pyx_n_s_python_quoted_string);
  __Pyx_INCREF(__pyx_n_s_quotedString);
  __Pyx_GIVEREF(__pyx_n_s_quotedString);
  PyList_SET_ITEM(__pyx_t_2, 150, __pyx_n_s_quotedString);
  __Pyx_INCREF(__pyx_n_s_quoted_string);
  __Pyx_GIVEREF(__pyx_n_s_quoted_string);
  PyList_SET_ITEM(__pyx_t_2, 151, __pyx_n_s_quoted_string);
  __Pyx_INCREF(__pyx_n_s_re);
  __Pyx_GIVEREF(__pyx_n_s_re);
  PyList_SET_ITEM(__pyx_t_2, 152, __pyx_n_s_re);
  __Pyx_INCREF(__pyx_n_s_removeQuotes);
  __Pyx_GIVEREF(__pyx_n_s_removeQuotes);
  PyList_SET_ITEM(__pyx_t_2, 153, __pyx_n_s_removeQuotes);
  __Pyx_INCREF(__pyx_n_s_remove_quotes);
  __Pyx_GIVEREF(__pyx_n_s_remove_quotes);
  PyList_SET_ITEM(__pyx_t_2, 154, __pyx_n_s_remove_quotes);
  __Pyx_INCREF(__pyx_n_s_replaceWith);
  __Pyx_GIVEREF(__pyx_n_s_replaceWith);
  PyList_SET_ITEM(__pyx_t_2, 155, __pyx_n_s_replaceWith);
  __Pyx_INCREF(__pyx_n_s_replace_with);
  __Pyx_GIVEREF(__pyx_n_s_replace_with);
  PyList_SET_ITEM(__pyx_t_2, 156, __pyx_n_s_replace_with);
  __Pyx_INCREF(__pyx_n_s_replaced_by_pep8);
  __Pyx_GIVEREF(__pyx_n_s_replaced_by_pep8);
  PyList_SET_ITEM(__pyx_t_2, 157, __pyx_n_s_replaced_by_pep8);
  __Pyx_INCREF(__pyx_n_s_sglQuotedString);
  __Pyx_GIVEREF(__pyx_n_s_sglQuotedString);
  PyList_SET_ITEM(__pyx_t_2, 158, __pyx_n_s_sglQuotedString);
  __Pyx_INCREF(__pyx_n_s_sgl_quoted_string);
  __Pyx_GIVEREF(__pyx_n_s_sgl_quoted_string);
  PyList_SET_ITEM(__pyx_t_2, 159, __pyx_n_s_sgl_quoted_string);
  __Pyx_INCREF(__pyx_n_s_srange);
  __Pyx_GIVEREF(__pyx_n_s_srange);
  PyList_SET_ITEM(__pyx_t_2, 160, __pyx_n_s_srange);
  __Pyx_INCREF(__pyx_n_s_str_type);
  __Pyx_GIVEREF(__pyx_n_s_str_type);
  PyList_SET_ITEM(__pyx_t_2, 161, __pyx_n_s_str_type);
  __Pyx_INCREF(__pyx_n_s_string);
  __Pyx_GIVEREF(__pyx_n_s_string);
  PyList_SET_ITEM(__pyx_t_2, 162, __pyx_n_s_string);
  __Pyx_INCREF(__pyx_n_s_stringEnd);
  __Pyx_GIVEREF(__pyx_n_s_stringEnd);
  PyList_SET_ITEM(__pyx_t_2, 163, __pyx_n_s_stringEnd);
  __Pyx_INCREF(__pyx_n_s_stringStart);
  __Pyx_GIVEREF(__pyx_n_s_stringStart);
  PyList_SET_ITEM(__pyx_t_2, 164, __pyx_n_s_stringStart);
  __Pyx_INCREF(__pyx_n_s_string_end);
  __Pyx_GIVEREF(__pyx_n_s_string_end);
  PyList_SET_ITEM(__pyx_t_2, 165, __pyx_n_s_string_end);
  __Pyx_INCREF(__pyx_n_s_string_start);
  __Pyx_GIVEREF(__pyx_n_s_string_start);
  PyList_SET_ITEM(__pyx_t_2, 166, __pyx_n_s_string_start);
  __Pyx_INCREF(__pyx_n_s_sys);
  __Pyx_GIVEREF(__pyx_n_s_sys);
  PyList_SET_ITEM(__pyx_t_2, 167, __pyx_n_s_sys);
  __Pyx_INCREF(__pyx_n_s_system_version);
  __Pyx_GIVEREF(__pyx_n_s_system_version);
  PyList_SET_ITEM(__pyx_t_2, 168, __pyx_n_s_system_version);
  __Pyx_INCREF(__pyx_n_s_tokenMap);
  __Pyx_GIVEREF(__pyx_n_s_tokenMap);
  PyList_SET_ITEM(__pyx_t_2, 169, __pyx_n_s_tokenMap);
  __Pyx_INCREF(__pyx_n_s_token_map);
  __Pyx_GIVEREF(__pyx_n_s_token_map);
  PyList_SET_ITEM(__pyx_t_2, 170, __pyx_n_s_token_map);
  __Pyx_INCREF(__pyx_n_s_traceParseAction);
  __Pyx_GIVEREF(__pyx_n_s_traceParseAction);
  PyList_SET_ITEM(__pyx_t_2, 171, __pyx_n_s_traceParseAction);
  __Pyx_INCREF(__pyx_n_s_trace_parse_action);
  __Pyx_GIVEREF(__pyx_n_s_trace_parse_action);
  PyList_SET_ITEM(__pyx_t_2, 172, __pyx_n_s_trace_parse_action);
  __Pyx_INCREF(__pyx_n_s_traceback);
  __Pyx_GIVEREF(__pyx_n_s_traceback);
  PyList_SET_ITEM(__pyx_t_2, 173, __pyx_n_s_traceback);
  __Pyx_INCREF(__pyx_n_s_types);
  __Pyx_GIVEREF(__pyx_n_s_types);
  PyList_SET_ITEM(__pyx_t_2, 174, __pyx_n_s_types);
  __Pyx_INCREF(__pyx_n_s_typing);
  __Pyx_GIVEREF(__pyx_n_s_typing);
  PyList_SET_ITEM(__pyx_t_2, 175, __pyx_n_s_typing);
  __Pyx_INCREF(__pyx_n_s_unicodeString);
  __Pyx_GIVEREF(__pyx_n_s_unicodeString);
  PyList_SET_ITEM(__pyx_t_2, 176, __pyx_n_s_unicodeString);
  __Pyx_INCREF(__pyx_n_s_unicode_string);
  __Pyx_GIVEREF(__pyx_n_s_unicode_string);
  PyList_SET_ITEM(__pyx_t_2, 177, __pyx_n_s_unicode_string);
  __Pyx_INCREF(__pyx_n_s_warnings);
  __Pyx_GIVEREF(__pyx_n_s_warnings);
  PyList_SET_ITEM(__pyx_t_2, 178, __pyx_n_s_warnings);
  __Pyx_INCREF(__pyx_n_s_withAttribute);
  __Pyx_GIVEREF(__pyx_n_s_withAttribute);
  PyList_SET_ITEM(__pyx_t_2, 179, __pyx_n_s_withAttribute);
  __Pyx_INCREF(__pyx_n_s_withClass);
  __Pyx_GIVEREF(__pyx_n_s_withClass);
  PyList_SET_ITEM(__pyx_t_2, 180, __pyx_n_s_withClass);
  __Pyx_INCREF(__pyx_n_s_with_attribute);
  __Pyx_GIVEREF(__pyx_n_s_with_attribute);
  PyList_SET_ITEM(__pyx_t_2, 181, __pyx_n_s_with_attribute);
  __Pyx_INCREF(__pyx_n_s_with_class);
  __Pyx_GIVEREF(__pyx_n_s_with_class);
  PyList_SET_ITEM(__pyx_t_2, 182, __pyx_n_s_with_class);
  __Pyx_INCREF(__pyx_n_s_wraps);
  __Pyx_GIVEREF(__pyx_n_s_wraps);
  PyList_SET_ITEM(__pyx_t_2, 183, __pyx_n_s_wraps);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_core, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Located); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Located, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ABC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ABC, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_And); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_And, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AtLineStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AtLineStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AtStringStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AtStringStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Callable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Callable, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CaselessKeyword); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CaselessKeyword, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CaselessLiteral); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CaselessLiteral, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Char); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Char, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CharsNotIn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CharsNotIn, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CloseMatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CloseMatch, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Combine); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Combine, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DebugExceptionAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DebugExceptionAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DebugStartAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DebugStartAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DebugSuccessAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DebugSuccessAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DelimitedList); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DelimitedList, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Diagnostics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Diagnostics, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Each); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Each, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Empty, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Enum, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FollowedBy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FollowedBy, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Forward); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Forward, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Generator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Generator, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_GoToColumn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GoToColumn, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Group); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Group, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IndentedBlock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IndentedBlock, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Keyword); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Keyword, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LineEnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LineEnd, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LineStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LineStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Literal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Literal, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Match); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Match, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MatchFirst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MatchFirst, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NamedTuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NamedTuple, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NoMatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NoMatch, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NotAny); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NotAny, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OneOrMore); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OneOrMore, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OnlyOnce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OnlyOnce, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Opt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Opt, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Optional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Optional, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Or); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Or, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PY_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_3, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseBaseException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseBaseException, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseCondition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseCondition, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseElementEnhance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseElementEnhance, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseException, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseExpression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseExpression, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseFailAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseFailAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseFatalException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseFatalException, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseImplReturnType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseImplReturnType, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseResults); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseResults, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseSyntaxException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseSyntaxException, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParserElement); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParserElement, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Path, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PositionToken); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PositionToken, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PostParseReturnType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PostParseReturnType, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PrecededBy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PrecededBy, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_QuotedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QuotedString, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RLock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RLock, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RecursiveGrammarException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RecursiveGrammarException, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Regex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Regex, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sequence, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Set, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SkipTo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SkipTo, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_StringEnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StringEnd, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_StringStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StringStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Suppress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Suppress, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Tag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tag, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TextIO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextIO, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Token); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Token, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TokenConverter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TokenConverter, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Union); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Union, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_White); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_White, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Word); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Word, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_WordEnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WordEnd, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_WordStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WordStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ZeroOrMore); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZeroOrMore, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FifoCache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FifoCache, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LRUMemo_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LRUMemo_2, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MAX_INT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAX_INT, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MultipleMatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MultipleMatch, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NullToken); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NullToken, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParseResultsWithOffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParseResultsWithOffset, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PendingSkip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PendingSkip, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RePattern); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RePattern, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SingleCharLiteral); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SingleCharLiteral, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UnboundedCache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnboundedCache, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UnboundedMemo_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnboundedMemo_2, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_bslash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bslash, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_charRange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_charRange, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_collapse_string_to_ranges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collapse_string_to_ranges, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_default_exception_debug_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_default_exception_debug_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_default_start_debug_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_default_start_debug_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_default_success_debug_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_default_success_debug_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_escape_regex_range_chars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escape_regex_range_chars, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_escapedHexChar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escapedHexChar, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_escapedOctChar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escapedOctChar, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_escapedPunc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escapedPunc, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flatten, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_generatorType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generatorType, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_reBracketExpr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reBracketExpr, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_should_enable_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_should_enable_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_singleChar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_singleChar, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_single_arg_builtins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_single_arg_builtins, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_trim_arity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trim_arity, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_trim_arity_call_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trim_arity_call_line, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_abstractmethod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_abstractmethod, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_alphanums); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_alphanums, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_alphas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_alphas, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_alphas8bit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_alphas8bit, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_cached_property); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cached_property, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_cast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cast, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_col); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_col, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_conditionAsParseAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_conditionAsParseAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_condition_as_parse_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_condition_as_parse_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_dblQuotedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dblQuotedString, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_dbl_quoted_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dbl_quoted_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_disable_diag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_disable_diag, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_empty, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_enable_all_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enable_all_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_enable_diag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enable_diag, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_hexnums); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hexnums, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_identbodychars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_identbodychars, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_identchars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_identchars, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_itemgetter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itemgetter, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_line, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_lineEnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lineEnd, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_lineStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lineStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_line_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_line_end, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_line_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_line_start, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_lineno); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lineno, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_matchOnlyAtCol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matchOnlyAtCol, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_match_only_at_col); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_match_only_at_col, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_nullDebugAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nullDebugAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_null_debug_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_null_debug_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_nums); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nums, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ppu); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ppu, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_printables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_printables, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_punc8bit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_punc8bit, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_py_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_str, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_pyparsing_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyparsing_unicode, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_python_quoted_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_python_quoted_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_quotedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_quotedString, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_quoted_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_quoted_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_removeQuotes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_removeQuotes, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_remove_quotes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_remove_quotes, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_replaceWith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replaceWith, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_replace_with); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replace_with, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_replaced_by_pep8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replaced_by_pep8, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sglQuotedString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sglQuotedString, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sgl_quoted_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sgl_quoted_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_srange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_srange, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_str_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_str_type, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_stringEnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stringEnd, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_stringStart); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stringStart, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_string_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_end, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_string_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_start, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_system_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_system_version, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_tokenMap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tokenMap, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_token_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_token_map, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_traceParseAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceParseAction, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_trace_parse_action); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trace_parse_action, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_traceback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_typing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_typing, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_unicodeString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unicodeString, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_unicode_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unicode_string, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_withAttribute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_withAttribute, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_withClass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_withClass, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_with_attribute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_with_attribute, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_with_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_with_class, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_wraps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_wraps, __pyx_t_2) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":137
 * # from .core import *
 * from .core import (Located, ABC, And, Any, AtLineStart, AtStringStart, Callable, CaselessKeyword, CaselessLiteral, Char, CharsNotIn, CloseMatch, Combine, DebugExceptionAction, DebugStartAction, DebugSuccessAction, DelimitedList, Diagnostics, Dict, Each, Empty, Enum, FollowedBy, Forward, Generator, GoToColumn, Group, IndentedBlock, Iterable, Keyword, LineEnd, LineStart, List, Literal, Match, MatchFirst, NamedTuple, NoMatch, NotAny, OneOrMore, OnlyOnce, Opt, Optional, Or, PY_3, ParseAction, ParseBaseException, ParseCondition, ParseElementEnhance, ParseException, ParseExpression, ParseFailAction, ParseFatalException, ParseImplReturnType, ParseResults, ParseSyntaxException, ParserElement, Path, PositionToken, PostParseReturnType, PrecededBy, QuotedString, RLock, RecursiveGrammarException, Regex, Sequence, Set, SkipTo, StringEnd, StringStart, Suppress, Tag, TextIO, Token, TokenConverter, Tuple, Union, White, Word, WordEnd, WordStart, ZeroOrMore, _FifoCache, _LRUMemo, _MAX_INT, _MultipleMatch, _NullToken, _ParseResultsWithOffset, _PendingSkip, _RePattern, _SingleCharLiteral, _UnboundedCache, _UnboundedMemo, _bslash, _charRange, _collapse_string_to_ranges, _default_exception_debug_action, _default_start_debug_action, _default_success_debug_action, _escape_regex_range_chars, _escapedHexChar, _escapedOctChar, _escapedPunc, _flatten, _generatorType, _reBracketExpr, _should_enable_warnings, _singleChar, _single_arg_builtins, _trim_arity, _trim_arity_call_line, abstractmethod, alphanums, alphas, alphas8bit, cached_property, cast, col, conditionAsParseAction, condition_as_parse_action, copy, dblQuotedString, dbl_quoted_string, deque, disable_diag, empty, enable_all_warnings, enable_diag, hexnums, identbodychars, identchars, itemgetter, line, lineEnd, lineStart, line_end, line_start, lineno, matchOnlyAtCol, match_only_at_col, nullDebugAction, null_debug_action, nums, os, ppu, printables, punc8bit, py_str, pyparsing_unicode, python_quoted_string, quotedString, quoted_string, re, removeQuotes, remove_quotes, replaceWith, replace_with, replaced_by_pep8, sglQuotedString, sgl_quoted_string, srange, str_type, string, stringEnd, stringStart, string_end, string_start, sys, system_version, tokenMap, token_map, traceParseAction, trace_parse_action, traceback, types, typing, unicodeString, unicode_string, warnings, withAttribute, withClass, with_attribute, with_class, wraps)  # type: ignore[misc, assignment]
 * from .core import _builtin_exprs as core_builtin_exprs             # <<<<<<<<<<<<<<
 * from .helpers import _builtin_exprs as helper_builtin_exprs
 * from .helpers import (ungroup, anyOpenTag, replace_html_entity, dict_of, html_comment, InfixNotationOperatorSpec, java_style_comment, javaStyleComment, countedArray, match_previous_expr, _htmlEntityMap, counted_array, replaceHTMLEntity, one_of, nested_expr, locatedExpr, pythonStyleComment, InfixNotationOperatorArgType, python_style_comment, common_html_entity, delimited_list, html, htmlComment, originalTextFor, dictOf, infixNotation, matchPreviousExpr, any_open_tag, matchPreviousLiteral, match_previous_literal, restOfLine, infix_notation, oneOf, cppStyleComment, makeHTMLTags, dbl_slash_comment, commonHTMLEntity, OpAssoc, _makeTags, makeXMLTags, opAssoc, any_close_tag, cpp_style_comment, indentedBlock, c_style_comment, make_xml_tags, rest_of_line, nestedExpr, make_html_tags, anyCloseTag, delimitedList, original_text_for, dblSlashComment, cStyleComment)  # type: ignore[misc, assignment]
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_builtin_exprs);
  __Pyx_GIVEREF(__pyx_n_s_builtin_exprs);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_builtin_exprs);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_core, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_builtin_exprs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_core_builtin_exprs, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":138
 * from .core import (Located, ABC, And, Any, AtLineStart, AtStringStart, Callable, CaselessKeyword, CaselessLiteral, Char, CharsNotIn, CloseMatch, Combine, DebugExceptionAction, DebugStartAction, DebugSuccessAction, DelimitedList, Diagnostics, Dict, Each, Empty, Enum, FollowedBy, Forward, Generator, GoToColumn, Group, IndentedBlock, Iterable, Keyword, LineEnd, LineStart, List, Literal, Match, MatchFirst, NamedTuple, NoMatch, NotAny, OneOrMore, OnlyOnce, Opt, Optional, Or, PY_3, ParseAction, ParseBaseException, ParseCondition, ParseElementEnhance, ParseException, ParseExpression, ParseFailAction, ParseFatalException, ParseImplReturnType, ParseResults, ParseSyntaxException, ParserElement, Path, PositionToken, PostParseReturnType, PrecededBy, QuotedString, RLock, RecursiveGrammarException, Regex, Sequence, Set, SkipTo, StringEnd, StringStart, Suppress, Tag, TextIO, Token, TokenConverter, Tuple, Union, White, Word, WordEnd, WordStart, ZeroOrMore, _FifoCache, _LRUMemo, _MAX_INT, _MultipleMatch, _NullToken, _ParseResultsWithOffset, _PendingSkip, _RePattern, _SingleCharLiteral, _UnboundedCache, _UnboundedMemo, _bslash, _charRange, _collapse_string_to_ranges, _default_exception_debug_action, _default_start_debug_action, _default_success_debug_action, _escape_regex_range_chars, _escapedHexChar, _escapedOctChar, _escapedPunc, _flatten, _generatorType, _reBracketExpr, _should_enable_warnings, _singleChar, _single_arg_builtins, _trim_arity, _trim_arity_call_line, abstractmethod, alphanums, alphas, alphas8bit, cached_property, cast, col, conditionAsParseAction, condition_as_parse_action, copy, dblQuotedString, dbl_quoted_string, deque, disable_diag, empty, enable_all_warnings, enable_diag, hexnums, identbodychars, identchars, itemgetter, line, lineEnd, lineStart, line_end, line_start, lineno, matchOnlyAtCol, match_only_at_col, nullDebugAction, null_debug_action, nums, os, ppu, printables, punc8bit, py_str, pyparsing_unicode, python_quoted_string, quotedString, quoted_string, re, removeQuotes, remove_quotes, replaceWith, replace_with, replaced_by_pep8, sglQuotedString, sgl_quoted_string, srange, str_type, string, stringEnd, stringStart, string_end, string_start, sys, system_version, tokenMap, token_map, traceParseAction, trace_parse_action, traceback, types, typing, unicodeString, unicode_string, warnings, withAttribute, withClass, with_attribute, with_class, wraps)  # type: ignore[misc, assignment]
 * from .core import _builtin_exprs as core_builtin_exprs
 * from .helpers import _builtin_exprs as helper_builtin_exprs             # <<<<<<<<<<<<<<
 * from .helpers import (ungroup, anyOpenTag, replace_html_entity, dict_of, html_comment, InfixNotationOperatorSpec, java_style_comment, javaStyleComment, countedArray, match_previous_expr, _htmlEntityMap, counted_array, replaceHTMLEntity, one_of, nested_expr, locatedExpr, pythonStyleComment, InfixNotationOperatorArgType, python_style_comment, common_html_entity, delimited_list, html, htmlComment, originalTextFor, dictOf, infixNotation, matchPreviousExpr, any_open_tag, matchPreviousLiteral, match_previous_literal, restOfLine, infix_notation, oneOf, cppStyleComment, makeHTMLTags, dbl_slash_comment, commonHTMLEntity, OpAssoc, _makeTags, makeXMLTags, opAssoc, any_close_tag, cpp_style_comment, indentedBlock, c_style_comment, make_xml_tags, rest_of_line, nestedExpr, make_html_tags, anyCloseTag, delimitedList, original_text_for, dblSlashComment, cStyleComment)  # type: ignore[misc, assignment]
 * # from .helpers import *
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_builtin_exprs);
  __Pyx_GIVEREF(__pyx_n_s_builtin_exprs);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_builtin_exprs);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_helpers, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_builtin_exprs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_helper_builtin_exprs, __pyx_t_2) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":139
 * from .core import _builtin_exprs as core_builtin_exprs
 * from .helpers import _builtin_exprs as helper_builtin_exprs
 * from .helpers import (ungroup, anyOpenTag, replace_html_entity, dict_of, html_comment, InfixNotationOperatorSpec, java_style_comment, javaStyleComment, countedArray, match_previous_expr, _htmlEntityMap, counted_array, replaceHTMLEntity, one_of, nested_expr, locatedExpr, pythonStyleComment, InfixNotationOperatorArgType, python_style_comment, common_html_entity, delimited_list, html, htmlComment, originalTextFor, dictOf, infixNotation, matchPreviousExpr, any_open_tag, matchPreviousLiteral, match_previous_literal, restOfLine, infix_notation, oneOf, cppStyleComment, makeHTMLTags, dbl_slash_comment, commonHTMLEntity, OpAssoc, _makeTags, makeXMLTags, opAssoc, any_close_tag, cpp_style_comment, indentedBlock, c_style_comment, make_xml_tags, rest_of_line, nestedExpr, make_html_tags, anyCloseTag, delimitedList, original_text_for, dblSlashComment, cStyleComment)  # type: ignore[misc, assignment]             # <<<<<<<<<<<<<<
 * # from .helpers import *
 * 
 */
  __pyx_t_1 = PyList_New(54); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ungroup);
  __Pyx_GIVEREF(__pyx_n_s_ungroup);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ungroup);
  __Pyx_INCREF(__pyx_n_s_anyOpenTag);
  __Pyx_GIVEREF(__pyx_n_s_anyOpenTag);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_anyOpenTag);
  __Pyx_INCREF(__pyx_n_s_replace_html_entity);
  __Pyx_GIVEREF(__pyx_n_s_replace_html_entity);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_replace_html_entity);
  __Pyx_INCREF(__pyx_n_s_dict_of);
  __Pyx_GIVEREF(__pyx_n_s_dict_of);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_dict_of);
  __Pyx_INCREF(__pyx_n_s_html_comment);
  __Pyx_GIVEREF(__pyx_n_s_html_comment);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_html_comment);
  __Pyx_INCREF(__pyx_n_s_InfixNotationOperatorSpec);
  __Pyx_GIVEREF(__pyx_n_s_InfixNotationOperatorSpec);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_InfixNotationOperatorSpec);
  __Pyx_INCREF(__pyx_n_s_java_style_comment);
  __Pyx_GIVEREF(__pyx_n_s_java_style_comment);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_java_style_comment);
  __Pyx_INCREF(__pyx_n_s_javaStyleComment);
  __Pyx_GIVEREF(__pyx_n_s_javaStyleComment);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_javaStyleComment);
  __Pyx_INCREF(__pyx_n_s_countedArray);
  __Pyx_GIVEREF(__pyx_n_s_countedArray);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_countedArray);
  __Pyx_INCREF(__pyx_n_s_match_previous_expr);
  __Pyx_GIVEREF(__pyx_n_s_match_previous_expr);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_match_previous_expr);
  __Pyx_INCREF(__pyx_n_s_htmlEntityMap);
  __Pyx_GIVEREF(__pyx_n_s_htmlEntityMap);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_htmlEntityMap);
  __Pyx_INCREF(__pyx_n_s_counted_array);
  __Pyx_GIVEREF(__pyx_n_s_counted_array);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_counted_array);
  __Pyx_INCREF(__pyx_n_s_replaceHTMLEntity);
  __Pyx_GIVEREF(__pyx_n_s_replaceHTMLEntity);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_replaceHTMLEntity);
  __Pyx_INCREF(__pyx_n_s_one_of);
  __Pyx_GIVEREF(__pyx_n_s_one_of);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_one_of);
  __Pyx_INCREF(__pyx_n_s_nested_expr);
  __Pyx_GIVEREF(__pyx_n_s_nested_expr);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_nested_expr);
  __Pyx_INCREF(__pyx_n_s_locatedExpr);
  __Pyx_GIVEREF(__pyx_n_s_locatedExpr);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_locatedExpr);
  __Pyx_INCREF(__pyx_n_s_pythonStyleComment);
  __Pyx_GIVEREF(__pyx_n_s_pythonStyleComment);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_pythonStyleComment);
  __Pyx_INCREF(__pyx_n_s_InfixNotationOperatorArgType);
  __Pyx_GIVEREF(__pyx_n_s_InfixNotationOperatorArgType);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_InfixNotationOperatorArgType);
  __Pyx_INCREF(__pyx_n_s_python_style_comment);
  __Pyx_GIVEREF(__pyx_n_s_python_style_comment);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_python_style_comment);
  __Pyx_INCREF(__pyx_n_s_common_html_entity);
  __Pyx_GIVEREF(__pyx_n_s_common_html_entity);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_common_html_entity);
  __Pyx_INCREF(__pyx_n_s_delimited_list);
  __Pyx_GIVEREF(__pyx_n_s_delimited_list);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_delimited_list);
  __Pyx_INCREF(__pyx_n_s_html);
  __Pyx_GIVEREF(__pyx_n_s_html);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_html);
  __Pyx_INCREF(__pyx_n_s_htmlComment);
  __Pyx_GIVEREF(__pyx_n_s_htmlComment);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_htmlComment);
  __Pyx_INCREF(__pyx_n_s_originalTextFor);
  __Pyx_GIVEREF(__pyx_n_s_originalTextFor);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_originalTextFor);
  __Pyx_INCREF(__pyx_n_s_dictOf);
  __Pyx_GIVEREF(__pyx_n_s_dictOf);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_dictOf);
  __Pyx_INCREF(__pyx_n_s_infixNotation);
  __Pyx_GIVEREF(__pyx_n_s_infixNotation);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_s_infixNotation);
  __Pyx_INCREF(__pyx_n_s_matchPreviousExpr);
  __Pyx_GIVEREF(__pyx_n_s_matchPreviousExpr);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_s_matchPreviousExpr);
  __Pyx_INCREF(__pyx_n_s_any_open_tag);
  __Pyx_GIVEREF(__pyx_n_s_any_open_tag);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_n_s_any_open_tag);
  __Pyx_INCREF(__pyx_n_s_matchPreviousLiteral);
  __Pyx_GIVEREF(__pyx_n_s_matchPreviousLiteral);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_n_s_matchPreviousLiteral);
  __Pyx_INCREF(__pyx_n_s_match_previous_literal);
  __Pyx_GIVEREF(__pyx_n_s_match_previous_literal);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_n_s_match_previous_literal);
  __Pyx_INCREF(__pyx_n_s_restOfLine);
  __Pyx_GIVEREF(__pyx_n_s_restOfLine);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_n_s_restOfLine);
  __Pyx_INCREF(__pyx_n_s_infix_notation);
  __Pyx_GIVEREF(__pyx_n_s_infix_notation);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_n_s_infix_notation);
  __Pyx_INCREF(__pyx_n_s_oneOf);
  __Pyx_GIVEREF(__pyx_n_s_oneOf);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_n_s_oneOf);
  __Pyx_INCREF(__pyx_n_s_cppStyleComment);
  __Pyx_GIVEREF(__pyx_n_s_cppStyleComment);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_n_s_cppStyleComment);
  __Pyx_INCREF(__pyx_n_s_makeHTMLTags);
  __Pyx_GIVEREF(__pyx_n_s_makeHTMLTags);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_n_s_makeHTMLTags);
  __Pyx_INCREF(__pyx_n_s_dbl_slash_comment);
  __Pyx_GIVEREF(__pyx_n_s_dbl_slash_comment);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_n_s_dbl_slash_comment);
  __Pyx_INCREF(__pyx_n_s_commonHTMLEntity);
  __Pyx_GIVEREF(__pyx_n_s_commonHTMLEntity);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_n_s_commonHTMLEntity);
  __Pyx_INCREF(__pyx_n_s_OpAssoc);
  __Pyx_GIVEREF(__pyx_n_s_OpAssoc);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_n_s_OpAssoc);
  __Pyx_INCREF(__pyx_n_s_makeTags);
  __Pyx_GIVEREF(__pyx_n_s_makeTags);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_n_s_makeTags);
  __Pyx_INCREF(__pyx_n_s_makeXMLTags);
  __Pyx_GIVEREF(__pyx_n_s_makeXMLTags);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_n_s_makeXMLTags);
  __Pyx_INCREF(__pyx_n_s_opAssoc);
  __Pyx_GIVEREF(__pyx_n_s_opAssoc);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_n_s_opAssoc);
  __Pyx_INCREF(__pyx_n_s_any_close_tag);
  __Pyx_GIVEREF(__pyx_n_s_any_close_tag);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_n_s_any_close_tag);
  __Pyx_INCREF(__pyx_n_s_cpp_style_comment);
  __Pyx_GIVEREF(__pyx_n_s_cpp_style_comment);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_n_s_cpp_style_comment);
  __Pyx_INCREF(__pyx_n_s_indentedBlock);
  __Pyx_GIVEREF(__pyx_n_s_indentedBlock);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_n_s_indentedBlock);
  __Pyx_INCREF(__pyx_n_s_c_style_comment);
  __Pyx_GIVEREF(__pyx_n_s_c_style_comment);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_n_s_c_style_comment);
  __Pyx_INCREF(__pyx_n_s_make_xml_tags);
  __Pyx_GIVEREF(__pyx_n_s_make_xml_tags);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_n_s_make_xml_tags);
  __Pyx_INCREF(__pyx_n_s_rest_of_line);
  __Pyx_GIVEREF(__pyx_n_s_rest_of_line);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_n_s_rest_of_line);
  __Pyx_INCREF(__pyx_n_s_nestedExpr);
  __Pyx_GIVEREF(__pyx_n_s_nestedExpr);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_n_s_nestedExpr);
  __Pyx_INCREF(__pyx_n_s_make_html_tags);
  __Pyx_GIVEREF(__pyx_n_s_make_html_tags);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_n_s_make_html_tags);
  __Pyx_INCREF(__pyx_n_s_anyCloseTag);
  __Pyx_GIVEREF(__pyx_n_s_anyCloseTag);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_n_s_anyCloseTag);
  __Pyx_INCREF(__pyx_n_s_delimitedList);
  __Pyx_GIVEREF(__pyx_n_s_delimitedList);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_n_s_delimitedList);
  __Pyx_INCREF(__pyx_n_s_original_text_for);
  __Pyx_GIVEREF(__pyx_n_s_original_text_for);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_n_s_original_text_for);
  __Pyx_INCREF(__pyx_n_s_dblSlashComment);
  __Pyx_GIVEREF(__pyx_n_s_dblSlashComment);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_n_s_dblSlashComment);
  __Pyx_INCREF(__pyx_n_s_cStyleComment);
  __Pyx_GIVEREF(__pyx_n_s_cStyleComment);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_n_s_cStyleComment);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_helpers, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ungroup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ungroup, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_anyOpenTag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_anyOpenTag, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_replace_html_entity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replace_html_entity, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_dict_of); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dict_of, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_html_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_html_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_InfixNotationOperatorSpec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InfixNotationOperatorSpec, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_java_style_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_java_style_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_javaStyleComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_javaStyleComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_countedArray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_countedArray, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_match_previous_expr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_match_previous_expr, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_htmlEntityMap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_htmlEntityMap, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_counted_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_counted_array, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_replaceHTMLEntity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replaceHTMLEntity, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_one_of); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_one_of, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_nested_expr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nested_expr, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_locatedExpr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_locatedExpr, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_pythonStyleComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pythonStyleComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_InfixNotationOperatorArgType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InfixNotationOperatorArgType, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_python_style_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_python_style_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_common_html_entity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_common_html_entity, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_delimited_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delimited_list, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_html); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_html, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_htmlComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_htmlComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_originalTextFor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_originalTextFor, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_dictOf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dictOf, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_infixNotation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_infixNotation, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_matchPreviousExpr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matchPreviousExpr, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_any_open_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_any_open_tag, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_matchPreviousLiteral); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matchPreviousLiteral, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_match_previous_literal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_match_previous_literal, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_restOfLine); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_restOfLine, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_infix_notation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_infix_notation, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_oneOf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oneOf, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cppStyleComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cppStyleComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_makeHTMLTags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makeHTMLTags, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_dbl_slash_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dbl_slash_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_commonHTMLEntity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_commonHTMLEntity, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OpAssoc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OpAssoc, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_makeTags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makeTags, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_makeXMLTags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_makeXMLTags, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_opAssoc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_opAssoc, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_any_close_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_any_close_tag, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cpp_style_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cpp_style_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_indentedBlock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indentedBlock, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_c_style_comment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_c_style_comment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_make_xml_tags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_xml_tags, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_rest_of_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rest_of_line, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_nestedExpr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nestedExpr, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_make_html_tags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_html_tags, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_anyCloseTag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_anyCloseTag, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_delimitedList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delimitedList, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_original_text_for); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_original_text_for, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_dblSlashComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dblSlashComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cStyleComment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cStyleComment, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":142
 * # from .helpers import *
 * 
 * from .unicode import unicode_set, UnicodeRangeList, pyparsing_unicode as unicode             # <<<<<<<<<<<<<<
 * from .testing import pyparsing_test as testing
 * from .common import (
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_unicode_set);
  __Pyx_GIVEREF(__pyx_n_s_unicode_set);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_unicode_set);
  __Pyx_INCREF(__pyx_n_s_UnicodeRangeList);
  __Pyx_GIVEREF(__pyx_n_s_UnicodeRangeList);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_UnicodeRangeList);
  __Pyx_INCREF(__pyx_n_s_pyparsing_unicode);
  __Pyx_GIVEREF(__pyx_n_s_pyparsing_unicode);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_pyparsing_unicode);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_unicode, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_unicode_set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unicode_set, __pyx_t_2) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UnicodeRangeList); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnicodeRangeList, __pyx_t_2) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_pyparsing_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unicode, __pyx_t_2) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":143
 * 
 * from .unicode import unicode_set, UnicodeRangeList, pyparsing_unicode as unicode
 * from .testing import pyparsing_test as testing             # <<<<<<<<<<<<<<
 * from .common import (
 *     pyparsing_common as common,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_pyparsing_test);
  __Pyx_GIVEREF(__pyx_n_s_pyparsing_test);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_pyparsing_test);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_testing, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_pyparsing_test); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testing, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyparsing/__init__.py":145
 * from .testing import pyparsing_test as testing
 * from .common import (
 *     pyparsing_common as common,             # <<<<<<<<<<<<<<
 *     _builtin_exprs as common_builtin_exprs,
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_pyparsing_common);
  __Pyx_GIVEREF(__pyx_n_s_pyparsing_common);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_pyparsing_common);
  __Pyx_INCREF(__pyx_n_s_builtin_exprs);
  __Pyx_GIVEREF(__pyx_n_s_builtin_exprs);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_builtin_exprs);

  /* "pyparsing/__init__.py":144
 * from .unicode import unicode_set, UnicodeRangeList, pyparsing_unicode as unicode
 * from .testing import pyparsing_test as testing
 * from .common import (             # <<<<<<<<<<<<<<
 *     pyparsing_common as common,
 *     _builtin_exprs as common_builtin_exprs,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_common, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_pyparsing_common); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_common, __pyx_t_2) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_builtin_exprs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_common_builtin_exprs, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyparsing/__init__.py":150
 * 
 * # Compatibility synonyms
 * if "pyparsing_unicode" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_unicode = unicode  # type: ignore[misc]
 * if "pyparsing_common" not in globals():
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_pyparsing_unicode, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "pyparsing/__init__.py":151
 * # Compatibility synonyms
 * if "pyparsing_unicode" not in globals():
 *     pyparsing_unicode = unicode  # type: ignore[misc]             # <<<<<<<<<<<<<<
 * if "pyparsing_common" not in globals():
 *     pyparsing_common = common  # type: ignore[misc]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyparsing_unicode, __pyx_t_1) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyparsing/__init__.py":150
 * 
 * # Compatibility synonyms
 * if "pyparsing_unicode" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_unicode = unicode  # type: ignore[misc]
 * if "pyparsing_common" not in globals():
 */
  }

  /* "pyparsing/__init__.py":152
 * if "pyparsing_unicode" not in globals():
 *     pyparsing_unicode = unicode  # type: ignore[misc]
 * if "pyparsing_common" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_common = common  # type: ignore[misc]
 * if "pyparsing_test" not in globals():
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_pyparsing_common, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "pyparsing/__init__.py":153
 *     pyparsing_unicode = unicode  # type: ignore[misc]
 * if "pyparsing_common" not in globals():
 *     pyparsing_common = common  # type: ignore[misc]             # <<<<<<<<<<<<<<
 * if "pyparsing_test" not in globals():
 *     pyparsing_test = testing  # type: ignore[misc]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_common); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyparsing_common, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyparsing/__init__.py":152
 * if "pyparsing_unicode" not in globals():
 *     pyparsing_unicode = unicode  # type: ignore[misc]
 * if "pyparsing_common" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_common = common  # type: ignore[misc]
 * if "pyparsing_test" not in globals():
 */
  }

  /* "pyparsing/__init__.py":154
 * if "pyparsing_common" not in globals():
 *     pyparsing_common = common  # type: ignore[misc]
 * if "pyparsing_test" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_test = testing  # type: ignore[misc]
 * 
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_pyparsing_test, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "pyparsing/__init__.py":155
 *     pyparsing_common = common  # type: ignore[misc]
 * if "pyparsing_test" not in globals():
 *     pyparsing_test = testing  # type: ignore[misc]             # <<<<<<<<<<<<<<
 * 
 * core_builtin_exprs += common_builtin_exprs + helper_builtin_exprs
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_testing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyparsing_test, __pyx_t_1) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyparsing/__init__.py":154
 * if "pyparsing_common" not in globals():
 *     pyparsing_common = common  # type: ignore[misc]
 * if "pyparsing_test" not in globals():             # <<<<<<<<<<<<<<
 *     pyparsing_test = testing  # type: ignore[misc]
 * 
 */
  }

  /* "pyparsing/__init__.py":157
 *     pyparsing_test = testing  # type: ignore[misc]
 * 
 * core_builtin_exprs += common_builtin_exprs + helper_builtin_exprs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_core_builtin_exprs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_common_builtin_exprs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_helper_builtin_exprs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_core_builtin_exprs, __pyx_t_3) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyparsing/__init__.py":160
 * 
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *     "__version__",
 *     "__version_time__",
 */
  __pyx_t_3 = PyList_New(166); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_version);
  __Pyx_GIVEREF(__pyx_n_u_version);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_version);
  __Pyx_INCREF(__pyx_n_u_version_time);
  __Pyx_GIVEREF(__pyx_n_u_version_time);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_version_time);
  __Pyx_INCREF(__pyx_n_u_author);
  __Pyx_GIVEREF(__pyx_n_u_author);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_author);
  __Pyx_INCREF(__pyx_n_u_compat);
  __Pyx_GIVEREF(__pyx_n_u_compat);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_u_compat);
  __Pyx_INCREF(__pyx_n_u_diag);
  __Pyx_GIVEREF(__pyx_n_u_diag);
  PyList_SET_ITEM(__pyx_t_3, 4, __pyx_n_u_diag);
  __Pyx_INCREF(__pyx_n_u_And);
  __Pyx_GIVEREF(__pyx_n_u_And);
  PyList_SET_ITEM(__pyx_t_3, 5, __pyx_n_u_And);
  __Pyx_INCREF(__pyx_n_u_AtLineStart);
  __Pyx_GIVEREF(__pyx_n_u_AtLineStart);
  PyList_SET_ITEM(__pyx_t_3, 6, __pyx_n_u_AtLineStart);
  __Pyx_INCREF(__pyx_n_u_AtStringStart);
  __Pyx_GIVEREF(__pyx_n_u_AtStringStart);
  PyList_SET_ITEM(__pyx_t_3, 7, __pyx_n_u_AtStringStart);
  __Pyx_INCREF(__pyx_n_u_CaselessKeyword);
  __Pyx_GIVEREF(__pyx_n_u_CaselessKeyword);
  PyList_SET_ITEM(__pyx_t_3, 8, __pyx_n_u_CaselessKeyword);
  __Pyx_INCREF(__pyx_n_u_CaselessLiteral);
  __Pyx_GIVEREF(__pyx_n_u_CaselessLiteral);
  PyList_SET_ITEM(__pyx_t_3, 9, __pyx_n_u_CaselessLiteral);
  __Pyx_INCREF(__pyx_n_u_CharsNotIn);
  __Pyx_GIVEREF(__pyx_n_u_CharsNotIn);
  PyList_SET_ITEM(__pyx_t_3, 10, __pyx_n_u_CharsNotIn);
  __Pyx_INCREF(__pyx_n_u_CloseMatch);
  __Pyx_GIVEREF(__pyx_n_u_CloseMatch);
  PyList_SET_ITEM(__pyx_t_3, 11, __pyx_n_u_CloseMatch);
  __Pyx_INCREF(__pyx_n_u_Combine);
  __Pyx_GIVEREF(__pyx_n_u_Combine);
  PyList_SET_ITEM(__pyx_t_3, 12, __pyx_n_u_Combine);
  __Pyx_INCREF(__pyx_n_u_DelimitedList);
  __Pyx_GIVEREF(__pyx_n_u_DelimitedList);
  PyList_SET_ITEM(__pyx_t_3, 13, __pyx_n_u_DelimitedList);
  __Pyx_INCREF(__pyx_n_u_Dict);
  __Pyx_GIVEREF(__pyx_n_u_Dict);
  PyList_SET_ITEM(__pyx_t_3, 14, __pyx_n_u_Dict);
  __Pyx_INCREF(__pyx_n_u_Each);
  __Pyx_GIVEREF(__pyx_n_u_Each);
  PyList_SET_ITEM(__pyx_t_3, 15, __pyx_n_u_Each);
  __Pyx_INCREF(__pyx_n_u_Empty);
  __Pyx_GIVEREF(__pyx_n_u_Empty);
  PyList_SET_ITEM(__pyx_t_3, 16, __pyx_n_u_Empty);
  __Pyx_INCREF(__pyx_n_u_FollowedBy);
  __Pyx_GIVEREF(__pyx_n_u_FollowedBy);
  PyList_SET_ITEM(__pyx_t_3, 17, __pyx_n_u_FollowedBy);
  __Pyx_INCREF(__pyx_n_u_Forward);
  __Pyx_GIVEREF(__pyx_n_u_Forward);
  PyList_SET_ITEM(__pyx_t_3, 18, __pyx_n_u_Forward);
  __Pyx_INCREF(__pyx_n_u_GoToColumn);
  __Pyx_GIVEREF(__pyx_n_u_GoToColumn);
  PyList_SET_ITEM(__pyx_t_3, 19, __pyx_n_u_GoToColumn);
  __Pyx_INCREF(__pyx_n_u_Group);
  __Pyx_GIVEREF(__pyx_n_u_Group);
  PyList_SET_ITEM(__pyx_t_3, 20, __pyx_n_u_Group);
  __Pyx_INCREF(__pyx_n_u_IndentedBlock);
  __Pyx_GIVEREF(__pyx_n_u_IndentedBlock);
  PyList_SET_ITEM(__pyx_t_3, 21, __pyx_n_u_IndentedBlock);
  __Pyx_INCREF(__pyx_n_u_Keyword);
  __Pyx_GIVEREF(__pyx_n_u_Keyword);
  PyList_SET_ITEM(__pyx_t_3, 22, __pyx_n_u_Keyword);
  __Pyx_INCREF(__pyx_n_u_LineEnd);
  __Pyx_GIVEREF(__pyx_n_u_LineEnd);
  PyList_SET_ITEM(__pyx_t_3, 23, __pyx_n_u_LineEnd);
  __Pyx_INCREF(__pyx_n_u_LineStart);
  __Pyx_GIVEREF(__pyx_n_u_LineStart);
  PyList_SET_ITEM(__pyx_t_3, 24, __pyx_n_u_LineStart);
  __Pyx_INCREF(__pyx_n_u_Literal);
  __Pyx_GIVEREF(__pyx_n_u_Literal);
  PyList_SET_ITEM(__pyx_t_3, 25, __pyx_n_u_Literal);
  __Pyx_INCREF(__pyx_n_u_Located);
  __Pyx_GIVEREF(__pyx_n_u_Located);
  PyList_SET_ITEM(__pyx_t_3, 26, __pyx_n_u_Located);
  __Pyx_INCREF(__pyx_n_u_PrecededBy);
  __Pyx_GIVEREF(__pyx_n_u_PrecededBy);
  PyList_SET_ITEM(__pyx_t_3, 27, __pyx_n_u_PrecededBy);
  __Pyx_INCREF(__pyx_n_u_MatchFirst);
  __Pyx_GIVEREF(__pyx_n_u_MatchFirst);
  PyList_SET_ITEM(__pyx_t_3, 28, __pyx_n_u_MatchFirst);
  __Pyx_INCREF(__pyx_n_u_NoMatch);
  __Pyx_GIVEREF(__pyx_n_u_NoMatch);
  PyList_SET_ITEM(__pyx_t_3, 29, __pyx_n_u_NoMatch);
  __Pyx_INCREF(__pyx_n_u_NotAny);
  __Pyx_GIVEREF(__pyx_n_u_NotAny);
  PyList_SET_ITEM(__pyx_t_3, 30, __pyx_n_u_NotAny);
  __Pyx_INCREF(__pyx_n_u_OneOrMore);
  __Pyx_GIVEREF(__pyx_n_u_OneOrMore);
  PyList_SET_ITEM(__pyx_t_3, 31, __pyx_n_u_OneOrMore);
  __Pyx_INCREF(__pyx_n_u_OnlyOnce);
  __Pyx_GIVEREF(__pyx_n_u_OnlyOnce);
  PyList_SET_ITEM(__pyx_t_3, 32, __pyx_n_u_OnlyOnce);
  __Pyx_INCREF(__pyx_n_u_OpAssoc);
  __Pyx_GIVEREF(__pyx_n_u_OpAssoc);
  PyList_SET_ITEM(__pyx_t_3, 33, __pyx_n_u_OpAssoc);
  __Pyx_INCREF(__pyx_n_u_Opt);
  __Pyx_GIVEREF(__pyx_n_u_Opt);
  PyList_SET_ITEM(__pyx_t_3, 34, __pyx_n_u_Opt);
  __Pyx_INCREF(__pyx_n_u_Optional);
  __Pyx_GIVEREF(__pyx_n_u_Optional);
  PyList_SET_ITEM(__pyx_t_3, 35, __pyx_n_u_Optional);
  __Pyx_INCREF(__pyx_n_u_Or);
  __Pyx_GIVEREF(__pyx_n_u_Or);
  PyList_SET_ITEM(__pyx_t_3, 36, __pyx_n_u_Or);
  __Pyx_INCREF(__pyx_n_u_ParseBaseException);
  __Pyx_GIVEREF(__pyx_n_u_ParseBaseException);
  PyList_SET_ITEM(__pyx_t_3, 37, __pyx_n_u_ParseBaseException);
  __Pyx_INCREF(__pyx_n_u_ParseElementEnhance);
  __Pyx_GIVEREF(__pyx_n_u_ParseElementEnhance);
  PyList_SET_ITEM(__pyx_t_3, 38, __pyx_n_u_ParseElementEnhance);
  __Pyx_INCREF(__pyx_n_u_ParseException);
  __Pyx_GIVEREF(__pyx_n_u_ParseException);
  PyList_SET_ITEM(__pyx_t_3, 39, __pyx_n_u_ParseException);
  __Pyx_INCREF(__pyx_n_u_ParseExpression);
  __Pyx_GIVEREF(__pyx_n_u_ParseExpression);
  PyList_SET_ITEM(__pyx_t_3, 40, __pyx_n_u_ParseExpression);
  __Pyx_INCREF(__pyx_n_u_ParseFatalException);
  __Pyx_GIVEREF(__pyx_n_u_ParseFatalException);
  PyList_SET_ITEM(__pyx_t_3, 41, __pyx_n_u_ParseFatalException);
  __Pyx_INCREF(__pyx_n_u_ParseResults);
  __Pyx_GIVEREF(__pyx_n_u_ParseResults);
  PyList_SET_ITEM(__pyx_t_3, 42, __pyx_n_u_ParseResults);
  __Pyx_INCREF(__pyx_n_u_ParseSyntaxException);
  __Pyx_GIVEREF(__pyx_n_u_ParseSyntaxException);
  PyList_SET_ITEM(__pyx_t_3, 43, __pyx_n_u_ParseSyntaxException);
  __Pyx_INCREF(__pyx_n_u_ParserElement);
  __Pyx_GIVEREF(__pyx_n_u_ParserElement);
  PyList_SET_ITEM(__pyx_t_3, 44, __pyx_n_u_ParserElement);
  __Pyx_INCREF(__pyx_n_u_PositionToken);
  __Pyx_GIVEREF(__pyx_n_u_PositionToken);
  PyList_SET_ITEM(__pyx_t_3, 45, __pyx_n_u_PositionToken);
  __Pyx_INCREF(__pyx_n_u_QuotedString);
  __Pyx_GIVEREF(__pyx_n_u_QuotedString);
  PyList_SET_ITEM(__pyx_t_3, 46, __pyx_n_u_QuotedString);
  __Pyx_INCREF(__pyx_n_u_RecursiveGrammarException);
  __Pyx_GIVEREF(__pyx_n_u_RecursiveGrammarException);
  PyList_SET_ITEM(__pyx_t_3, 47, __pyx_n_u_RecursiveGrammarException);
  __Pyx_INCREF(__pyx_n_u_Regex);
  __Pyx_GIVEREF(__pyx_n_u_Regex);
  PyList_SET_ITEM(__pyx_t_3, 48, __pyx_n_u_Regex);
  __Pyx_INCREF(__pyx_n_u_SkipTo);
  __Pyx_GIVEREF(__pyx_n_u_SkipTo);
  PyList_SET_ITEM(__pyx_t_3, 49, __pyx_n_u_SkipTo);
  __Pyx_INCREF(__pyx_n_u_StringEnd);
  __Pyx_GIVEREF(__pyx_n_u_StringEnd);
  PyList_SET_ITEM(__pyx_t_3, 50, __pyx_n_u_StringEnd);
  __Pyx_INCREF(__pyx_n_u_StringStart);
  __Pyx_GIVEREF(__pyx_n_u_StringStart);
  PyList_SET_ITEM(__pyx_t_3, 51, __pyx_n_u_StringStart);
  __Pyx_INCREF(__pyx_n_u_Suppress);
  __Pyx_GIVEREF(__pyx_n_u_Suppress);
  PyList_SET_ITEM(__pyx_t_3, 52, __pyx_n_u_Suppress);
  __Pyx_INCREF(__pyx_n_u_Token);
  __Pyx_GIVEREF(__pyx_n_u_Token);
  PyList_SET_ITEM(__pyx_t_3, 53, __pyx_n_u_Token);
  __Pyx_INCREF(__pyx_n_u_TokenConverter);
  __Pyx_GIVEREF(__pyx_n_u_TokenConverter);
  PyList_SET_ITEM(__pyx_t_3, 54, __pyx_n_u_TokenConverter);
  __Pyx_INCREF(__pyx_n_u_White);
  __Pyx_GIVEREF(__pyx_n_u_White);
  PyList_SET_ITEM(__pyx_t_3, 55, __pyx_n_u_White);
  __Pyx_INCREF(__pyx_n_u_Word);
  __Pyx_GIVEREF(__pyx_n_u_Word);
  PyList_SET_ITEM(__pyx_t_3, 56, __pyx_n_u_Word);
  __Pyx_INCREF(__pyx_n_u_WordEnd);
  __Pyx_GIVEREF(__pyx_n_u_WordEnd);
  PyList_SET_ITEM(__pyx_t_3, 57, __pyx_n_u_WordEnd);
  __Pyx_INCREF(__pyx_n_u_WordStart);
  __Pyx_GIVEREF(__pyx_n_u_WordStart);
  PyList_SET_ITEM(__pyx_t_3, 58, __pyx_n_u_WordStart);
  __Pyx_INCREF(__pyx_n_u_ZeroOrMore);
  __Pyx_GIVEREF(__pyx_n_u_ZeroOrMore);
  PyList_SET_ITEM(__pyx_t_3, 59, __pyx_n_u_ZeroOrMore);
  __Pyx_INCREF(__pyx_n_u_Char);
  __Pyx_GIVEREF(__pyx_n_u_Char);
  PyList_SET_ITEM(__pyx_t_3, 60, __pyx_n_u_Char);
  __Pyx_INCREF(__pyx_n_u_alphanums);
  __Pyx_GIVEREF(__pyx_n_u_alphanums);
  PyList_SET_ITEM(__pyx_t_3, 61, __pyx_n_u_alphanums);
  __Pyx_INCREF(__pyx_n_u_alphas);
  __Pyx_GIVEREF(__pyx_n_u_alphas);
  PyList_SET_ITEM(__pyx_t_3, 62, __pyx_n_u_alphas);
  __Pyx_INCREF(__pyx_n_u_alphas8bit);
  __Pyx_GIVEREF(__pyx_n_u_alphas8bit);
  PyList_SET_ITEM(__pyx_t_3, 63, __pyx_n_u_alphas8bit);
  __Pyx_INCREF(__pyx_n_u_any_close_tag);
  __Pyx_GIVEREF(__pyx_n_u_any_close_tag);
  PyList_SET_ITEM(__pyx_t_3, 64, __pyx_n_u_any_close_tag);
  __Pyx_INCREF(__pyx_n_u_any_open_tag);
  __Pyx_GIVEREF(__pyx_n_u_any_open_tag);
  PyList_SET_ITEM(__pyx_t_3, 65, __pyx_n_u_any_open_tag);
  __Pyx_INCREF(__pyx_n_u_autoname_elements);
  __Pyx_GIVEREF(__pyx_n_u_autoname_elements);
  PyList_SET_ITEM(__pyx_t_3, 66, __pyx_n_u_autoname_elements);
  __Pyx_INCREF(__pyx_n_u_c_style_comment);
  __Pyx_GIVEREF(__pyx_n_u_c_style_comment);
  PyList_SET_ITEM(__pyx_t_3, 67, __pyx_n_u_c_style_comment);
  __Pyx_INCREF(__pyx_n_u_col);
  __Pyx_GIVEREF(__pyx_n_u_col);
  PyList_SET_ITEM(__pyx_t_3, 68, __pyx_n_u_col);
  __Pyx_INCREF(__pyx_n_u_common_html_entity);
  __Pyx_GIVEREF(__pyx_n_u_common_html_entity);
  PyList_SET_ITEM(__pyx_t_3, 69, __pyx_n_u_common_html_entity);
  __Pyx_INCREF(__pyx_n_u_condition_as_parse_action);
  __Pyx_GIVEREF(__pyx_n_u_condition_as_parse_action);
  PyList_SET_ITEM(__pyx_t_3, 70, __pyx_n_u_condition_as_parse_action);
  __Pyx_INCREF(__pyx_n_u_counted_array);
  __Pyx_GIVEREF(__pyx_n_u_counted_array);
  PyList_SET_ITEM(__pyx_t_3, 71, __pyx_n_u_counted_array);
  __Pyx_INCREF(__pyx_n_u_cpp_style_comment);
  __Pyx_GIVEREF(__pyx_n_u_cpp_style_comment);
  PyList_SET_ITEM(__pyx_t_3, 72, __pyx_n_u_cpp_style_comment);
  __Pyx_INCREF(__pyx_n_u_dbl_quoted_string);
  __Pyx_GIVEREF(__pyx_n_u_dbl_quoted_string);
  PyList_SET_ITEM(__pyx_t_3, 73, __pyx_n_u_dbl_quoted_string);
  __Pyx_INCREF(__pyx_n_u_dbl_slash_comment);
  __Pyx_GIVEREF(__pyx_n_u_dbl_slash_comment);
  PyList_SET_ITEM(__pyx_t_3, 74, __pyx_n_u_dbl_slash_comment);
  __Pyx_INCREF(__pyx_n_u_delimited_list);
  __Pyx_GIVEREF(__pyx_n_u_delimited_list);
  PyList_SET_ITEM(__pyx_t_3, 75, __pyx_n_u_delimited_list);
  __Pyx_INCREF(__pyx_n_u_dict_of);
  __Pyx_GIVEREF(__pyx_n_u_dict_of);
  PyList_SET_ITEM(__pyx_t_3, 76, __pyx_n_u_dict_of);
  __Pyx_INCREF(__pyx_n_u_empty);
  __Pyx_GIVEREF(__pyx_n_u_empty);
  PyList_SET_ITEM(__pyx_t_3, 77, __pyx_n_u_empty);
  __Pyx_INCREF(__pyx_n_u_hexnums);
  __Pyx_GIVEREF(__pyx_n_u_hexnums);
  PyList_SET_ITEM(__pyx_t_3, 78, __pyx_n_u_hexnums);
  __Pyx_INCREF(__pyx_n_u_html_comment);
  __Pyx_GIVEREF(__pyx_n_u_html_comment);
  PyList_SET_ITEM(__pyx_t_3, 79, __pyx_n_u_html_comment);
  __Pyx_INCREF(__pyx_n_u_identchars);
  __Pyx_GIVEREF(__pyx_n_u_identchars);
  PyList_SET_ITEM(__pyx_t_3, 80, __pyx_n_u_identchars);
  __Pyx_INCREF(__pyx_n_u_identbodychars);
  __Pyx_GIVEREF(__pyx_n_u_identbodychars);
  PyList_SET_ITEM(__pyx_t_3, 81, __pyx_n_u_identbodychars);
  __Pyx_INCREF(__pyx_n_u_infix_notation);
  __Pyx_GIVEREF(__pyx_n_u_infix_notation);
  PyList_SET_ITEM(__pyx_t_3, 82, __pyx_n_u_infix_notation);
  __Pyx_INCREF(__pyx_n_u_java_style_comment);
  __Pyx_GIVEREF(__pyx_n_u_java_style_comment);
  PyList_SET_ITEM(__pyx_t_3, 83, __pyx_n_u_java_style_comment);
  __Pyx_INCREF(__pyx_n_u_line);
  __Pyx_GIVEREF(__pyx_n_u_line);
  PyList_SET_ITEM(__pyx_t_3, 84, __pyx_n_u_line);
  __Pyx_INCREF(__pyx_n_u_line_end);
  __Pyx_GIVEREF(__pyx_n_u_line_end);
  PyList_SET_ITEM(__pyx_t_3, 85, __pyx_n_u_line_end);
  __Pyx_INCREF(__pyx_n_u_line_start);
  __Pyx_GIVEREF(__pyx_n_u_line_start);
  PyList_SET_ITEM(__pyx_t_3, 86, __pyx_n_u_line_start);
  __Pyx_INCREF(__pyx_n_u_lineno);
  __Pyx_GIVEREF(__pyx_n_u_lineno);
  PyList_SET_ITEM(__pyx_t_3, 87, __pyx_n_u_lineno);
  __Pyx_INCREF(__pyx_n_u_make_html_tags);
  __Pyx_GIVEREF(__pyx_n_u_make_html_tags);
  PyList_SET_ITEM(__pyx_t_3, 88, __pyx_n_u_make_html_tags);
  __Pyx_INCREF(__pyx_n_u_make_xml_tags);
  __Pyx_GIVEREF(__pyx_n_u_make_xml_tags);
  PyList_SET_ITEM(__pyx_t_3, 89, __pyx_n_u_make_xml_tags);
  __Pyx_INCREF(__pyx_n_u_match_only_at_col);
  __Pyx_GIVEREF(__pyx_n_u_match_only_at_col);
  PyList_SET_ITEM(__pyx_t_3, 90, __pyx_n_u_match_only_at_col);
  __Pyx_INCREF(__pyx_n_u_match_previous_expr);
  __Pyx_GIVEREF(__pyx_n_u_match_previous_expr);
  PyList_SET_ITEM(__pyx_t_3, 91, __pyx_n_u_match_previous_expr);
  __Pyx_INCREF(__pyx_n_u_match_previous_literal);
  __Pyx_GIVEREF(__pyx_n_u_match_previous_literal);
  PyList_SET_ITEM(__pyx_t_3, 92, __pyx_n_u_match_previous_literal);
  __Pyx_INCREF(__pyx_n_u_nested_expr);
  __Pyx_GIVEREF(__pyx_n_u_nested_expr);
  PyList_SET_ITEM(__pyx_t_3, 93, __pyx_n_u_nested_expr);
  __Pyx_INCREF(__pyx_n_u_null_debug_action);
  __Pyx_GIVEREF(__pyx_n_u_null_debug_action);
  PyList_SET_ITEM(__pyx_t_3, 94, __pyx_n_u_null_debug_action);
  __Pyx_INCREF(__pyx_n_u_nums);
  __Pyx_GIVEREF(__pyx_n_u_nums);
  PyList_SET_ITEM(__pyx_t_3, 95, __pyx_n_u_nums);
  __Pyx_INCREF(__pyx_n_u_one_of);
  __Pyx_GIVEREF(__pyx_n_u_one_of);
  PyList_SET_ITEM(__pyx_t_3, 96, __pyx_n_u_one_of);
  __Pyx_INCREF(__pyx_n_u_original_text_for);
  __Pyx_GIVEREF(__pyx_n_u_original_text_for);
  PyList_SET_ITEM(__pyx_t_3, 97, __pyx_n_u_original_text_for);
  __Pyx_INCREF(__pyx_n_u_printables);
  __Pyx_GIVEREF(__pyx_n_u_printables);
  PyList_SET_ITEM(__pyx_t_3, 98, __pyx_n_u_printables);
  __Pyx_INCREF(__pyx_n_u_punc8bit);
  __Pyx_GIVEREF(__pyx_n_u_punc8bit);
  PyList_SET_ITEM(__pyx_t_3, 99, __pyx_n_u_punc8bit);
  __Pyx_INCREF(__pyx_n_u_pyparsing_common);
  __Pyx_GIVEREF(__pyx_n_u_pyparsing_common);
  PyList_SET_ITEM(__pyx_t_3, 100, __pyx_n_u_pyparsing_common);
  __Pyx_INCREF(__pyx_n_u_pyparsing_test);
  __Pyx_GIVEREF(__pyx_n_u_pyparsing_test);
  PyList_SET_ITEM(__pyx_t_3, 101, __pyx_n_u_pyparsing_test);
  __Pyx_INCREF(__pyx_n_u_pyparsing_unicode);
  __Pyx_GIVEREF(__pyx_n_u_pyparsing_unicode);
  PyList_SET_ITEM(__pyx_t_3, 102, __pyx_n_u_pyparsing_unicode);
  __Pyx_INCREF(__pyx_n_u_python_style_comment);
  __Pyx_GIVEREF(__pyx_n_u_python_style_comment);
  PyList_SET_ITEM(__pyx_t_3, 103, __pyx_n_u_python_style_comment);
  __Pyx_INCREF(__pyx_n_u_quoted_string);
  __Pyx_GIVEREF(__pyx_n_u_quoted_string);
  PyList_SET_ITEM(__pyx_t_3, 104, __pyx_n_u_quoted_string);
  __Pyx_INCREF(__pyx_n_u_remove_quotes);
  __Pyx_GIVEREF(__pyx_n_u_remove_quotes);
  PyList_SET_ITEM(__pyx_t_3, 105, __pyx_n_u_remove_quotes);
  __Pyx_INCREF(__pyx_n_u_replace_with);
  __Pyx_GIVEREF(__pyx_n_u_replace_with);
  PyList_SET_ITEM(__pyx_t_3, 106, __pyx_n_u_replace_with);
  __Pyx_INCREF(__pyx_n_u_replace_html_entity);
  __Pyx_GIVEREF(__pyx_n_u_replace_html_entity);
  PyList_SET_ITEM(__pyx_t_3, 107, __pyx_n_u_replace_html_entity);
  __Pyx_INCREF(__pyx_n_u_rest_of_line);
  __Pyx_GIVEREF(__pyx_n_u_rest_of_line);
  PyList_SET_ITEM(__pyx_t_3, 108, __pyx_n_u_rest_of_line);
  __Pyx_INCREF(__pyx_n_u_sgl_quoted_string);
  __Pyx_GIVEREF(__pyx_n_u_sgl_quoted_string);
  PyList_SET_ITEM(__pyx_t_3, 109, __pyx_n_u_sgl_quoted_string);
  __Pyx_INCREF(__pyx_n_u_srange);
  __Pyx_GIVEREF(__pyx_n_u_srange);
  PyList_SET_ITEM(__pyx_t_3, 110, __pyx_n_u_srange);
  __Pyx_INCREF(__pyx_n_u_string_end);
  __Pyx_GIVEREF(__pyx_n_u_string_end);
  PyList_SET_ITEM(__pyx_t_3, 111, __pyx_n_u_string_end);
  __Pyx_INCREF(__pyx_n_u_string_start);
  __Pyx_GIVEREF(__pyx_n_u_string_start);
  PyList_SET_ITEM(__pyx_t_3, 112, __pyx_n_u_string_start);
  __Pyx_INCREF(__pyx_n_u_token_map);
  __Pyx_GIVEREF(__pyx_n_u_token_map);
  PyList_SET_ITEM(__pyx_t_3, 113, __pyx_n_u_token_map);
  __Pyx_INCREF(__pyx_n_u_trace_parse_action);
  __Pyx_GIVEREF(__pyx_n_u_trace_parse_action);
  PyList_SET_ITEM(__pyx_t_3, 114, __pyx_n_u_trace_parse_action);
  __Pyx_INCREF(__pyx_n_u_ungroup);
  __Pyx_GIVEREF(__pyx_n_u_ungroup);
  PyList_SET_ITEM(__pyx_t_3, 115, __pyx_n_u_ungroup);
  __Pyx_INCREF(__pyx_n_u_unicode_set);
  __Pyx_GIVEREF(__pyx_n_u_unicode_set);
  PyList_SET_ITEM(__pyx_t_3, 116, __pyx_n_u_unicode_set);
  __Pyx_INCREF(__pyx_n_u_unicode_string);
  __Pyx_GIVEREF(__pyx_n_u_unicode_string);
  PyList_SET_ITEM(__pyx_t_3, 117, __pyx_n_u_unicode_string);
  __Pyx_INCREF(__pyx_n_u_with_attribute);
  __Pyx_GIVEREF(__pyx_n_u_with_attribute);
  PyList_SET_ITEM(__pyx_t_3, 118, __pyx_n_u_with_attribute);
  __Pyx_INCREF(__pyx_n_u_with_class);
  __Pyx_GIVEREF(__pyx_n_u_with_class);
  PyList_SET_ITEM(__pyx_t_3, 119, __pyx_n_u_with_class);
  __Pyx_INCREF(__pyx_n_u_versionTime);
  __Pyx_GIVEREF(__pyx_n_u_versionTime);
  PyList_SET_ITEM(__pyx_t_3, 120, __pyx_n_u_versionTime);
  __Pyx_INCREF(__pyx_n_u_anyCloseTag);
  __Pyx_GIVEREF(__pyx_n_u_anyCloseTag);
  PyList_SET_ITEM(__pyx_t_3, 121, __pyx_n_u_anyCloseTag);
  __Pyx_INCREF(__pyx_n_u_anyOpenTag);
  __Pyx_GIVEREF(__pyx_n_u_anyOpenTag);
  PyList_SET_ITEM(__pyx_t_3, 122, __pyx_n_u_anyOpenTag);
  __Pyx_INCREF(__pyx_n_u_cStyleComment);
  __Pyx_GIVEREF(__pyx_n_u_cStyleComment);
  PyList_SET_ITEM(__pyx_t_3, 123, __pyx_n_u_cStyleComment);
  __Pyx_INCREF(__pyx_n_u_commonHTMLEntity);
  __Pyx_GIVEREF(__pyx_n_u_commonHTMLEntity);
  PyList_SET_ITEM(__pyx_t_3, 124, __pyx_n_u_commonHTMLEntity);
  __Pyx_INCREF(__pyx_n_u_conditionAsParseAction);
  __Pyx_GIVEREF(__pyx_n_u_conditionAsParseAction);
  PyList_SET_ITEM(__pyx_t_3, 125, __pyx_n_u_conditionAsParseAction);
  __Pyx_INCREF(__pyx_n_u_countedArray);
  __Pyx_GIVEREF(__pyx_n_u_countedArray);
  PyList_SET_ITEM(__pyx_t_3, 126, __pyx_n_u_countedArray);
  __Pyx_INCREF(__pyx_n_u_cppStyleComment);
  __Pyx_GIVEREF(__pyx_n_u_cppStyleComment);
  PyList_SET_ITEM(__pyx_t_3, 127, __pyx_n_u_cppStyleComment);
  __Pyx_INCREF(__pyx_n_u_dblQuotedString);
  __Pyx_GIVEREF(__pyx_n_u_dblQuotedString);
  PyList_SET_ITEM(__pyx_t_3, 128, __pyx_n_u_dblQuotedString);
  __Pyx_INCREF(__pyx_n_u_dblSlashComment);
  __Pyx_GIVEREF(__pyx_n_u_dblSlashComment);
  PyList_SET_ITEM(__pyx_t_3, 129, __pyx_n_u_dblSlashComment);
  __Pyx_INCREF(__pyx_n_u_delimitedList);
  __Pyx_GIVEREF(__pyx_n_u_delimitedList);
  PyList_SET_ITEM(__pyx_t_3, 130, __pyx_n_u_delimitedList);
  __Pyx_INCREF(__pyx_n_u_dictOf);
  __Pyx_GIVEREF(__pyx_n_u_dictOf);
  PyList_SET_ITEM(__pyx_t_3, 131, __pyx_n_u_dictOf);
  __Pyx_INCREF(__pyx_n_u_htmlComment);
  __Pyx_GIVEREF(__pyx_n_u_htmlComment);
  PyList_SET_ITEM(__pyx_t_3, 132, __pyx_n_u_htmlComment);
  __Pyx_INCREF(__pyx_n_u_indentedBlock);
  __Pyx_GIVEREF(__pyx_n_u_indentedBlock);
  PyList_SET_ITEM(__pyx_t_3, 133, __pyx_n_u_indentedBlock);
  __Pyx_INCREF(__pyx_n_u_infixNotation);
  __Pyx_GIVEREF(__pyx_n_u_infixNotation);
  PyList_SET_ITEM(__pyx_t_3, 134, __pyx_n_u_infixNotation);
  __Pyx_INCREF(__pyx_n_u_javaStyleComment);
  __Pyx_GIVEREF(__pyx_n_u_javaStyleComment);
  PyList_SET_ITEM(__pyx_t_3, 135, __pyx_n_u_javaStyleComment);
  __Pyx_INCREF(__pyx_n_u_lineEnd);
  __Pyx_GIVEREF(__pyx_n_u_lineEnd);
  PyList_SET_ITEM(__pyx_t_3, 136, __pyx_n_u_lineEnd);
  __Pyx_INCREF(__pyx_n_u_lineStart);
  __Pyx_GIVEREF(__pyx_n_u_lineStart);
  PyList_SET_ITEM(__pyx_t_3, 137, __pyx_n_u_lineStart);
  __Pyx_INCREF(__pyx_n_u_locatedExpr);
  __Pyx_GIVEREF(__pyx_n_u_locatedExpr);
  PyList_SET_ITEM(__pyx_t_3, 138, __pyx_n_u_locatedExpr);
  __Pyx_INCREF(__pyx_n_u_makeHTMLTags);
  __Pyx_GIVEREF(__pyx_n_u_makeHTMLTags);
  PyList_SET_ITEM(__pyx_t_3, 139, __pyx_n_u_makeHTMLTags);
  __Pyx_INCREF(__pyx_n_u_makeXMLTags);
  __Pyx_GIVEREF(__pyx_n_u_makeXMLTags);
  PyList_SET_ITEM(__pyx_t_3, 140, __pyx_n_u_makeXMLTags);
  __Pyx_INCREF(__pyx_n_u_matchOnlyAtCol);
  __Pyx_GIVEREF(__pyx_n_u_matchOnlyAtCol);
  PyList_SET_ITEM(__pyx_t_3, 141, __pyx_n_u_matchOnlyAtCol);
  __Pyx_INCREF(__pyx_n_u_matchPreviousExpr);
  __Pyx_GIVEREF(__pyx_n_u_matchPreviousExpr);
  PyList_SET_ITEM(__pyx_t_3, 142, __pyx_n_u_matchPreviousExpr);
  __Pyx_INCREF(__pyx_n_u_matchPreviousLiteral);
  __Pyx_GIVEREF(__pyx_n_u_matchPreviousLiteral);
  PyList_SET_ITEM(__pyx_t_3, 143, __pyx_n_u_matchPreviousLiteral);
  __Pyx_INCREF(__pyx_n_u_nestedExpr);
  __Pyx_GIVEREF(__pyx_n_u_nestedExpr);
  PyList_SET_ITEM(__pyx_t_3, 144, __pyx_n_u_nestedExpr);
  __Pyx_INCREF(__pyx_n_u_nullDebugAction);
  __Pyx_GIVEREF(__pyx_n_u_nullDebugAction);
  PyList_SET_ITEM(__pyx_t_3, 145, __pyx_n_u_nullDebugAction);
  __Pyx_INCREF(__pyx_n_u_oneOf);
  __Pyx_GIVEREF(__pyx_n_u_oneOf);
  PyList_SET_ITEM(__pyx_t_3, 146, __pyx_n_u_oneOf);
  __Pyx_INCREF(__pyx_n_u_opAssoc);
  __Pyx_GIVEREF(__pyx_n_u_opAssoc);
  PyList_SET_ITEM(__pyx_t_3, 147, __pyx_n_u_opAssoc);
  __Pyx_INCREF(__pyx_n_u_originalTextFor);
  __Pyx_GIVEREF(__pyx_n_u_originalTextFor);
  PyList_SET_ITEM(__pyx_t_3, 148, __pyx_n_u_originalTextFor);
  __Pyx_INCREF(__pyx_n_u_pythonStyleComment);
  __Pyx_GIVEREF(__pyx_n_u_pythonStyleComment);
  PyList_SET_ITEM(__pyx_t_3, 149, __pyx_n_u_pythonStyleComment);
  __Pyx_INCREF(__pyx_n_u_quotedString);
  __Pyx_GIVEREF(__pyx_n_u_quotedString);
  PyList_SET_ITEM(__pyx_t_3, 150, __pyx_n_u_quotedString);
  __Pyx_INCREF(__pyx_n_u_removeQuotes);
  __Pyx_GIVEREF(__pyx_n_u_removeQuotes);
  PyList_SET_ITEM(__pyx_t_3, 151, __pyx_n_u_removeQuotes);
  __Pyx_INCREF(__pyx_n_u_replaceHTMLEntity);
  __Pyx_GIVEREF(__pyx_n_u_replaceHTMLEntity);
  PyList_SET_ITEM(__pyx_t_3, 152, __pyx_n_u_replaceHTMLEntity);
  __Pyx_INCREF(__pyx_n_u_replaceWith);
  __Pyx_GIVEREF(__pyx_n_u_replaceWith);
  PyList_SET_ITEM(__pyx_t_3, 153, __pyx_n_u_replaceWith);
  __Pyx_INCREF(__pyx_n_u_restOfLine);
  __Pyx_GIVEREF(__pyx_n_u_restOfLine);
  PyList_SET_ITEM(__pyx_t_3, 154, __pyx_n_u_restOfLine);
  __Pyx_INCREF(__pyx_n_u_sglQuotedString);
  __Pyx_GIVEREF(__pyx_n_u_sglQuotedString);
  PyList_SET_ITEM(__pyx_t_3, 155, __pyx_n_u_sglQuotedString);
  __Pyx_INCREF(__pyx_n_u_stringEnd);
  __Pyx_GIVEREF(__pyx_n_u_stringEnd);
  PyList_SET_ITEM(__pyx_t_3, 156, __pyx_n_u_stringEnd);
  __Pyx_INCREF(__pyx_n_u_stringStart);
  __Pyx_GIVEREF(__pyx_n_u_stringStart);
  PyList_SET_ITEM(__pyx_t_3, 157, __pyx_n_u_stringStart);
  __Pyx_INCREF(__pyx_n_u_tokenMap);
  __Pyx_GIVEREF(__pyx_n_u_tokenMap);
  PyList_SET_ITEM(__pyx_t_3, 158, __pyx_n_u_tokenMap);
  __Pyx_INCREF(__pyx_n_u_traceParseAction);
  __Pyx_GIVEREF(__pyx_n_u_traceParseAction);
  PyList_SET_ITEM(__pyx_t_3, 159, __pyx_n_u_traceParseAction);
  __Pyx_INCREF(__pyx_n_u_unicodeString);
  __Pyx_GIVEREF(__pyx_n_u_unicodeString);
  PyList_SET_ITEM(__pyx_t_3, 160, __pyx_n_u_unicodeString);
  __Pyx_INCREF(__pyx_n_u_withAttribute);
  __Pyx_GIVEREF(__pyx_n_u_withAttribute);
  PyList_SET_ITEM(__pyx_t_3, 161, __pyx_n_u_withAttribute);
  __Pyx_INCREF(__pyx_n_u_withClass);
  __Pyx_GIVEREF(__pyx_n_u_withClass);
  PyList_SET_ITEM(__pyx_t_3, 162, __pyx_n_u_withClass);
  __Pyx_INCREF(__pyx_n_u_common);
  __Pyx_GIVEREF(__pyx_n_u_common);
  PyList_SET_ITEM(__pyx_t_3, 163, __pyx_n_u_common);
  __Pyx_INCREF(__pyx_n_u_unicode);
  __Pyx_GIVEREF(__pyx_n_u_unicode);
  PyList_SET_ITEM(__pyx_t_3, 164, __pyx_n_u_unicode);
  __Pyx_INCREF(__pyx_n_u_testing);
  __Pyx_GIVEREF(__pyx_n_u_testing);
  PyList_SET_ITEM(__pyx_t_3, 165, __pyx_n_u_testing);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_3) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyparsing/__init__.py":1
 * # module pyparsing.py             # <<<<<<<<<<<<<<
 * #
 * # Copyright (c) 2003-2022  Paul T. McGuire
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyparsing.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyparsing.__init__");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* SetPackagePathFromImportLib */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(const char* parent_package_name, PyObject *module_name) {
    PyObject *importlib, *loader, *osmod, *ossep, *parts, *package_path;
    PyObject *path = NULL, *file_path = NULL;
    int result;
    if (parent_package_name) {
        PyObject *package = PyImport_ImportModule(parent_package_name);
        if (unlikely(!package))
            goto bad;
        path = PyObject_GetAttrString(package, "__path__");
        Py_DECREF(package);
        if (unlikely(!path) || unlikely(path == Py_None))
            goto bad;
    } else {
        path = Py_None; Py_INCREF(Py_None);
    }
    importlib = PyImport_ImportModule("importlib");
    if (unlikely(!importlib))
        goto bad;
    loader = PyObject_CallMethod(importlib, "find_loader", "(OO)", module_name, path);
    Py_DECREF(importlib);
    Py_DECREF(path); path = NULL;
    if (unlikely(!loader))
        goto bad;
    file_path = PyObject_GetAttrString(loader, "path");
    Py_DECREF(loader);
    if (unlikely(!file_path))
        goto bad;
    if (unlikely(PyObject_SetAttrString(__pyx_m, "__file__", file_path) < 0))
        goto bad;
    osmod = PyImport_ImportModule("os");
    if (unlikely(!osmod))
        goto bad;
    ossep = PyObject_GetAttrString(osmod, "sep");
    Py_DECREF(osmod);
    if (unlikely(!ossep))
        goto bad;
    parts = PyObject_CallMethod(file_path, "rsplit", "(Oi)", ossep, 1);
    Py_DECREF(file_path); file_path = NULL;
    Py_DECREF(ossep);
    if (unlikely(!parts))
        goto bad;
    package_path = Py_BuildValue("[O]", PyList_GET_ITEM(parts, 0));
    Py_DECREF(parts);
    if (unlikely(!package_path))
        goto bad;
    goto set_path;
bad:
    PyErr_WriteUnraisable(module_name);
    Py_XDECREF(path);
    Py_XDECREF(file_path);
    PyErr_Clear();
    package_path = PyList_New(0);
    if (unlikely(!package_path))
        return -1;
set_path:
    result = PyObject_SetAttrString(__pyx_m, "__path__", package_path);
    Py_DECREF(package_path);
    return result;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
